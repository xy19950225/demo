{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u4e3b\u8981\u5185\u5bb9 \u00b6 SQL SQL \u6307\u7ed3\u6784\u5316\u67e5\u8be2\u8bed\u8a00 (Structured Query Language). RDBMS \u6307\u5173\u7cfb\u578b\u6570\u636e\u5e93\u7ba1\u7406\u7cfb\u7edf (Relational Database Management System). MySQL \u662f\u6700\u6d41\u884c\u7684\u5173\u7cfb\u578b\u6570\u636e\u5e93\u7ba1\u7406\u7cfb\u7edf (RDBMS). Python python - Python \u662f\u4e00\u95e8\u9ad8\u5c42\u6b21\u7684\u7ed3\u5408\u4e86\u89e3\u91ca\u6027\u3001\u7f16\u8bd1\u6027\u3001\u4e92\u52a8\u6027\u548c\u9762\u5411\u5bf9\u8c61\u7684\u811a\u672c\u8bed\u8a00. numpy - NumPy (Numerical Python) \u662f Python \u8bed\u8a00\u7684\u4e00\u4e2a\u6269\u5c55\u7a0b\u5e8f\u5e93\uff0c\u63d0\u4f9b\u9ad8\u6027\u80fd\u7684\u6570\u7ec4\u548c\u77e9\u9635\u8fd0\u7b97, \u6b64\u5916\u4e5f\u9488\u5bf9\u6570\u7ec4\u8fd0\u7b97\u63d0\u4f9b\u5927\u91cf\u7684\u6570\u5b66\u51fd\u6570\u5e93. \u5185\u90e8\u89e3\u9664\u4e86 Python \u7684 PIL (\u5168\u5c40\u89e3\u91ca\u5668\u9501), \u8fd0\u7b97\u6548\u7387\u6781\u597d, \u662f\u5927\u91cf\u673a\u5668\u5b66\u4e60\u6846\u67b6\u7684\u57fa\u7840\u5e93. pandas - Pandas (Python data analysis) \u662f\u4e00\u4e2a\u5f3a\u5927\u7684\u5206\u6790\u7ed3\u6784\u5316\u6570\u636e\u7684\u5de5\u5177\u96c6\uff0c\u5b83\u7684\u4f7f\u7528\u57fa\u7840\u662fNumpy\uff1b\u7528\u4e8e\u6570\u636e\u6316\u6398\u548c\u6570\u636e\u5206\u6790\uff0c\u540c\u65f6\u4e5f\u63d0\u4f9b\u6570\u636e\u6e05\u6d17\u529f\u80fd. matplotlib - Matplotlib \u662f\u6700\u6d41\u884c\u7684 Python 2D \u7ed8\u56fe\u5e93. scipy - SciPy\uff08Scientific Python\uff09\u662f\u4e00\u7ec4\u4e13\u95e8\u89e3\u51b3\u79d1\u5b66\u8ba1\u7b97\u4e2d\u5404\u79cd\u6807\u51c6\u95ee\u9898\u57df\u7684\u5305\u7684\u96c6\u5408. scikit-learn - python \u7684\u901a\u7528\u673a\u5668\u5b66\u4e60\u5de5\u5177\u5305. Machine Learning 123 Deep Learning 123 \u76f8\u5173\u94fe\u63a5 \u00b6 mysql \u5b98\u7f51\uff1a https://www.mysql.com/ python \u5b98\u7f51\uff1a https://www.python.org/ numpy \u5b98\u7f51\uff1a http://www.numpy.org/ pandas \u5b98\u7f51\uff1a https://pandas.pydata.org/ scipy \u5b98\u7f51\uff1a https://www.scipy.org/ matplotlib \u5b98\u7f51\uff1a https://matplotlib.org/","title":"01. Introduction"},{"location":"#_1","text":"SQL SQL \u6307\u7ed3\u6784\u5316\u67e5\u8be2\u8bed\u8a00 (Structured Query Language). RDBMS \u6307\u5173\u7cfb\u578b\u6570\u636e\u5e93\u7ba1\u7406\u7cfb\u7edf (Relational Database Management System). MySQL \u662f\u6700\u6d41\u884c\u7684\u5173\u7cfb\u578b\u6570\u636e\u5e93\u7ba1\u7406\u7cfb\u7edf (RDBMS). Python python - Python \u662f\u4e00\u95e8\u9ad8\u5c42\u6b21\u7684\u7ed3\u5408\u4e86\u89e3\u91ca\u6027\u3001\u7f16\u8bd1\u6027\u3001\u4e92\u52a8\u6027\u548c\u9762\u5411\u5bf9\u8c61\u7684\u811a\u672c\u8bed\u8a00. numpy - NumPy (Numerical Python) \u662f Python \u8bed\u8a00\u7684\u4e00\u4e2a\u6269\u5c55\u7a0b\u5e8f\u5e93\uff0c\u63d0\u4f9b\u9ad8\u6027\u80fd\u7684\u6570\u7ec4\u548c\u77e9\u9635\u8fd0\u7b97, \u6b64\u5916\u4e5f\u9488\u5bf9\u6570\u7ec4\u8fd0\u7b97\u63d0\u4f9b\u5927\u91cf\u7684\u6570\u5b66\u51fd\u6570\u5e93. \u5185\u90e8\u89e3\u9664\u4e86 Python \u7684 PIL (\u5168\u5c40\u89e3\u91ca\u5668\u9501), \u8fd0\u7b97\u6548\u7387\u6781\u597d, \u662f\u5927\u91cf\u673a\u5668\u5b66\u4e60\u6846\u67b6\u7684\u57fa\u7840\u5e93. pandas - Pandas (Python data analysis) \u662f\u4e00\u4e2a\u5f3a\u5927\u7684\u5206\u6790\u7ed3\u6784\u5316\u6570\u636e\u7684\u5de5\u5177\u96c6\uff0c\u5b83\u7684\u4f7f\u7528\u57fa\u7840\u662fNumpy\uff1b\u7528\u4e8e\u6570\u636e\u6316\u6398\u548c\u6570\u636e\u5206\u6790\uff0c\u540c\u65f6\u4e5f\u63d0\u4f9b\u6570\u636e\u6e05\u6d17\u529f\u80fd. matplotlib - Matplotlib \u662f\u6700\u6d41\u884c\u7684 Python 2D \u7ed8\u56fe\u5e93. scipy - SciPy\uff08Scientific Python\uff09\u662f\u4e00\u7ec4\u4e13\u95e8\u89e3\u51b3\u79d1\u5b66\u8ba1\u7b97\u4e2d\u5404\u79cd\u6807\u51c6\u95ee\u9898\u57df\u7684\u5305\u7684\u96c6\u5408. scikit-learn - python \u7684\u901a\u7528\u673a\u5668\u5b66\u4e60\u5de5\u5177\u5305. Machine Learning 123 Deep Learning 123","title":"\u4e3b\u8981\u5185\u5bb9"},{"location":"#_2","text":"mysql \u5b98\u7f51\uff1a https://www.mysql.com/ python \u5b98\u7f51\uff1a https://www.python.org/ numpy \u5b98\u7f51\uff1a http://www.numpy.org/ pandas \u5b98\u7f51\uff1a https://pandas.pydata.org/ scipy \u5b98\u7f51\uff1a https://www.scipy.org/ matplotlib \u5b98\u7f51\uff1a https://matplotlib.org/","title":"\u76f8\u5173\u94fe\u63a5"},{"location":"pandas/","text":"\u5bfc\u5165 Pandas \u4e0e NumPy \u00b6 import pandas as pd import numpy as np \u751f\u6210\u5bf9\u8c61 \u00b6 # \u7528\u503c\u5217\u8868\u751f\u6210 Series \u65f6\uff0cPandas \u9ed8\u8ba4\u81ea\u52a8\u751f\u6210\u6574\u6570\u7d22\u5f15 s = pd . Series ([ 1 , 3 , 5 , np . nan , 6 , 8 ]) s 0 1.0 1 3.0 2 5.0 3 NaN 4 6.0 5 8.0 dtype: float64 # \u7528\u542b\u65e5\u671f\u65f6\u95f4\u7d22\u5f15\u4e0e\u6807\u7b7e\u7684 NumPy \u6570\u7ec4\u751f\u6210 DataFrame df = pd . DataFrame ( np . random . randn ( 6 , 4 ), index = pd . date_range ( \"20200901\" , periods = 6 ), columns = list ( \"ABCD\" )) df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D 2020-09-01 0.267854 -1.131221 -0.354760 2.230473 2020-09-02 0.401973 0.552876 -0.484048 0.410471 2020-09-03 -0.526610 0.429193 2.455894 0.366316 2020-09-04 0.996290 1.739588 2.203829 0.032343 2020-09-05 0.046479 0.604200 -1.042130 0.051650 2020-09-06 -0.186728 -1.005533 1.239826 1.058215 # \u7528 Series \u5b57\u5178\u5bf9\u8c61\u751f\u6210 DataFrame df2 = pd . DataFrame ({ \"A\" : 1 , \"B\" : pd . Timestamp ( \"20200901\" ), \"C\" : pd . Series ( 1 , index = list ( range ( 4 )), dtype = \"float32\" ), \"D\" : np . array ([ 3 ] * 4 , dtype = \"int32\" ), \"E\" : pd . Categorical ([ \"test\" , \"train\" , \"test\" , \"train\" ]), \"F\" : \"foo\" }) df2 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D E F 0 1 2020-09-01 1.0 3 test foo 1 1 2020-09-01 1.0 3 train foo 2 1 2020-09-01 1.0 3 test foo 3 1 2020-09-01 1.0 3 train foo # DataFrame\u7684\u5217\u6709\u4e0d\u540c\u6570\u636e\u7c7b\u578b df2 . dtypes A int64 B datetime64[ns] C float32 D int32 E category F object dtype: object \u67e5\u770b\u6570\u636e \u00b6 \u67e5\u770b\u5934\u90e8\u548c\u5c3e\u90e8\u6570\u636e \u00b6 # \u67e5\u770b\u5934\u90e8\u6570\u636e df . head () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D 2020-09-01 0.267854 -1.131221 -0.354760 2.230473 2020-09-02 0.401973 0.552876 -0.484048 0.410471 2020-09-03 -0.526610 0.429193 2.455894 0.366316 2020-09-04 0.996290 1.739588 2.203829 0.032343 2020-09-05 0.046479 0.604200 -1.042130 0.051650 # \u67e5\u770b\u5c3e\u90e8\u6570\u636e df . tail ( 3 ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D 2020-09-04 0.996290 1.739588 2.203829 0.032343 2020-09-05 0.046479 0.604200 -1.042130 0.051650 2020-09-06 -0.186728 -1.005533 1.239826 1.058215 \u663e\u793a\u7d22\u5f15\u4e0e\u5217\u540d \u00b6 # \u663e\u793a\u7d22\u5f15 df . index DatetimeIndex(['2020-09-01', '2020-09-02', '2020-09-03', '2020-09-04', '2020-09-05', '2020-09-06'], dtype='datetime64[ns]', freq='D') # \u663e\u793a\u5217\u540d df . columns Index(['A', 'B', 'C', 'D'], dtype='object') \u67e5\u770b\u6570\u636e\u7edf\u8ba1\u6458\u8981 \u00b6 df . describe () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D count 6.000000 6.000000 6.000000 6.000000 mean 0.166543 0.198184 0.669769 0.691578 std 0.524185 1.089605 1.495333 0.840421 min -0.526610 -1.131221 -1.042130 0.032343 25% -0.128426 -0.646852 -0.451726 0.130316 50% 0.157166 0.491035 0.442533 0.388393 75% 0.368443 0.591369 1.962828 0.896279 max 0.996290 1.739588 2.455894 2.230473 \u8f6c\u7f6e\u6570\u636e \u00b6 df . T .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } 2020-09-01 2020-09-02 2020-09-03 2020-09-04 2020-09-05 2020-09-06 A 0.267854 0.401973 -0.526610 0.996290 0.046479 -0.186728 B -1.131221 0.552876 0.429193 1.739588 0.604200 -1.005533 C -0.354760 -0.484048 2.455894 2.203829 -1.042130 1.239826 D 2.230473 0.410471 0.366316 0.032343 0.051650 1.058215 \u6309\u8f74\u6392\u5e8f \u00b6 df . sort_index ( axis = 1 , ascending = False ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } D C B A 2020-09-01 2.230473 -0.354760 -1.131221 0.267854 2020-09-02 0.410471 -0.484048 0.552876 0.401973 2020-09-03 0.366316 2.455894 0.429193 -0.526610 2020-09-04 0.032343 2.203829 1.739588 0.996290 2020-09-05 0.051650 -1.042130 0.604200 0.046479 2020-09-06 1.058215 1.239826 -1.005533 -0.186728 \u6309\u503c\u6392\u5e8f \u00b6 df . sort_values ( by = \"A\" , axis = 0 , ascending = False ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D 2020-09-04 0.996290 1.739588 2.203829 0.032343 2020-09-02 0.401973 0.552876 -0.484048 0.410471 2020-09-01 0.267854 -1.131221 -0.354760 2.230473 2020-09-05 0.046479 0.604200 -1.042130 0.051650 2020-09-06 -0.186728 -1.005533 1.239826 1.058215 2020-09-03 -0.526610 0.429193 2.455894 0.366316 \u9009\u62e9\u6570\u636e \u00b6 \u83b7\u53d6\u6570\u636e \u00b6 df . A 2020-09-01 0.267854 2020-09-02 0.401973 2020-09-03 -0.526610 2020-09-04 0.996290 2020-09-05 0.046479 2020-09-06 -0.186728 Freq: D, Name: A, dtype: float64 # \u9009\u62e9\u5355\u5217\uff0c\u4ea7\u751f Series\uff0c\u4e0e df.A \u7b49\u6548 df [ \"A\" ] 2020-09-01 0.267854 2020-09-02 0.401973 2020-09-03 -0.526610 2020-09-04 0.996290 2020-09-05 0.046479 2020-09-06 -0.186728 Freq: D, Name: A, dtype: float64 # \u7528 [ ] \u5207\u7247\u884c df [ 0 : 3 ] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D 2020-09-01 0.267854 -1.131221 -0.354760 2.230473 2020-09-02 0.401973 0.552876 -0.484048 0.410471 2020-09-03 -0.526610 0.429193 2.455894 0.366316 \u6309\u6807\u7b7e\u9009\u62e9 \u00b6 # \u7528\u6807\u7b7e\u63d0\u53d6\u4e00\u884c\u6570\u636e df . loc [ \"20200901\" ] A 0.267854 B -1.131221 C -0.354760 D 2.230473 Name: 2020-09-01 00:00:00, dtype: float64 # \u7528\u6807\u7b7e\u9009\u62e9\u591a\u5217\u6570\u636e df . loc [:, [ \"A\" , \"B\" ]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B 2020-09-01 0.267854 -1.131221 2020-09-02 0.401973 0.552876 2020-09-03 -0.526610 0.429193 2020-09-04 0.996290 1.739588 2020-09-05 0.046479 0.604200 2020-09-06 -0.186728 -1.005533 \u6309\u4f4d\u7f6e\u9009\u62e9 \u00b6 # \u7528\u6574\u6570\u4f4d\u7f6e\u9009\u62e9 df . iloc [ 3 ] A 0.996290 B 1.739588 C 2.203829 D 0.032343 Name: 2020-09-04 00:00:00, dtype: float64 # \u7c7b\u4f3c NumPy\u7528\u6574\u6570\u5207\u7247 df . iloc [ 3 : 5 , 0 : 2 ] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B 2020-09-04 0.996290 1.739588 2020-09-05 0.046479 0.604200 \u5e03\u5c14\u7d22\u5f15 \u00b6 # \u7528\u5355\u5217\u7684\u503c\u9009\u62e9\u6570\u636e df [ df [ \"A\" ] > 0 ] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D 2020-09-01 0.267854 -1.131221 -0.354760 2.230473 2020-09-02 0.401973 0.552876 -0.484048 0.410471 2020-09-04 0.996290 1.739588 2.203829 0.032343 2020-09-05 0.046479 0.604200 -1.042130 0.051650 # \u9009\u62e9 DataFrame\u91cc\u6ee1\u8db3\u6761\u4ef6\u7684\u503c df [ df > 0 ] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D 2020-09-01 0.267854 NaN NaN 2.230473 2020-09-02 0.401973 0.552876 NaN 0.410471 2020-09-03 NaN 0.429193 2.455894 0.366316 2020-09-04 0.996290 1.739588 2.203829 0.032343 2020-09-05 0.046479 0.604200 NaN 0.051650 2020-09-06 NaN NaN 1.239826 1.058215 \u8d4b\u503c \u00b6 # \u7528\u7d22\u5f15\u81ea\u52a8\u5bf9\u9f50\u65b0\u589e\u5217\u7684\u6570\u636e s1 = pd . Series ([ 1 , 2 , 3 , 4 , 5 , 6 ], index = pd . date_range ( \"20200901\" , periods = 6 )) s1 2020-09-01 1 2020-09-02 2 2020-09-03 3 2020-09-04 4 2020-09-05 5 2020-09-06 6 Freq: D, dtype: int64 df [ \"F\" ] = s1 df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D F 2020-09-01 0.267854 -1.131221 -0.354760 2.230473 1 2020-09-02 0.401973 0.552876 -0.484048 0.410471 2 2020-09-03 -0.526610 0.429193 2.455894 0.366316 3 2020-09-04 0.996290 1.739588 2.203829 0.032343 4 2020-09-05 0.046479 0.604200 -1.042130 0.051650 5 2020-09-06 -0.186728 -1.005533 1.239826 1.058215 6 \u7f3a\u5931\u503c \u00b6 # \u91cd\u5efa\u7d22\u5f15\uff08reindex\uff09\u53ef\u4ee5\u66f4\u6539\u3001\u6dfb\u52a0\u3001\u5220\u9664\u6307\u5b9a\u8f74\u7684\u7d22\u5f15\uff0c\u5e76\u8fd4\u56de\u6570\u636e\u526f\u672c\uff0c\u5373\u4e0d\u66f4\u6539\u539f\u6570\u636e df1 = df . reindex ( index = df . index [ 0 : 4 ], columns = list ( df . columns ) + [ \"E\" ]) df1 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D F E 2020-09-01 0.267854 -1.131221 -0.354760 2.230473 1 NaN 2020-09-02 0.401973 0.552876 -0.484048 0.410471 2 NaN 2020-09-03 -0.526610 0.429193 2.455894 0.366316 3 NaN 2020-09-04 0.996290 1.739588 2.203829 0.032343 4 NaN df1 . loc [ df . index [ 0 ]: df . index [ 1 ], \"E\" ] = 1 df1 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D F E 2020-09-01 0.267854 -1.131221 -0.354760 2.230473 1 1.0 2020-09-02 0.401973 0.552876 -0.484048 0.410471 2 1.0 2020-09-03 -0.526610 0.429193 2.455894 0.366316 3 NaN 2020-09-04 0.996290 1.739588 2.203829 0.032343 4 NaN \u5220\u9664\u7f3a\u5931\u503c \u00b6 df1 . dropna () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D F E 2020-09-01 0.267854 -1.131221 -0.354760 2.230473 1 1.0 2020-09-02 0.401973 0.552876 -0.484048 0.410471 2 1.0 \u586b\u5145\u7f3a\u5931\u503c \u00b6 df1 . fillna ( 0 ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D F E 2020-09-01 0.267854 -1.131221 -0.354760 2.230473 1 1.0 2020-09-02 0.401973 0.552876 -0.484048 0.410471 2 1.0 2020-09-03 -0.526610 0.429193 2.455894 0.366316 3 0.0 2020-09-04 0.996290 1.739588 2.203829 0.032343 4 0.0 \u8fd0\u7b97 \u00b6 \u7edf\u8ba1 \u00b6 # \u63cf\u8ff0\u6027\u7edf\u8ba1 df . mean () A 0.166543 B 0.198184 C 0.669769 D 0.691578 F 3.500000 dtype: float64 # Apply\u51fd\u6570 df . apply ( lambda x : x . max () - x . min ()) A 1.522901 B 2.870809 C 3.498024 D 2.198130 F 5.000000 dtype: float64 \u5408\u5e76\uff08Merge\uff09 \u00b6 \u7ed3\u5408\uff08Concat\uff09 \u00b6 df1 = pd . DataFrame ({ \"A\" : [ \"A0\" , \"A1\" , \"A2\" , \"A3\" ], \"B\" : [ \"B0\" , \"B1\" , \"B2\" , \"B3\" ], \"C\" : [ \"C0\" , \"C1\" , \"C2\" , \"C3\" ], \"D\" : [ \"D0\" , \"D1\" , \"D2\" , \"D3\" ]}, index = [ 0 , 1 , 2 , 3 ]) df2 = pd . DataFrame ({ \"A\" : [ \"A4\" , \"A5\" , \"A6\" , \"A7\" ], \"B\" : [ \"B4\" , \"B5\" , \"B6\" , \"B7\" ], \"C\" : [ \"C4\" , \"C5\" , \"C6\" , \"C7\" ], \"D\" : [ \"D4\" , \"D5\" , \"D6\" , \"D7\" ]}, index = [ 4 , 5 , 6 , 7 ]) df3 = pd . DataFrame ({ \"A\" : [ \"A8\" , \"A9\" , \"A10\" , \"A11\" ], \"B\" : [ \"B8\" , \"B9\" , \"B10\" , \"B11\" ], \"C\" : [ \"C8\" , \"C9\" , \"C10\" , \"C11\" ], \"D\" : [ \"D8\" , \"D9\" , \"D10\" , \"D11\" ]}, index = [ 8 , 9 , 10 , 11 ]) frame = pd . concat ([ df1 , df2 , df3 ]) frame .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D 0 A0 B0 C0 D0 1 A1 B1 C1 D1 2 A2 B2 C2 D2 3 A3 B3 C3 D3 4 A4 B4 C4 D4 5 A5 B5 C5 D5 6 A6 B6 C6 D6 7 A7 B7 C7 D7 8 A8 B8 C8 D8 9 A9 B9 C9 D9 10 A10 B10 C10 D10 11 A11 B11 C11 D11 \u8fde\u63a5\uff08Join\uff09 \u00b6 left = pd . DataFrame ({ \"key\" : [ \"foo\" , \"foo\" ], \"lval\" : [ 1 , 2 ]}) right = pd . DataFrame ({ \"key\" : [ \"foo\" , \"foo\" ], \"rval\" : [ 4 , 5 ]}) left .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } key lval 0 foo 1 1 foo 2 right .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } key rval 0 foo 4 1 foo 5 pd . merge ( left , right , on = \"key\" ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } key lval rval 0 foo 1 4 1 foo 1 5 2 foo 2 4 3 foo 2 5 \u8ffd\u52a0\uff08Append\uff09 \u00b6 df = pd . DataFrame ( np . random . randn ( 8 , 4 ), columns = [ 'A' , 'B' , 'C' , 'D' ]) df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D 0 -0.926318 -1.110969 0.217602 -0.094516 1 1.349012 1.385598 -0.172996 -0.790864 2 -0.417921 -0.004624 -0.509224 -1.550437 3 -0.491223 -0.642262 0.175682 0.721095 4 -0.058397 0.283183 -0.497554 0.739755 5 -0.712672 0.628955 -0.472966 0.318093 6 -0.279831 0.074890 -1.236430 0.592133 7 0.132221 -0.676778 -0.701541 -1.210815 s = df . loc [ 3 ] s A -0.491223 B -0.642262 C 0.175682 D 0.721095 Name: 3, dtype: float64 df . append ( s , ignore_index = True ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D 0 -0.926318 -1.110969 0.217602 -0.094516 1 1.349012 1.385598 -0.172996 -0.790864 2 -0.417921 -0.004624 -0.509224 -1.550437 3 -0.491223 -0.642262 0.175682 0.721095 4 -0.058397 0.283183 -0.497554 0.739755 5 -0.712672 0.628955 -0.472966 0.318093 6 -0.279831 0.074890 -1.236430 0.592133 7 0.132221 -0.676778 -0.701541 -1.210815 8 -0.491223 -0.642262 0.175682 0.721095 \u5206\u7ec4\uff08Group by\uff09 \u00b6 df = pd . DataFrame ([( \"bird\" , \"Falconiformes\" , 389.0 ), ( \"bird\" , \"Psittaciformes\" , 24.0 ), ( \"mammal\" , \"Carnivora\" , 80.2 ), ( \"mammal\" , \"Primates\" , np . nan ), ( \"mammal\" , \"Carnivora\" , 58 )], index = [ \"falcon\" , \"parrot\" , \"lion\" , \"monkey\" , \"leopard\" ], columns = ( \"class\" , \"order\" , \"max_speed\" )) df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } class order max_speed falcon bird Falconiformes 389.0 parrot bird Psittaciformes 24.0 lion mammal Carnivora 80.2 monkey mammal Primates NaN leopard mammal Carnivora 58.0 df . groupby ( by = [ \"class\" , \"order\" ]) . sum () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } max_speed class order bird Falconiformes 389.0 Psittaciformes 24.0 mammal Carnivora 138.2 Primates 0.0 \u91cd\u5851\uff08Reshaping\uff09 \u00b6 \u5806\u53e0\uff08Stack\uff09 \u00b6 tuples = list ( zip ( * [[ \"bar\" , \"bar\" , \"baz\" , \"baz\" , \"foo\" , \"foo\" , \"qux\" , \"qux\" ], [ \"one\" , \"two\" , \"one\" , \"two\" , \"one\" , \"two\" , \"one\" , \"two\" ]])) index = pd . MultiIndex . from_tuples ( tuples , names = [ \"first\" , \"second\" ]) df = pd . DataFrame ( np . random . randn ( 8 , 2 ), index = index , columns = [ \"A\" , \"B\" ]) df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B first second bar one 1.457984 0.864189 two 1.808289 1.558983 baz one 1.388420 -0.746224 two 0.215613 1.050263 foo one -0.536742 0.383083 two 0.751930 -1.717304 qux one 0.929121 -1.075260 two 0.238485 -1.581831 df2 = df [: 4 ] df2 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B first second bar one 1.457984 0.864189 two 1.808289 1.558983 baz one 1.388420 -0.746224 two 0.215613 1.050263 stacked = df2 . stack () stacked first second bar one A 1.457984 B 0.864189 two A 1.808289 B 1.558983 baz one A 1.388420 B -0.746224 two A 0.215613 B 1.050263 dtype: float64 stacked . unstack () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B first second bar one 1.457984 0.864189 two 1.808289 1.558983 baz one 1.388420 -0.746224 two 0.215613 1.050263 \u6570\u636e\u900f\u89c6\u8868\uff08Pivot Tables\uff09 \u00b6 import datetime df = pd . DataFrame ({ \"A\" : [ \"one\" , \"one\" , \"two\" , \"three\" ] * 3 , \"B\" : [ \"A\" , \"B\" , \"C\" ] * 4 , \"C\" : [ \"foo\" , \"foo\" , \"foo\" , \"bar\" , \"bar\" , \"bar\" ] * 2 , \"D\" : np . random . randn ( 12 ), \"E\" : np . random . randn ( 12 ), \"F\" :[ datetime . datetime ( 2020 , i , 1 ) for i in range ( 1 , 7 )] + [ datetime . datetime ( 2020 , i , 15 ) for i in range ( 1 , 7 )]}) df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D E F 0 one A foo 0.613701 0.145033 2020-01-01 1 one B foo -1.501934 -2.349162 2020-02-01 2 two C foo -0.626282 1.619653 2020-03-01 3 three A bar 0.281824 -0.355017 2020-04-01 4 one B bar 0.777277 0.141533 2020-05-01 5 one C bar 0.788832 1.354495 2020-06-01 6 two A foo -0.182135 -0.177494 2020-01-15 7 three B foo 1.635379 -0.504184 2020-02-15 8 one C foo 1.287765 0.642662 2020-03-15 9 one A bar 1.534828 0.089097 2020-04-15 10 two B bar 0.109630 0.508206 2020-05-15 11 three C bar -0.543666 -0.779394 2020-06-15 pd . pivot_table ( df , values = \"D\" , index = [ \"A\" , \"B\" ], columns = [ \"C\" ]) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } C bar foo A B one A 1.534828 0.613701 B 0.777277 -1.501934 C 0.788832 1.287765 three A 0.281824 NaN B NaN 1.635379 C -0.543666 NaN two A NaN -0.182135 B 0.109630 NaN C NaN -0.626282 \u65f6\u95f4\u5e8f\u5217(TimeSeries) \u00b6 rng = pd . date_range ( \"1/1/2020\" , periods = 10 , freq = \"M\" ) rng DatetimeIndex(['2020-01-31', '2020-02-29', '2020-03-31', '2020-04-30', '2020-05-31', '2020-06-30', '2020-07-31', '2020-08-31', '2020-09-30', '2020-10-31'], dtype='datetime64[ns]', freq='M') \u7c7b\u522b\u578b\uff08Categoricals\uff09 \u00b6 df = pd . DataFrame ({ \"A\" : [ \"a\" , \"b\" , \"c\" , \"a\" ]}) df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A 0 a 1 b 2 c 3 a df [ \"B\" ] = df [ \"A\" ] . astype ( \"category\" ) df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B 0 a a 1 b b 2 c c 3 a a","title":"3.3 pandas \u57fa\u7840"},{"location":"pandas/#pandas-numpy","text":"import pandas as pd import numpy as np","title":"\u5bfc\u5165 Pandas \u4e0e NumPy"},{"location":"pandas/#_1","text":"# \u7528\u503c\u5217\u8868\u751f\u6210 Series \u65f6\uff0cPandas \u9ed8\u8ba4\u81ea\u52a8\u751f\u6210\u6574\u6570\u7d22\u5f15 s = pd . Series ([ 1 , 3 , 5 , np . nan , 6 , 8 ]) s 0 1.0 1 3.0 2 5.0 3 NaN 4 6.0 5 8.0 dtype: float64 # \u7528\u542b\u65e5\u671f\u65f6\u95f4\u7d22\u5f15\u4e0e\u6807\u7b7e\u7684 NumPy \u6570\u7ec4\u751f\u6210 DataFrame df = pd . DataFrame ( np . random . randn ( 6 , 4 ), index = pd . date_range ( \"20200901\" , periods = 6 ), columns = list ( \"ABCD\" )) df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D 2020-09-01 0.267854 -1.131221 -0.354760 2.230473 2020-09-02 0.401973 0.552876 -0.484048 0.410471 2020-09-03 -0.526610 0.429193 2.455894 0.366316 2020-09-04 0.996290 1.739588 2.203829 0.032343 2020-09-05 0.046479 0.604200 -1.042130 0.051650 2020-09-06 -0.186728 -1.005533 1.239826 1.058215 # \u7528 Series \u5b57\u5178\u5bf9\u8c61\u751f\u6210 DataFrame df2 = pd . DataFrame ({ \"A\" : 1 , \"B\" : pd . Timestamp ( \"20200901\" ), \"C\" : pd . Series ( 1 , index = list ( range ( 4 )), dtype = \"float32\" ), \"D\" : np . array ([ 3 ] * 4 , dtype = \"int32\" ), \"E\" : pd . Categorical ([ \"test\" , \"train\" , \"test\" , \"train\" ]), \"F\" : \"foo\" }) df2 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D E F 0 1 2020-09-01 1.0 3 test foo 1 1 2020-09-01 1.0 3 train foo 2 1 2020-09-01 1.0 3 test foo 3 1 2020-09-01 1.0 3 train foo # DataFrame\u7684\u5217\u6709\u4e0d\u540c\u6570\u636e\u7c7b\u578b df2 . dtypes A int64 B datetime64[ns] C float32 D int32 E category F object dtype: object","title":"\u751f\u6210\u5bf9\u8c61"},{"location":"pandas/#_2","text":"","title":"\u67e5\u770b\u6570\u636e"},{"location":"pandas/#_3","text":"# \u67e5\u770b\u5934\u90e8\u6570\u636e df . head () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D 2020-09-01 0.267854 -1.131221 -0.354760 2.230473 2020-09-02 0.401973 0.552876 -0.484048 0.410471 2020-09-03 -0.526610 0.429193 2.455894 0.366316 2020-09-04 0.996290 1.739588 2.203829 0.032343 2020-09-05 0.046479 0.604200 -1.042130 0.051650 # \u67e5\u770b\u5c3e\u90e8\u6570\u636e df . tail ( 3 ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D 2020-09-04 0.996290 1.739588 2.203829 0.032343 2020-09-05 0.046479 0.604200 -1.042130 0.051650 2020-09-06 -0.186728 -1.005533 1.239826 1.058215","title":"\u67e5\u770b\u5934\u90e8\u548c\u5c3e\u90e8\u6570\u636e"},{"location":"pandas/#_4","text":"# \u663e\u793a\u7d22\u5f15 df . index DatetimeIndex(['2020-09-01', '2020-09-02', '2020-09-03', '2020-09-04', '2020-09-05', '2020-09-06'], dtype='datetime64[ns]', freq='D') # \u663e\u793a\u5217\u540d df . columns Index(['A', 'B', 'C', 'D'], dtype='object')","title":"\u663e\u793a\u7d22\u5f15\u4e0e\u5217\u540d"},{"location":"pandas/#_5","text":"df . describe () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D count 6.000000 6.000000 6.000000 6.000000 mean 0.166543 0.198184 0.669769 0.691578 std 0.524185 1.089605 1.495333 0.840421 min -0.526610 -1.131221 -1.042130 0.032343 25% -0.128426 -0.646852 -0.451726 0.130316 50% 0.157166 0.491035 0.442533 0.388393 75% 0.368443 0.591369 1.962828 0.896279 max 0.996290 1.739588 2.455894 2.230473","title":"\u67e5\u770b\u6570\u636e\u7edf\u8ba1\u6458\u8981"},{"location":"pandas/#_6","text":"df . T .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } 2020-09-01 2020-09-02 2020-09-03 2020-09-04 2020-09-05 2020-09-06 A 0.267854 0.401973 -0.526610 0.996290 0.046479 -0.186728 B -1.131221 0.552876 0.429193 1.739588 0.604200 -1.005533 C -0.354760 -0.484048 2.455894 2.203829 -1.042130 1.239826 D 2.230473 0.410471 0.366316 0.032343 0.051650 1.058215","title":"\u8f6c\u7f6e\u6570\u636e"},{"location":"pandas/#_7","text":"df . sort_index ( axis = 1 , ascending = False ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } D C B A 2020-09-01 2.230473 -0.354760 -1.131221 0.267854 2020-09-02 0.410471 -0.484048 0.552876 0.401973 2020-09-03 0.366316 2.455894 0.429193 -0.526610 2020-09-04 0.032343 2.203829 1.739588 0.996290 2020-09-05 0.051650 -1.042130 0.604200 0.046479 2020-09-06 1.058215 1.239826 -1.005533 -0.186728","title":"\u6309\u8f74\u6392\u5e8f"},{"location":"pandas/#_8","text":"df . sort_values ( by = \"A\" , axis = 0 , ascending = False ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D 2020-09-04 0.996290 1.739588 2.203829 0.032343 2020-09-02 0.401973 0.552876 -0.484048 0.410471 2020-09-01 0.267854 -1.131221 -0.354760 2.230473 2020-09-05 0.046479 0.604200 -1.042130 0.051650 2020-09-06 -0.186728 -1.005533 1.239826 1.058215 2020-09-03 -0.526610 0.429193 2.455894 0.366316","title":"\u6309\u503c\u6392\u5e8f"},{"location":"pandas/#_9","text":"","title":"\u9009\u62e9\u6570\u636e"},{"location":"pandas/#_10","text":"df . A 2020-09-01 0.267854 2020-09-02 0.401973 2020-09-03 -0.526610 2020-09-04 0.996290 2020-09-05 0.046479 2020-09-06 -0.186728 Freq: D, Name: A, dtype: float64 # \u9009\u62e9\u5355\u5217\uff0c\u4ea7\u751f Series\uff0c\u4e0e df.A \u7b49\u6548 df [ \"A\" ] 2020-09-01 0.267854 2020-09-02 0.401973 2020-09-03 -0.526610 2020-09-04 0.996290 2020-09-05 0.046479 2020-09-06 -0.186728 Freq: D, Name: A, dtype: float64 # \u7528 [ ] \u5207\u7247\u884c df [ 0 : 3 ] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D 2020-09-01 0.267854 -1.131221 -0.354760 2.230473 2020-09-02 0.401973 0.552876 -0.484048 0.410471 2020-09-03 -0.526610 0.429193 2.455894 0.366316","title":"\u83b7\u53d6\u6570\u636e"},{"location":"pandas/#_11","text":"# \u7528\u6807\u7b7e\u63d0\u53d6\u4e00\u884c\u6570\u636e df . loc [ \"20200901\" ] A 0.267854 B -1.131221 C -0.354760 D 2.230473 Name: 2020-09-01 00:00:00, dtype: float64 # \u7528\u6807\u7b7e\u9009\u62e9\u591a\u5217\u6570\u636e df . loc [:, [ \"A\" , \"B\" ]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B 2020-09-01 0.267854 -1.131221 2020-09-02 0.401973 0.552876 2020-09-03 -0.526610 0.429193 2020-09-04 0.996290 1.739588 2020-09-05 0.046479 0.604200 2020-09-06 -0.186728 -1.005533","title":"\u6309\u6807\u7b7e\u9009\u62e9"},{"location":"pandas/#_12","text":"# \u7528\u6574\u6570\u4f4d\u7f6e\u9009\u62e9 df . iloc [ 3 ] A 0.996290 B 1.739588 C 2.203829 D 0.032343 Name: 2020-09-04 00:00:00, dtype: float64 # \u7c7b\u4f3c NumPy\u7528\u6574\u6570\u5207\u7247 df . iloc [ 3 : 5 , 0 : 2 ] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B 2020-09-04 0.996290 1.739588 2020-09-05 0.046479 0.604200","title":"\u6309\u4f4d\u7f6e\u9009\u62e9"},{"location":"pandas/#_13","text":"# \u7528\u5355\u5217\u7684\u503c\u9009\u62e9\u6570\u636e df [ df [ \"A\" ] > 0 ] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D 2020-09-01 0.267854 -1.131221 -0.354760 2.230473 2020-09-02 0.401973 0.552876 -0.484048 0.410471 2020-09-04 0.996290 1.739588 2.203829 0.032343 2020-09-05 0.046479 0.604200 -1.042130 0.051650 # \u9009\u62e9 DataFrame\u91cc\u6ee1\u8db3\u6761\u4ef6\u7684\u503c df [ df > 0 ] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D 2020-09-01 0.267854 NaN NaN 2.230473 2020-09-02 0.401973 0.552876 NaN 0.410471 2020-09-03 NaN 0.429193 2.455894 0.366316 2020-09-04 0.996290 1.739588 2.203829 0.032343 2020-09-05 0.046479 0.604200 NaN 0.051650 2020-09-06 NaN NaN 1.239826 1.058215","title":"\u5e03\u5c14\u7d22\u5f15"},{"location":"pandas/#_14","text":"# \u7528\u7d22\u5f15\u81ea\u52a8\u5bf9\u9f50\u65b0\u589e\u5217\u7684\u6570\u636e s1 = pd . Series ([ 1 , 2 , 3 , 4 , 5 , 6 ], index = pd . date_range ( \"20200901\" , periods = 6 )) s1 2020-09-01 1 2020-09-02 2 2020-09-03 3 2020-09-04 4 2020-09-05 5 2020-09-06 6 Freq: D, dtype: int64 df [ \"F\" ] = s1 df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D F 2020-09-01 0.267854 -1.131221 -0.354760 2.230473 1 2020-09-02 0.401973 0.552876 -0.484048 0.410471 2 2020-09-03 -0.526610 0.429193 2.455894 0.366316 3 2020-09-04 0.996290 1.739588 2.203829 0.032343 4 2020-09-05 0.046479 0.604200 -1.042130 0.051650 5 2020-09-06 -0.186728 -1.005533 1.239826 1.058215 6","title":"\u8d4b\u503c"},{"location":"pandas/#_15","text":"# \u91cd\u5efa\u7d22\u5f15\uff08reindex\uff09\u53ef\u4ee5\u66f4\u6539\u3001\u6dfb\u52a0\u3001\u5220\u9664\u6307\u5b9a\u8f74\u7684\u7d22\u5f15\uff0c\u5e76\u8fd4\u56de\u6570\u636e\u526f\u672c\uff0c\u5373\u4e0d\u66f4\u6539\u539f\u6570\u636e df1 = df . reindex ( index = df . index [ 0 : 4 ], columns = list ( df . columns ) + [ \"E\" ]) df1 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D F E 2020-09-01 0.267854 -1.131221 -0.354760 2.230473 1 NaN 2020-09-02 0.401973 0.552876 -0.484048 0.410471 2 NaN 2020-09-03 -0.526610 0.429193 2.455894 0.366316 3 NaN 2020-09-04 0.996290 1.739588 2.203829 0.032343 4 NaN df1 . loc [ df . index [ 0 ]: df . index [ 1 ], \"E\" ] = 1 df1 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D F E 2020-09-01 0.267854 -1.131221 -0.354760 2.230473 1 1.0 2020-09-02 0.401973 0.552876 -0.484048 0.410471 2 1.0 2020-09-03 -0.526610 0.429193 2.455894 0.366316 3 NaN 2020-09-04 0.996290 1.739588 2.203829 0.032343 4 NaN","title":"\u7f3a\u5931\u503c"},{"location":"pandas/#_16","text":"df1 . dropna () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D F E 2020-09-01 0.267854 -1.131221 -0.354760 2.230473 1 1.0 2020-09-02 0.401973 0.552876 -0.484048 0.410471 2 1.0","title":"\u5220\u9664\u7f3a\u5931\u503c"},{"location":"pandas/#_17","text":"df1 . fillna ( 0 ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D F E 2020-09-01 0.267854 -1.131221 -0.354760 2.230473 1 1.0 2020-09-02 0.401973 0.552876 -0.484048 0.410471 2 1.0 2020-09-03 -0.526610 0.429193 2.455894 0.366316 3 0.0 2020-09-04 0.996290 1.739588 2.203829 0.032343 4 0.0","title":"\u586b\u5145\u7f3a\u5931\u503c"},{"location":"pandas/#_18","text":"","title":"\u8fd0\u7b97"},{"location":"pandas/#_19","text":"# \u63cf\u8ff0\u6027\u7edf\u8ba1 df . mean () A 0.166543 B 0.198184 C 0.669769 D 0.691578 F 3.500000 dtype: float64 # Apply\u51fd\u6570 df . apply ( lambda x : x . max () - x . min ()) A 1.522901 B 2.870809 C 3.498024 D 2.198130 F 5.000000 dtype: float64","title":"\u7edf\u8ba1"},{"location":"pandas/#merge","text":"","title":"\u5408\u5e76\uff08Merge\uff09"},{"location":"pandas/#concat","text":"df1 = pd . DataFrame ({ \"A\" : [ \"A0\" , \"A1\" , \"A2\" , \"A3\" ], \"B\" : [ \"B0\" , \"B1\" , \"B2\" , \"B3\" ], \"C\" : [ \"C0\" , \"C1\" , \"C2\" , \"C3\" ], \"D\" : [ \"D0\" , \"D1\" , \"D2\" , \"D3\" ]}, index = [ 0 , 1 , 2 , 3 ]) df2 = pd . DataFrame ({ \"A\" : [ \"A4\" , \"A5\" , \"A6\" , \"A7\" ], \"B\" : [ \"B4\" , \"B5\" , \"B6\" , \"B7\" ], \"C\" : [ \"C4\" , \"C5\" , \"C6\" , \"C7\" ], \"D\" : [ \"D4\" , \"D5\" , \"D6\" , \"D7\" ]}, index = [ 4 , 5 , 6 , 7 ]) df3 = pd . DataFrame ({ \"A\" : [ \"A8\" , \"A9\" , \"A10\" , \"A11\" ], \"B\" : [ \"B8\" , \"B9\" , \"B10\" , \"B11\" ], \"C\" : [ \"C8\" , \"C9\" , \"C10\" , \"C11\" ], \"D\" : [ \"D8\" , \"D9\" , \"D10\" , \"D11\" ]}, index = [ 8 , 9 , 10 , 11 ]) frame = pd . concat ([ df1 , df2 , df3 ]) frame .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D 0 A0 B0 C0 D0 1 A1 B1 C1 D1 2 A2 B2 C2 D2 3 A3 B3 C3 D3 4 A4 B4 C4 D4 5 A5 B5 C5 D5 6 A6 B6 C6 D6 7 A7 B7 C7 D7 8 A8 B8 C8 D8 9 A9 B9 C9 D9 10 A10 B10 C10 D10 11 A11 B11 C11 D11","title":"\u7ed3\u5408\uff08Concat\uff09"},{"location":"pandas/#join","text":"left = pd . DataFrame ({ \"key\" : [ \"foo\" , \"foo\" ], \"lval\" : [ 1 , 2 ]}) right = pd . DataFrame ({ \"key\" : [ \"foo\" , \"foo\" ], \"rval\" : [ 4 , 5 ]}) left .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } key lval 0 foo 1 1 foo 2 right .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } key rval 0 foo 4 1 foo 5 pd . merge ( left , right , on = \"key\" ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } key lval rval 0 foo 1 4 1 foo 1 5 2 foo 2 4 3 foo 2 5","title":"\u8fde\u63a5\uff08Join\uff09"},{"location":"pandas/#append","text":"df = pd . DataFrame ( np . random . randn ( 8 , 4 ), columns = [ 'A' , 'B' , 'C' , 'D' ]) df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D 0 -0.926318 -1.110969 0.217602 -0.094516 1 1.349012 1.385598 -0.172996 -0.790864 2 -0.417921 -0.004624 -0.509224 -1.550437 3 -0.491223 -0.642262 0.175682 0.721095 4 -0.058397 0.283183 -0.497554 0.739755 5 -0.712672 0.628955 -0.472966 0.318093 6 -0.279831 0.074890 -1.236430 0.592133 7 0.132221 -0.676778 -0.701541 -1.210815 s = df . loc [ 3 ] s A -0.491223 B -0.642262 C 0.175682 D 0.721095 Name: 3, dtype: float64 df . append ( s , ignore_index = True ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D 0 -0.926318 -1.110969 0.217602 -0.094516 1 1.349012 1.385598 -0.172996 -0.790864 2 -0.417921 -0.004624 -0.509224 -1.550437 3 -0.491223 -0.642262 0.175682 0.721095 4 -0.058397 0.283183 -0.497554 0.739755 5 -0.712672 0.628955 -0.472966 0.318093 6 -0.279831 0.074890 -1.236430 0.592133 7 0.132221 -0.676778 -0.701541 -1.210815 8 -0.491223 -0.642262 0.175682 0.721095","title":"\u8ffd\u52a0\uff08Append\uff09"},{"location":"pandas/#group-by","text":"df = pd . DataFrame ([( \"bird\" , \"Falconiformes\" , 389.0 ), ( \"bird\" , \"Psittaciformes\" , 24.0 ), ( \"mammal\" , \"Carnivora\" , 80.2 ), ( \"mammal\" , \"Primates\" , np . nan ), ( \"mammal\" , \"Carnivora\" , 58 )], index = [ \"falcon\" , \"parrot\" , \"lion\" , \"monkey\" , \"leopard\" ], columns = ( \"class\" , \"order\" , \"max_speed\" )) df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } class order max_speed falcon bird Falconiformes 389.0 parrot bird Psittaciformes 24.0 lion mammal Carnivora 80.2 monkey mammal Primates NaN leopard mammal Carnivora 58.0 df . groupby ( by = [ \"class\" , \"order\" ]) . sum () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } max_speed class order bird Falconiformes 389.0 Psittaciformes 24.0 mammal Carnivora 138.2 Primates 0.0","title":"\u5206\u7ec4\uff08Group by\uff09"},{"location":"pandas/#reshaping","text":"","title":"\u91cd\u5851\uff08Reshaping\uff09"},{"location":"pandas/#stack","text":"tuples = list ( zip ( * [[ \"bar\" , \"bar\" , \"baz\" , \"baz\" , \"foo\" , \"foo\" , \"qux\" , \"qux\" ], [ \"one\" , \"two\" , \"one\" , \"two\" , \"one\" , \"two\" , \"one\" , \"two\" ]])) index = pd . MultiIndex . from_tuples ( tuples , names = [ \"first\" , \"second\" ]) df = pd . DataFrame ( np . random . randn ( 8 , 2 ), index = index , columns = [ \"A\" , \"B\" ]) df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B first second bar one 1.457984 0.864189 two 1.808289 1.558983 baz one 1.388420 -0.746224 two 0.215613 1.050263 foo one -0.536742 0.383083 two 0.751930 -1.717304 qux one 0.929121 -1.075260 two 0.238485 -1.581831 df2 = df [: 4 ] df2 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B first second bar one 1.457984 0.864189 two 1.808289 1.558983 baz one 1.388420 -0.746224 two 0.215613 1.050263 stacked = df2 . stack () stacked first second bar one A 1.457984 B 0.864189 two A 1.808289 B 1.558983 baz one A 1.388420 B -0.746224 two A 0.215613 B 1.050263 dtype: float64 stacked . unstack () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B first second bar one 1.457984 0.864189 two 1.808289 1.558983 baz one 1.388420 -0.746224 two 0.215613 1.050263","title":"\u5806\u53e0\uff08Stack\uff09"},{"location":"pandas/#pivot-tables","text":"import datetime df = pd . DataFrame ({ \"A\" : [ \"one\" , \"one\" , \"two\" , \"three\" ] * 3 , \"B\" : [ \"A\" , \"B\" , \"C\" ] * 4 , \"C\" : [ \"foo\" , \"foo\" , \"foo\" , \"bar\" , \"bar\" , \"bar\" ] * 2 , \"D\" : np . random . randn ( 12 ), \"E\" : np . random . randn ( 12 ), \"F\" :[ datetime . datetime ( 2020 , i , 1 ) for i in range ( 1 , 7 )] + [ datetime . datetime ( 2020 , i , 15 ) for i in range ( 1 , 7 )]}) df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D E F 0 one A foo 0.613701 0.145033 2020-01-01 1 one B foo -1.501934 -2.349162 2020-02-01 2 two C foo -0.626282 1.619653 2020-03-01 3 three A bar 0.281824 -0.355017 2020-04-01 4 one B bar 0.777277 0.141533 2020-05-01 5 one C bar 0.788832 1.354495 2020-06-01 6 two A foo -0.182135 -0.177494 2020-01-15 7 three B foo 1.635379 -0.504184 2020-02-15 8 one C foo 1.287765 0.642662 2020-03-15 9 one A bar 1.534828 0.089097 2020-04-15 10 two B bar 0.109630 0.508206 2020-05-15 11 three C bar -0.543666 -0.779394 2020-06-15 pd . pivot_table ( df , values = \"D\" , index = [ \"A\" , \"B\" ], columns = [ \"C\" ]) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } C bar foo A B one A 1.534828 0.613701 B 0.777277 -1.501934 C 0.788832 1.287765 three A 0.281824 NaN B NaN 1.635379 C -0.543666 NaN two A NaN -0.182135 B 0.109630 NaN C NaN -0.626282","title":"\u6570\u636e\u900f\u89c6\u8868\uff08Pivot Tables\uff09"},{"location":"pandas/#timeseries","text":"rng = pd . date_range ( \"1/1/2020\" , periods = 10 , freq = \"M\" ) rng DatetimeIndex(['2020-01-31', '2020-02-29', '2020-03-31', '2020-04-30', '2020-05-31', '2020-06-30', '2020-07-31', '2020-08-31', '2020-09-30', '2020-10-31'], dtype='datetime64[ns]', freq='M')","title":"\u65f6\u95f4\u5e8f\u5217(TimeSeries)"},{"location":"pandas/#categoricals","text":"df = pd . DataFrame ({ \"A\" : [ \"a\" , \"b\" , \"c\" , \"a\" ]}) df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A 0 a 1 b 2 c 3 a df [ \"B\" ] = df [ \"A\" ] . astype ( \"category\" ) df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B 0 a a 1 b b 2 c c 3 a a","title":"\u7c7b\u522b\u578b\uff08Categoricals\uff09"},{"location":"python/","text":"\u6570\u636e\u7c7b\u578b \u00b6 \u6570\u5b57\uff08Number\uff09 \u00b6 \u5b57\u7b26\u4e32\uff08String\uff09 \u00b6 \u5217\u8868\uff08List\uff09 \u00b6 \u5143\u7ec4\uff08Tuple\uff09 \u00b6 \u96c6\u5408\uff08Set\uff09 \u00b6 \u5b57\u5178\uff08Dictionary\uff09 \u00b6 \u6761\u4ef6\u63a7\u5236 \u00b6 if \u8bed\u53e5 \u00b6 if \u5d4c\u5957 \u00b6 \u5faa\u73af\u8bed\u53e5 \u00b6 while \u5faa\u73af \u00b6 for \u5faa\u73af \u00b6 \u8fed\u4ee3\u5668\u4e0e\u751f\u6210\u5668 \u00b6 \u51fd\u6570 \u00b6 \u5b9a\u4e49\u51fd\u6570 \u00b6 \u51fd\u6570\u8c03\u7528 \u00b6 \u53c2\u6570\u4f20\u9012 \u00b6 \u533f\u540d\u51fd\u6570 \u00b6 \u9519\u8bef\u548c\u5f02\u5e38 \u00b6 \u9762\u5411\u5bf9\u8c61 \u00b6 \u547d\u540d\u7a7a\u95f4 \u00b6","title":"3.2 numpy \u57fa\u7840"},{"location":"python/#_1","text":"","title":"\u6570\u636e\u7c7b\u578b"},{"location":"python/#number","text":"","title":"\u6570\u5b57\uff08Number\uff09"},{"location":"python/#string","text":"","title":"\u5b57\u7b26\u4e32\uff08String\uff09"},{"location":"python/#list","text":"","title":"\u5217\u8868\uff08List\uff09"},{"location":"python/#tuple","text":"","title":"\u5143\u7ec4\uff08Tuple\uff09"},{"location":"python/#set","text":"","title":"\u96c6\u5408\uff08Set\uff09"},{"location":"python/#dictionary","text":"","title":"\u5b57\u5178\uff08Dictionary\uff09"},{"location":"python/#_2","text":"","title":"\u6761\u4ef6\u63a7\u5236"},{"location":"python/#if","text":"","title":"if \u8bed\u53e5"},{"location":"python/#if_1","text":"","title":"if \u5d4c\u5957"},{"location":"python/#_3","text":"","title":"\u5faa\u73af\u8bed\u53e5"},{"location":"python/#while","text":"","title":"while \u5faa\u73af"},{"location":"python/#for","text":"","title":"for \u5faa\u73af"},{"location":"python/#_4","text":"","title":"\u8fed\u4ee3\u5668\u4e0e\u751f\u6210\u5668"},{"location":"python/#_5","text":"","title":"\u51fd\u6570"},{"location":"python/#_6","text":"","title":"\u5b9a\u4e49\u51fd\u6570"},{"location":"python/#_7","text":"","title":"\u51fd\u6570\u8c03\u7528"},{"location":"python/#_8","text":"","title":"\u53c2\u6570\u4f20\u9012"},{"location":"python/#_9","text":"","title":"\u533f\u540d\u51fd\u6570"},{"location":"python/#_10","text":"","title":"\u9519\u8bef\u548c\u5f02\u5e38"},{"location":"python/#_11","text":"","title":"\u9762\u5411\u5bf9\u8c61"},{"location":"python/#_12","text":"","title":"\u547d\u540d\u7a7a\u95f4"},{"location":"sql/","text":"SQL \u8bed\u6cd5 \u00b6 SELECT - \u4ece\u6570\u636e\u5e93\u4e2d\u63d0\u53d6\u6570\u636e UPDATE - \u66f4\u65b0\u6570\u636e\u5e93\u4e2d\u7684\u6570\u636e DELETE - \u4ece\u6570\u636e\u5e93\u4e2d\u5220\u9664\u6570\u636e INSERT INTO - \u5411\u6570\u636e\u5e93\u4e2d\u63d2\u5165\u65b0\u6570\u636e CREATE DATABASE - \u521b\u5efa\u65b0\u6570\u636e\u5e93 ALTER DATABASE - \u4fee\u6539\u6570\u636e\u5e93 CREATE TABLE - \u521b\u5efa\u65b0\u8868 ALTER TABLE - \u53d8\u66f4\u6570\u636e\u5e93\u8868 DROP TABLE - \u5220\u9664\u8868 CREATE INDEX - \u521b\u5efa\u7d22\u5f15 DROP INDEX - \u5220\u9664\u7d22\u5f15","title":"02. SQL"},{"location":"sql/#sql","text":"SELECT - \u4ece\u6570\u636e\u5e93\u4e2d\u63d0\u53d6\u6570\u636e UPDATE - \u66f4\u65b0\u6570\u636e\u5e93\u4e2d\u7684\u6570\u636e DELETE - \u4ece\u6570\u636e\u5e93\u4e2d\u5220\u9664\u6570\u636e INSERT INTO - \u5411\u6570\u636e\u5e93\u4e2d\u63d2\u5165\u65b0\u6570\u636e CREATE DATABASE - \u521b\u5efa\u65b0\u6570\u636e\u5e93 ALTER DATABASE - \u4fee\u6539\u6570\u636e\u5e93 CREATE TABLE - \u521b\u5efa\u65b0\u8868 ALTER TABLE - \u53d8\u66f4\u6570\u636e\u5e93\u8868 DROP TABLE - \u5220\u9664\u8868 CREATE INDEX - \u521b\u5efa\u7d22\u5f15 DROP INDEX - \u5220\u9664\u7d22\u5f15","title":"SQL \u8bed\u6cd5"}]}