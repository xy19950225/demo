{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u524d\u8a00 \u672c\u6587\u8bb0\u5f55\u603b\u7ed3\u4e2a\u4eba\u5b66\u4e60\u8fc7\u7a0b\uff08\u5b66\u4e60\u8def\u7ebf\uff0c\u5543\u4e66\u7b14\u8bb0\uff0c\u9879\u76ee\u5b9e\u8df5\uff09\uff0c\u4e0d\u5b9a\u65f6\u66f4\u65b0\uff0c\u4ec5\u4f9b\u53c2\u8003 \u5b66\u4e60\u80cc\u666f\uff1a2020\u5e742\u6708\u4efd\u79bb\u804c\uff0c\u540c\u5e745\u6708\u5230\u8fbe\u5317\u4eac\uff0c\u540c\u5e747\u6708\u5f00\u59cb\u5b66\u4e60\uff0c\u4e2d\u95f4\u8d70\u8fc7\u4e0d\u5c11\u5f2f\u8def\uff0c\u5b66\u524d\u96f6\u57fa\u7840\uff0c\u53ea\u719f\u6089Excel\uff0c\u4e86\u89e3\u4e00\u70b9VBA \u5b66\u4e60\u611f\u609f\uff1a\u4e00\u4e2a\u4eba\u53ef\u4ee5\u8d70\u7684\u5f88\u5feb\uff0c\u4e00\u7fa4\u4eba\u53ef\u4ee5\u8d70\u7684\u66f4\u8fdc\uff08\u627e\u5230\u4e00\u7fa4\u5fd7\u540c\u9053\u5408\u7684\u670b\u53cb\u4e00\u8d77\u8ba8\u8bba\u95ee\u9898\uff0c\u5439\u6c34\u804a\u5929\uff09 \u5b66\u4e60\u539f\u5219\uff1a\u4ea4\u53c9\u4e92\u8865\uff0c\u6b7b\u78d5\u5230\u5e95\uff0c\u5584\u4e8e\u63d0\u95ee\uff0c\u4e0d\u65ad\u7ec3\u4e60 \u5b66\u4e60\u76ee\u6807\uff1a\u5728\u8ba1\u5212\u5185\u638c\u63e1SQL\uff0cPython\uff0cML\uff0c\u671f\u671b\u627e\u5230\u4e00\u4efd\u6570\u636e\u5206\u6790\u65b9\u5411\u7684\u5de5\u4f5c \u5b66\u4e60\u89c4\u5212\uff1a\u77ed\u671f\u76ee\u6807\u662f\u6570\u636e\u5206\u6790\uff0c\u957f\u671f\u76ee\u6807\u662f\u673a\u5668\u5b66\u4e60\u7b97\u6cd5 \u5b66\u4e60\u5efa\u8bae Make English as your working language. \uff08\u8ba9\u82f1\u8bed\u6210\u4e3a\u4f60\u7684\u5de5\u4f5c\u8bed\u8a00\uff09 Practice makes perfect. \uff08\u719f\u80fd\u751f\u5de7\uff09 All experience comes from mistakes. \uff08\u6240\u6709\u7684\u7ecf\u9a8c\u90fd\u6e90\u4e8e\u4f60\u72af\u8fc7\u7684\u9519\u8bef\uff09 Don't be one of the leeches. \uff08\u4e0d\u8981\u5f53\u4f38\u624b\u515a\uff09 Either outstanding or out. \uff08\u8981\u4e48\u51fa\u4f17\uff0c\u8981\u4e48\u51fa\u5c40\uff09 \u5b66\u4e60\u5185\u5bb9 SQL Python ML \u5f00\u53d1\u73af\u5883 SQL\u5f00\u53d1\u73af\u5883 MySQL Community Edition Python\u5f00\u53d1\u73af\u5883 Anaconda \u63a8\u8350\u7f51\u7ad9 Google \u8fd9\u4e2a\u5927\u5bb6\u90fd\u77e5\u9053\u5c31\u4e0d\u7528\u4ecb\u7ecd\u4e86\uff0c\u56fd\u5185\u65e0\u6cd5\u8bbf\u95ee\u9700\u7ffb\u5899 Github \u5168\u7403\u6700\u5927\u7684\u7a0b\u5e8f\u5458\u4ee3\u7801\u6258\u7ba1\u5e73\u53f0\u548c\u5f00\u6e90\u793e\u533a\uff0c\u6709\u5f88\u591a\u4f18\u8d28\u7684\u5f00\u6e90\u9879\u76ee \uff08\u4fd7\u79f0\uff1a\u5168\u7403\u6700\u5927\u540c\u6027\u4ea4\u53cb\u7f51\u7ad9\uff09 Stack Overflow IT\u6280\u672f\u95ee\u7b54\u7f51\u7ad9\uff0c\u80fd\u89e3\u51b3\u4f60\u5728coding\u4e2d99%\u7684\u95ee\u9898 Kaggle \u5168\u7403\u77e5\u540d\u7684\u6570\u636e\u5efa\u6a21\u548c\u6570\u636e\u5206\u6790\u7ade\u8d5b\u5e73\u53f0 \uff08\u5410\u69fd\uff1aKaggle Titanic \u751f\u5b58\u9884\u6d4b\u7b49\u8bf8\u591a\u7f51\u7ea2\u7ea7\u9879\u76ee\u5df2\u7ecf\u88ab\u5199\u70c2\u4e86\uff09 B\u7ad9 \u56fd\u5185\u77e5\u540d\u7684\u5728\u7ebf\u89c6\u9891\u7f51\u7ad9\uff0c\u5b66\u4e60\u89c6\u9891\u8d44\u6e90\u975e\u5e38\u4e30\u5bcc\uff0c\u5efa\u8bae\u914d\u5408\u4e66\u7c4d\u5b66\u4e60 \uff08\u4fd7\u79f0\uff1aB\u7ad9\u5927\u5b66\uff09 \u83dc\u9e1f\u6559\u7a0b \u56fd\u5185\u6280\u672f\u6559\u7a0b\u7f51\u7ad9\uff0c\u8d28\u91cf\u89c1\u4ec1\u89c1\u667a\uff0c\u6bd4\u8f83\u9002\u5408\u65b0\u624b\u5165\u95e8\u548c\u540e\u671f\u67e5\u9605\uff0c\u65b0\u624b\u5b66\u4e60\u5efa\u8bae\u914d\u5408\u5176\u4ed6\u6559\u7a0b \uff08\u5410\u69fd\uff1a\u7f51\u7ad9\u540d\u83ab\u4e0d\u662f\u5728\u9488\u5bf9\u6211\uff1f\uff09","title":"01. Introduction"},{"location":"#_1","text":"\u672c\u6587\u8bb0\u5f55\u603b\u7ed3\u4e2a\u4eba\u5b66\u4e60\u8fc7\u7a0b\uff08\u5b66\u4e60\u8def\u7ebf\uff0c\u5543\u4e66\u7b14\u8bb0\uff0c\u9879\u76ee\u5b9e\u8df5\uff09\uff0c\u4e0d\u5b9a\u65f6\u66f4\u65b0\uff0c\u4ec5\u4f9b\u53c2\u8003 \u5b66\u4e60\u80cc\u666f\uff1a2020\u5e742\u6708\u4efd\u79bb\u804c\uff0c\u540c\u5e745\u6708\u5230\u8fbe\u5317\u4eac\uff0c\u540c\u5e747\u6708\u5f00\u59cb\u5b66\u4e60\uff0c\u4e2d\u95f4\u8d70\u8fc7\u4e0d\u5c11\u5f2f\u8def\uff0c\u5b66\u524d\u96f6\u57fa\u7840\uff0c\u53ea\u719f\u6089Excel\uff0c\u4e86\u89e3\u4e00\u70b9VBA \u5b66\u4e60\u611f\u609f\uff1a\u4e00\u4e2a\u4eba\u53ef\u4ee5\u8d70\u7684\u5f88\u5feb\uff0c\u4e00\u7fa4\u4eba\u53ef\u4ee5\u8d70\u7684\u66f4\u8fdc\uff08\u627e\u5230\u4e00\u7fa4\u5fd7\u540c\u9053\u5408\u7684\u670b\u53cb\u4e00\u8d77\u8ba8\u8bba\u95ee\u9898\uff0c\u5439\u6c34\u804a\u5929\uff09 \u5b66\u4e60\u539f\u5219\uff1a\u4ea4\u53c9\u4e92\u8865\uff0c\u6b7b\u78d5\u5230\u5e95\uff0c\u5584\u4e8e\u63d0\u95ee\uff0c\u4e0d\u65ad\u7ec3\u4e60 \u5b66\u4e60\u76ee\u6807\uff1a\u5728\u8ba1\u5212\u5185\u638c\u63e1SQL\uff0cPython\uff0cML\uff0c\u671f\u671b\u627e\u5230\u4e00\u4efd\u6570\u636e\u5206\u6790\u65b9\u5411\u7684\u5de5\u4f5c \u5b66\u4e60\u89c4\u5212\uff1a\u77ed\u671f\u76ee\u6807\u662f\u6570\u636e\u5206\u6790\uff0c\u957f\u671f\u76ee\u6807\u662f\u673a\u5668\u5b66\u4e60\u7b97\u6cd5","title":"\u524d\u8a00"},{"location":"#_2","text":"Make English as your working language. \uff08\u8ba9\u82f1\u8bed\u6210\u4e3a\u4f60\u7684\u5de5\u4f5c\u8bed\u8a00\uff09 Practice makes perfect. \uff08\u719f\u80fd\u751f\u5de7\uff09 All experience comes from mistakes. \uff08\u6240\u6709\u7684\u7ecf\u9a8c\u90fd\u6e90\u4e8e\u4f60\u72af\u8fc7\u7684\u9519\u8bef\uff09 Don't be one of the leeches. \uff08\u4e0d\u8981\u5f53\u4f38\u624b\u515a\uff09 Either outstanding or out. \uff08\u8981\u4e48\u51fa\u4f17\uff0c\u8981\u4e48\u51fa\u5c40\uff09","title":"\u5b66\u4e60\u5efa\u8bae"},{"location":"#_3","text":"SQL Python ML","title":"\u5b66\u4e60\u5185\u5bb9"},{"location":"#_4","text":"","title":"\u5f00\u53d1\u73af\u5883"},{"location":"#sql","text":"MySQL Community Edition","title":"SQL\u5f00\u53d1\u73af\u5883"},{"location":"#python","text":"Anaconda","title":"Python\u5f00\u53d1\u73af\u5883"},{"location":"#_5","text":"Google \u8fd9\u4e2a\u5927\u5bb6\u90fd\u77e5\u9053\u5c31\u4e0d\u7528\u4ecb\u7ecd\u4e86\uff0c\u56fd\u5185\u65e0\u6cd5\u8bbf\u95ee\u9700\u7ffb\u5899 Github \u5168\u7403\u6700\u5927\u7684\u7a0b\u5e8f\u5458\u4ee3\u7801\u6258\u7ba1\u5e73\u53f0\u548c\u5f00\u6e90\u793e\u533a\uff0c\u6709\u5f88\u591a\u4f18\u8d28\u7684\u5f00\u6e90\u9879\u76ee \uff08\u4fd7\u79f0\uff1a\u5168\u7403\u6700\u5927\u540c\u6027\u4ea4\u53cb\u7f51\u7ad9\uff09 Stack Overflow IT\u6280\u672f\u95ee\u7b54\u7f51\u7ad9\uff0c\u80fd\u89e3\u51b3\u4f60\u5728coding\u4e2d99%\u7684\u95ee\u9898 Kaggle \u5168\u7403\u77e5\u540d\u7684\u6570\u636e\u5efa\u6a21\u548c\u6570\u636e\u5206\u6790\u7ade\u8d5b\u5e73\u53f0 \uff08\u5410\u69fd\uff1aKaggle Titanic \u751f\u5b58\u9884\u6d4b\u7b49\u8bf8\u591a\u7f51\u7ea2\u7ea7\u9879\u76ee\u5df2\u7ecf\u88ab\u5199\u70c2\u4e86\uff09 B\u7ad9 \u56fd\u5185\u77e5\u540d\u7684\u5728\u7ebf\u89c6\u9891\u7f51\u7ad9\uff0c\u5b66\u4e60\u89c6\u9891\u8d44\u6e90\u975e\u5e38\u4e30\u5bcc\uff0c\u5efa\u8bae\u914d\u5408\u4e66\u7c4d\u5b66\u4e60 \uff08\u4fd7\u79f0\uff1aB\u7ad9\u5927\u5b66\uff09 \u83dc\u9e1f\u6559\u7a0b \u56fd\u5185\u6280\u672f\u6559\u7a0b\u7f51\u7ad9\uff0c\u8d28\u91cf\u89c1\u4ec1\u89c1\u667a\uff0c\u6bd4\u8f83\u9002\u5408\u65b0\u624b\u5165\u95e8\u548c\u540e\u671f\u67e5\u9605\uff0c\u65b0\u624b\u5b66\u4e60\u5efa\u8bae\u914d\u5408\u5176\u4ed6\u6559\u7a0b \uff08\u5410\u69fd\uff1a\u7f51\u7ad9\u540d\u83ab\u4e0d\u662f\u5728\u9488\u5bf9\u6211\uff1f\uff09","title":"\u63a8\u8350\u7f51\u7ad9"},{"location":"ML%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/","text":"\u524d\u7f6e\u77e5\u8bc6 \u7f16\u7a0b\u57fa\u7840 Python \u7f16\u7a0b\u7ecf\u9a8c\uff0c\u6bd4\u8f83\u719f\u6089 Python \u7684\u4e3b\u8981\u79d1\u5b66\u5e93\uff0c\u7279\u522b\u662f NumPy\uff0cPandas \u548c Matplotlib \u6570\u5b66\u57fa\u7840 \u5fae\u79ef\u5206\uff0c\u7ebf\u6027\u4ee3\u6570\uff0c\u6982\u7387\u548c\u7edf\u8ba1\u5b66 \u63a8\u8350\u56fe\u4e66 \u7406\u8bba \u673a\u5668\u5b66\u4e60\uff08\u897f\u74dc\u4e66\uff09 - \u5468\u5fd7\u534e \u7edf\u8ba1\u5b66\u4e60\u65b9\u6cd5 - \u674e\u822a \u5b9e\u8df5 Hands-on Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition - Aurelien Geron \u63a8\u8350\u89c6\u9891 Coursera Andrew Ng\uff08\u5434\u6069\u8fbe\uff09 ML \u8bfe\u7a0b B\u7ad9 UP\u4e3b\u516c\u8def\u8f66666 \u5fae\u79ef\u5206\u7684\u672c\u8d28 UP\u4e3b3Blue1Brown MIT \u7ebf\u6027\u4ee3\u6570 UP\u4e3b\u81f4\u656c\u5927\u795e \u673a\u5668\u5b66\u4e60\u897f\u74dc\u4e66\u767d\u8bdd\u89e3\u8bfb UP\u4e3b\u81f4\u656c\u5927\u795e \u673a\u5668\u5b66\u4e60\u5b9e\u6218_Sklearn_TensorFlow2.0 GitHub \u9879\u76ee \u897f\u74dc\u4e66\u516c\u5f0f\u63a8\u5bfc \u5357\u74dc\u4e66 Scikit-Learn \u6559\u7a0b scikit-learn\u5b98\u65b9\u6587\u6863 \u9879\u76ee\u5b9e\u6218 kaggle","title":"4.1 ML\u5b66\u4e60\u8def\u7ebf"},{"location":"ML%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/#_1","text":"","title":"\u524d\u7f6e\u77e5\u8bc6"},{"location":"ML%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/#_2","text":"Python \u7f16\u7a0b\u7ecf\u9a8c\uff0c\u6bd4\u8f83\u719f\u6089 Python \u7684\u4e3b\u8981\u79d1\u5b66\u5e93\uff0c\u7279\u522b\u662f NumPy\uff0cPandas \u548c Matplotlib","title":"\u7f16\u7a0b\u57fa\u7840"},{"location":"ML%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/#_3","text":"\u5fae\u79ef\u5206\uff0c\u7ebf\u6027\u4ee3\u6570\uff0c\u6982\u7387\u548c\u7edf\u8ba1\u5b66","title":"\u6570\u5b66\u57fa\u7840"},{"location":"ML%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/#_4","text":"","title":"\u63a8\u8350\u56fe\u4e66"},{"location":"ML%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/#_5","text":"\u673a\u5668\u5b66\u4e60\uff08\u897f\u74dc\u4e66\uff09 - \u5468\u5fd7\u534e \u7edf\u8ba1\u5b66\u4e60\u65b9\u6cd5 - \u674e\u822a","title":"\u7406\u8bba"},{"location":"ML%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/#_6","text":"Hands-on Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition - Aurelien Geron","title":"\u5b9e\u8df5"},{"location":"ML%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/#_7","text":"","title":"\u63a8\u8350\u89c6\u9891"},{"location":"ML%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/#coursera","text":"Andrew Ng\uff08\u5434\u6069\u8fbe\uff09 ML \u8bfe\u7a0b","title":"Coursera"},{"location":"ML%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/#b","text":"UP\u4e3b\u516c\u8def\u8f66666 \u5fae\u79ef\u5206\u7684\u672c\u8d28 UP\u4e3b3Blue1Brown MIT \u7ebf\u6027\u4ee3\u6570 UP\u4e3b\u81f4\u656c\u5927\u795e \u673a\u5668\u5b66\u4e60\u897f\u74dc\u4e66\u767d\u8bdd\u89e3\u8bfb UP\u4e3b\u81f4\u656c\u5927\u795e \u673a\u5668\u5b66\u4e60\u5b9e\u6218_Sklearn_TensorFlow2.0","title":"B\u7ad9"},{"location":"ML%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/#github","text":"\u897f\u74dc\u4e66\u516c\u5f0f\u63a8\u5bfc \u5357\u74dc\u4e66","title":"GitHub \u9879\u76ee"},{"location":"ML%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/#scikit-learn","text":"scikit-learn\u5b98\u65b9\u6587\u6863","title":"Scikit-Learn \u6559\u7a0b"},{"location":"ML%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/#_8","text":"kaggle","title":"\u9879\u76ee\u5b9e\u6218"},{"location":"NumPy_Basics/","text":"NumPy \u901f\u67e5\u8868 NumPy\u7684ndarray\uff1a\u4e00\u79cd\u591a\u7ef4\u6570\u7ec4\u5bf9\u8c61 NumPy\u6700\u91cd\u8981\u7684\u4e00\u4e2a\u7279\u70b9\u5c31\u662f\u5176N\u7ef4\u6570\u7ec4\u5bf9\u8c61\uff08\u5373ndarray\uff09\uff0c\u8be5\u5bf9\u8c61\u662f\u4e00\u4e2a\u5feb\u901f\u800c\u7075\u6d3b\u7684\u5927\u6570\u636e\u96c6\u5bb9\u5668 In [12]: import numpy as np # Generate some random data In [13]: data = np.random.randn(2, 3) In [14]: data Out[14]: array([[-0.2047, 0.4789, -0.5194], [-0.5557, 1.9658, 1.3934]]) \u8fdb\u884c\u6570\u5b66\u8fd0\u7b97 In [15]: data * 10 Out[15]: array([[ -2.0471, 4.7894, -5.1944], [ -5.5573, 19.6578, 13.9341]]) In [16]: data + data Out[16]: array([[-0.4094, 0.9579, -1.0389], [-1.1115, 3.9316, 2.7868]]) ndarray\u662f\u4e00\u4e2a\u901a\u7528\u7684\u540c\u6784\u6570\u636e\u591a\u7ef4\u5bb9\u5668\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5176\u4e2d\u7684\u6240\u6709\u5143\u7d20\u5fc5\u987b\u662f\u76f8\u540c\u7c7b\u578b\u7684\u3002\u6bcf\u4e2a\u6570\u7ec4\u90fd\u6709\u4e00\u4e2ashape\uff08\u4e00\u4e2a\u8868\u793a\u5404\u7ef4\u5ea6\u5927\u5c0f\u7684\u5143\u7ec4\uff09\u548c\u4e00\u4e2adtype\uff08\u4e00\u4e2a\u7528\u4e8e\u8bf4\u660e\u6570\u7ec4\u6570\u636e\u7c7b\u578b\u7684\u5bf9\u8c61\uff09\uff1a In [17]: data.shape Out[17]: (2, 3) In [18]: data.dtype Out[18]: dtype('float64') \u521b\u5efandarray \u521b\u5efa\u6570\u7ec4\u6700\u7b80\u5355\u7684\u529e\u6cd5\u5c31\u662f\u4f7f\u7528array\u51fd\u6570\u3002\u5b83\u63a5\u53d7\u4e00\u5207\u5e8f\u5217\u578b\u7684\u5bf9\u8c61\uff08\u5305\u62ec\u5176\u4ed6\u6570\u7ec4\uff09\uff0c\u7136\u540e\u4ea7\u751f\u4e00\u4e2a\u65b0\u7684\u542b\u6709\u4f20\u5165\u6570\u636e\u7684NumPy\u6570\u7ec4\u3002\u4ee5\u4e00\u4e2a\u5217\u8868\u7684\u8f6c\u6362\u4e3a\u4f8b\uff1a In [19]: data1 = [6, 7.5, 8, 0, 1] In [20]: arr1 = np.array(data1) In [21]: arr1 Out[21]: array([ 6. , 7.5, 8. , 0. , 1. ]) \u5d4c\u5957\u5e8f\u5217\uff08\u6bd4\u5982\u7531\u4e00\u7ec4\u7b49\u957f\u5217\u8868\u7ec4\u6210\u7684\u5217\u8868\uff09\u5c06\u4f1a\u88ab\u8f6c\u6362\u4e3a\u4e00\u4e2a\u591a\u7ef4\u6570\u7ec4\uff1a In [22]: data2 = [[1, 2, 3, 4], [5, 6, 7, 8]] In [23]: arr2 = np.array(data2) In [24]: arr2 Out[24]: array([[1, 2, 3, 4], [5, 6, 7, 8]]) \u56e0\u4e3adata2\u662f\u5217\u8868\u7684\u5217\u8868\uff0cNumPy\u6570\u7ec4arr2\u7684\u4e24\u4e2a\u7ef4\u5ea6\u7684shape\u662f\u4ecedata2\u5f15\u5165\u7684\u3002\u53ef\u4ee5\u7528\u5c5e\u6027ndim\u548cshape\u9a8c\u8bc1\uff1a In [25]: arr2.ndim Out[25]: 2 In [26]: arr2.shape Out[26]: (2, 4) \u9664\u975e\u7279\u522b\u8bf4\u660e\uff08\u7a0d\u540e\u5c06\u4f1a\u8be6\u7ec6\u4ecb\u7ecd\uff09\uff0cnp.array\u4f1a\u5c1d\u8bd5\u4e3a\u65b0\u5efa\u7684\u8fd9\u4e2a\u6570\u7ec4\u63a8\u65ad\u51fa\u4e00\u4e2a\u8f83\u4e3a\u5408\u9002\u7684\u6570\u636e\u7c7b\u578b\u3002\u6570\u636e\u7c7b\u578b\u4fdd\u5b58\u5728\u4e00\u4e2a\u7279\u6b8a\u7684dtype\u5bf9\u8c61\u4e2d\u3002\u6bd4\u5982\u8bf4\uff0c\u5728\u4e0a\u9762\u7684\u4e24\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u6709\uff1a In [27]: arr1.dtype Out[27]: dtype('float64') In [28]: arr2.dtype Out[28]: dtype('int64') \u9664np.array\u4e4b\u5916\uff0c\u8fd8\u6709\u4e00\u4e9b\u51fd\u6570\u4e5f\u53ef\u4ee5\u65b0\u5efa\u6570\u7ec4\u3002\u6bd4\u5982\uff0czeros\u548cones\u5206\u522b\u53ef\u4ee5\u521b\u5efa\u6307\u5b9a\u957f\u5ea6\u6216\u5f62\u72b6\u7684\u51680\u6216\u51681\u6570\u7ec4\u3002empty\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u6ca1\u6709\u4efb\u4f55\u5177\u4f53\u503c\u7684\u6570\u7ec4\u3002\u8981\u7528\u8fd9\u4e9b\u65b9\u6cd5\u521b\u5efa\u591a\u7ef4\u6570\u7ec4\uff0c\u53ea\u9700\u4f20\u5165\u4e00\u4e2a\u8868\u793a\u5f62\u72b6\u7684\u5143\u7ec4\u5373\u53ef\uff1a In [29]: np.zeros(10) Out[29]: array([ 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]) In [30]: np.zeros((3, 6)) Out[30]: array([[ 0., 0., 0., 0., 0., 0.], [ 0., 0., 0., 0., 0., 0.], [ 0., 0., 0., 0., 0., 0.]]) In [31]: np.empty((2, 3, 2)) Out[31]: array([[[ 0., 0.], [ 0., 0.], [ 0., 0.]], [[ 0., 0.], [ 0., 0.], [ 0., 0.]]]) \u6ce8\u610f\uff1a\u8ba4\u4e3anp.empty\u4f1a\u8fd4\u56de\u51680\u6570\u7ec4\u7684\u60f3\u6cd5\u662f\u4e0d\u5b89\u5168\u7684\u3002\u5f88\u591a\u60c5\u51b5\u4e0b\uff08\u5982\u524d\u6240\u793a\uff09\uff0c\u5b83\u8fd4\u56de\u7684\u90fd\u662f\u4e00\u4e9b\u672a\u521d\u59cb\u5316\u7684\u5783\u573e\u503c\u3002 arange\u662fPython\u5185\u7f6e\u51fd\u6570range\u7684\u6570\u7ec4\u7248\uff1a In [32]: np.arange(15) Out[32]: array([ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) \u88684-1\u5217\u51fa\u4e86\u4e00\u4e9b\u6570\u7ec4\u521b\u5efa\u51fd\u6570\u3002\u7531\u4e8eNumPy\u5173\u6ce8\u7684\u662f\u6570\u503c\u8ba1\u7b97\uff0c\u56e0\u6b64\uff0c\u5982\u679c\u6ca1\u6709\u7279\u522b\u6307\u5b9a\uff0c\u6570\u636e\u7c7b\u578b\u57fa\u672c\u90fd\u662ffloat64\uff08\u6d6e\u70b9\u6570\uff09\u3002 ndarray\u7684\u6570\u636e\u7c7b\u578b dtype\uff08\u6570\u636e\u7c7b\u578b\uff09\u662f\u4e00\u4e2a\u7279\u6b8a\u7684\u5bf9\u8c61\uff0c\u5b83\u542b\u6709ndarray\u5c06\u4e00\u5757\u5185\u5b58\u89e3\u91ca\u4e3a\u7279\u5b9a\u6570\u636e\u7c7b\u578b\u6240\u9700\u7684\u4fe1\u606f\uff1a In [33]: arr1 = np.array([1, 2, 3], dtype=np.float64) In [34]: arr2 = np.array([1, 2, 3], dtype=np.int32) In [35]: arr1.dtype Out[35]: dtype('float64') In [36]: arr2.dtype Out[36]: dtype('int32') dtype\u662fNumPy\u7075\u6d3b\u4ea4\u4e92\u5176\u5b83\u7cfb\u7edf\u7684\u6e90\u6cc9\u4e4b\u4e00\u3002\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u5b83\u4eec\u76f4\u63a5\u6620\u5c04\u5230\u76f8\u5e94\u7684\u673a\u5668\u8868\u793a\uff0c\u8fd9\u4f7f\u5f97\u201c\u8bfb\u5199\u78c1\u76d8\u4e0a\u7684\u4e8c\u8fdb\u5236\u6570\u636e\u6d41\u201d\u4ee5\u53ca\u201c\u96c6\u6210\u4f4e\u7ea7\u8bed\u8a00\u4ee3\u7801\uff08\u5982C\u3001Fortran\uff09\u201d\u7b49\u5de5\u4f5c\u53d8\u5f97\u66f4\u52a0\u7b80\u5355\u3002\u6570\u503c\u578bdtype\u7684\u547d\u540d\u65b9\u5f0f\u76f8\u540c\uff1a\u4e00\u4e2a\u7c7b\u578b\u540d\uff08\u5982float\u6216int\uff09\uff0c\u540e\u9762\u8ddf\u4e00\u4e2a\u7528\u4e8e\u8868\u793a\u5404\u5143\u7d20\u4f4d\u957f\u7684\u6570\u5b57\u3002\u6807\u51c6\u7684\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u503c\uff08\u5373Python\u4e2d\u7684float\u5bf9\u8c61\uff09\u9700\u8981\u5360\u75288\u5b57\u8282\uff08\u537364\u4f4d\uff09\u3002\u56e0\u6b64\uff0c\u8be5\u7c7b\u578b\u5728NumPy\u4e2d\u5c31\u8bb0\u4f5cfloat64\u3002\u88684-2\u5217\u51fa\u4e86NumPy\u6240\u652f\u6301\u7684\u5168\u90e8\u6570\u636e\u7c7b\u578b\u3002 \u7b14\u8bb0\uff1a\u8bb0\u4e0d\u4f4f\u8fd9\u4e9bNumPy\u7684dtype\u4e5f\u6ca1\u5173\u7cfb\uff0c\u65b0\u624b\u66f4\u662f\u5982\u6b64\u3002\u901a\u5e38\u53ea\u9700\u8981\u77e5\u9053\u4f60\u6240\u5904\u7406\u7684\u6570\u636e\u7684\u5927\u81f4\u7c7b\u578b\u662f\u6d6e\u70b9\u6570\u3001\u590d\u6570\u3001\u6574\u6570\u3001\u5e03\u5c14\u503c\u3001\u5b57\u7b26\u4e32\uff0c\u8fd8\u662f\u666e\u901a\u7684Python\u5bf9\u8c61\u5373\u53ef\u3002\u5f53\u4f60\u9700\u8981\u63a7\u5236\u6570\u636e\u5728\u5185\u5b58\u548c\u78c1\u76d8\u4e2d\u7684\u5b58\u50a8\u65b9\u5f0f\u65f6\uff08\u5c24\u5176\u662f\u5bf9\u5927\u6570\u636e\u96c6\uff09\uff0c\u90a3\u5c31\u5f97\u4e86\u89e3\u5982\u4f55\u63a7\u5236\u5b58\u50a8\u7c7b\u578b\u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7ndarray\u7684astype\u65b9\u6cd5\u660e\u786e\u5730\u5c06\u4e00\u4e2a\u6570\u7ec4\u4ece\u4e00\u4e2adtype\u8f6c\u6362\u6210\u53e6\u4e00\u4e2adtype\uff1a In [37]: arr = np.array([1, 2, 3, 4, 5]) In [38]: arr.dtype Out[38]: dtype('int64') In [39]: float_arr = arr.astype(np.float64) In [40]: float_arr.dtype Out[40]: dtype('float64') \u5728\u672c\u4f8b\u4e2d\uff0c\u6574\u6570\u88ab\u8f6c\u6362\u6210\u4e86\u6d6e\u70b9\u6570\u3002\u5982\u679c\u5c06\u6d6e\u70b9\u6570\u8f6c\u6362\u6210\u6574\u6570\uff0c\u5219\u5c0f\u6570\u90e8\u5206\u5c06\u4f1a\u88ab\u622a\u53d6\u5220\u9664\uff1a In [41]: arr = np.array([3.7, -1.2, -2.6, 0.5, 12.9, 10.1]) In [42]: arr Out[42]: array([ 3.7, -1.2, -2.6, 0.5, 12.9, 10.1]) In [43]: arr.astype(np.int32) Out[43]: array([ 3, -1, -2, 0, 12, 10], dtype=int32) \u5982\u679c\u67d0\u5b57\u7b26\u4e32\u6570\u7ec4\u8868\u793a\u7684\u5168\u662f\u6570\u5b57\uff0c\u4e5f\u53ef\u4ee5\u7528astype\u5c06\u5176\u8f6c\u6362\u4e3a\u6570\u503c\u5f62\u5f0f\uff1a In [44]: numeric_strings = np.array(['1.25', '-9.6', '42'], dtype=np.string_) In [45]: numeric_strings.astype(float) Out[45]: array([ 1.25, -9.6 , 42. ]) \u6ce8\u610f\uff1a\u4f7f\u7528numpy.string_\u7c7b\u578b\u65f6\uff0c\u4e00\u5b9a\u8981\u5c0f\u5fc3\uff0c\u56e0\u4e3aNumPy\u7684\u5b57\u7b26\u4e32\u6570\u636e\u662f\u5927\u5c0f\u56fa\u5b9a\u7684\uff0c\u53d1\u751f\u622a\u53d6\u65f6\uff0c\u4e0d\u4f1a\u53d1\u51fa\u8b66\u544a\u3002pandas\u63d0\u4f9b\u4e86\u66f4\u591a\u975e\u6570\u503c\u6570\u636e\u7684\u4fbf\u5229\u7684\u5904\u7406\u65b9\u6cd5\u3002 \u5982\u679c\u8f6c\u6362\u8fc7\u7a0b\u56e0\u4e3a\u67d0\u79cd\u539f\u56e0\u800c\u5931\u8d25\u4e86\uff08\u6bd4\u5982\u67d0\u4e2a\u4e0d\u80fd\u88ab\u8f6c\u6362\u4e3afloat64\u7684\u5b57\u7b26\u4e32\uff09\uff0c\u5c31\u4f1a\u5f15\u53d1\u4e00\u4e2aValueError\u3002\u8fd9\u91cc\uff0c\u6211\u6bd4\u8f83\u61d2\uff0c\u5199\u7684\u662ffloat\u800c\u4e0d\u662fnp.float64\uff1bNumPy\u5f88\u806a\u660e\uff0c\u5b83\u4f1a\u5c06Python\u7c7b\u578b\u6620\u5c04\u5230\u7b49\u4ef7\u7684dtype\u4e0a\u3002 \u6570\u7ec4\u7684dtype\u8fd8\u6709\u53e6\u4e00\u4e2a\u5c5e\u6027\uff1a In [46]: int_array = np.arange(10) In [47]: calibers = np.array([.22, .270, .357, .380, .44, .50], dtype=np.float64) In [48]: int_array.astype(calibers.dtype) Out[48]: array([ 0., 1., 2., 3., 4., 5., 6., 7., 8., 9.]) \u4f60\u8fd8\u53ef\u4ee5\u7528\u7b80\u6d01\u7684\u7c7b\u578b\u4ee3\u7801\u6765\u8868\u793adtype\uff1a In [49]: empty_uint32 = np.empty(8, dtype='u4') In [50]: empty_uint32 Out[50]: array([ 0, 1075314688, 0, 1075707904, 0, 1075838976, 0, 1072693248], dtype=uint32) \u7b14\u8bb0\uff1a\u8c03\u7528astype\u603b\u4f1a\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u6570\u7ec4\uff08\u4e00\u4e2a\u6570\u636e\u7684\u5907\u4efd\uff09\uff0c\u5373\u4f7f\u65b0\u7684dtype\u4e0e\u65e7\u7684dtype\u76f8\u540c\u3002 NumPy\u6570\u7ec4\u7684\u8fd0\u7b97 \u6570\u7ec4\u5f88\u91cd\u8981\uff0c\u56e0\u4e3a\u5b83\u4f7f\u4f60\u4e0d\u7528\u7f16\u5199\u5faa\u73af\u5373\u53ef\u5bf9\u6570\u636e\u6267\u884c\u6279\u91cf\u8fd0\u7b97\u3002NumPy\u7528\u6237\u79f0\u5176\u4e3a\u77e2\u91cf\u5316\uff08vectorization\uff09\u3002\u5927\u5c0f\u76f8\u7b49\u7684\u6570\u7ec4\u4e4b\u95f4\u7684\u4efb\u4f55\u7b97\u672f\u8fd0\u7b97\u90fd\u4f1a\u5c06\u8fd0\u7b97\u5e94\u7528\u5230\u5143\u7d20\u7ea7\uff1a In [51]: arr = np.array([[1., 2., 3.], [4., 5., 6.]]) In [52]: arr Out[52]: array([[ 1., 2., 3.], [ 4., 5., 6.]]) In [53]: arr * arr Out[53]: array([[ 1., 4., 9.], [ 16., 25., 36.]]) In [54]: arr - arr Out[54]: array([[ 0., 0., 0.], [ 0., 0., 0.]]) \u6570\u7ec4\u4e0e\u6807\u91cf\u7684\u7b97\u672f\u8fd0\u7b97\u4f1a\u5c06\u6807\u91cf\u503c\u4f20\u64ad\u5230\u5404\u4e2a\u5143\u7d20\uff1a In [55]: 1 / arr Out[55]: array([[ 1. , 0.5 , 0.3333], [ 0.25 , 0.2 , 0.1667]]) In [56]: arr ** 0.5 Out[56]: array([[ 1. , 1.4142, 1.7321], [ 2. , 2.2361, 2.4495]]) \u5927\u5c0f\u76f8\u540c\u7684\u6570\u7ec4\u4e4b\u95f4\u7684\u6bd4\u8f83\u4f1a\u751f\u6210\u5e03\u5c14\u503c\u6570\u7ec4\uff1a In [57]: arr2 = np.array([[0., 4., 1.], [7., 2., 12.]]) In [58]: arr2 Out[58]: array([[ 0., 4., 1.], [ 7., 2., 12.]]) In [59]: arr2 > arr Out[59]: array([[False, True, False], [ True, False, True]], dtype=bool) \u4e0d\u540c\u5927\u5c0f\u7684\u6570\u7ec4\u4e4b\u95f4\u7684\u8fd0\u7b97\u53eb\u505a\u5e7f\u64ad\uff08broadcasting\uff09\uff0c\u5c06\u5728\u9644\u5f55A\u4e2d\u5bf9\u5176\u8fdb\u884c\u8be6\u7ec6\u8ba8\u8bba\u3002\u672c\u4e66\u7684\u5185\u5bb9\u4e0d\u9700\u8981\u5bf9\u5e7f\u64ad\u673a\u5236\u6709\u591a\u6df1\u7684\u7406\u89e3\u3002 \u57fa\u672c\u7684\u7d22\u5f15\u548c\u5207\u7247 NumPy\u6570\u7ec4\u7684\u7d22\u5f15\u662f\u4e00\u4e2a\u5185\u5bb9\u4e30\u5bcc\u7684\u4e3b\u9898\uff0c\u56e0\u4e3a\u9009\u53d6\u6570\u636e\u5b50\u96c6\u6216\u5355\u4e2a\u5143\u7d20\u7684\u65b9\u5f0f\u6709\u5f88\u591a\u3002\u4e00\u7ef4\u6570\u7ec4\u5f88\u7b80\u5355\u3002\u4ece\u8868\u9762\u4e0a\u770b\uff0c\u5b83\u4eec\u8ddfPython\u5217\u8868\u7684\u529f\u80fd\u5dee\u4e0d\u591a\uff1a In [60]: arr = np.arange(10) In [61]: arr Out[61]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) In [62]: arr[5] Out[62]: 5 In [63]: arr[5:8] Out[63]: array([5, 6, 7]) In [64]: arr[5:8] = 12 In [65]: arr Out[65]: array([ 0, 1, 2, 3, 4, 12, 12, 12, 8, 9]) \u5982\u4e0a\u6240\u793a\uff0c\u5f53\u4f60\u5c06\u4e00\u4e2a\u6807\u91cf\u503c\u8d4b\u503c\u7ed9\u4e00\u4e2a\u5207\u7247\u65f6\uff08\u5982arr[5:8]=12\uff09\uff0c\u8be5\u503c\u4f1a\u81ea\u52a8\u4f20\u64ad\uff08\u4e5f\u5c31\u8bf4\u540e\u9762\u5c06\u4f1a\u8bb2\u5230\u7684\u201c\u5e7f\u64ad\u201d\uff09\u5230\u6574\u4e2a\u9009\u533a\u3002\u8ddf\u5217\u8868\u6700\u91cd\u8981\u7684\u533a\u522b\u5728\u4e8e\uff0c\u6570\u7ec4\u5207\u7247\u662f\u539f\u59cb\u6570\u7ec4\u7684\u89c6\u56fe\u3002\u8fd9\u610f\u5473\u7740\u6570\u636e\u4e0d\u4f1a\u88ab\u590d\u5236\uff0c\u89c6\u56fe\u4e0a\u7684\u4efb\u4f55\u4fee\u6539\u90fd\u4f1a\u76f4\u63a5\u53cd\u6620\u5230\u6e90\u6570\u7ec4\u4e0a\u3002 \u4f5c\u4e3a\u4f8b\u5b50\uff0c\u5148\u521b\u5efa\u4e00\u4e2aarr\u7684\u5207\u7247\uff1a In [66]: arr_slice = arr[5:8] In [67]: arr_slice Out[67]: array([12, 12, 12]) \u73b0\u5728\uff0c\u5f53\u6211\u4fee\u7a3farr_slice\u4e2d\u7684\u503c\uff0c\u53d8\u52a8\u4e5f\u4f1a\u4f53\u73b0\u5728\u539f\u59cb\u6570\u7ec4arr\u4e2d\uff1a In [68]: arr_slice[1] = 12345 In [69]: arr Out[69]: array([ 0, 1, 2, 3, 4, 12, 12345, 12, 8, 9]) \u5207\u7247[ : ]\u4f1a\u7ed9\u6570\u7ec4\u4e2d\u7684\u6240\u6709\u503c\u8d4b\u503c\uff1a In [70]: arr_slice[:] = 64 In [71]: arr Out[71]: array([ 0, 1, 2, 3, 4, 64, 64, 64, 8, 9]) \u5982\u679c\u4f60\u521a\u5f00\u59cb\u63a5\u89e6NumPy\uff0c\u53ef\u80fd\u4f1a\u5bf9\u6b64\u611f\u5230\u60ca\u8bb6\uff08\u5c24\u5176\u662f\u5f53\u4f60\u66fe\u7ecf\u7528\u8fc7\u5176\u4ed6\u70ed\u8877\u4e8e\u590d\u5236\u6570\u7ec4\u6570\u636e\u7684\u7f16\u7a0b\u8bed\u8a00\uff09\u3002\u7531\u4e8eNumPy\u7684\u8bbe\u8ba1\u76ee\u7684\u662f\u5904\u7406\u5927\u6570\u636e\uff0c\u6240\u4ee5\u4f60\u53ef\u4ee5\u60f3\u8c61\u4e00\u4e0b\uff0c\u5047\u5982NumPy\u575a\u6301\u8981\u5c06\u6570\u636e\u590d\u5236\u6765\u590d\u5236\u53bb\u7684\u8bdd\u4f1a\u4ea7\u751f\u4f55\u7b49\u7684\u6027\u80fd\u548c\u5185\u5b58\u95ee\u9898\u3002 \u6ce8\u610f\uff1a\u5982\u679c\u4f60\u60f3\u8981\u5f97\u5230\u7684\u662fndarray\u5207\u7247\u7684\u4e00\u4efd\u526f\u672c\u800c\u975e\u89c6\u56fe\uff0c\u5c31\u9700\u8981\u660e\u786e\u5730\u8fdb\u884c\u590d\u5236\u64cd\u4f5c\uff0c\u4f8b\u5982 arr[5:8].copy() \u3002 \u5bf9\u4e8e\u9ad8\u7ef4\u5ea6\u6570\u7ec4\uff0c\u80fd\u505a\u7684\u4e8b\u60c5\u66f4\u591a\u3002\u5728\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u4e2d\uff0c\u5404\u7d22\u5f15\u4f4d\u7f6e\u4e0a\u7684\u5143\u7d20\u4e0d\u518d\u662f\u6807\u91cf\u800c\u662f\u4e00\u7ef4\u6570\u7ec4\uff1a In [72]: arr2d = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) In [73]: arr2d[2] Out[73]: array([7, 8, 9]) \u56e0\u6b64\uff0c\u53ef\u4ee5\u5bf9\u5404\u4e2a\u5143\u7d20\u8fdb\u884c\u9012\u5f52\u8bbf\u95ee\uff0c\u4f46\u8fd9\u6837\u9700\u8981\u505a\u7684\u4e8b\u60c5\u6709\u70b9\u591a\u3002\u4f60\u53ef\u4ee5\u4f20\u5165\u4e00\u4e2a\u4ee5\u9017\u53f7\u9694\u5f00\u7684\u7d22\u5f15\u5217\u8868\u6765\u9009\u53d6\u5355\u4e2a\u5143\u7d20\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e0b\u9762\u4e24\u79cd\u65b9\u5f0f\u662f\u7b49\u4ef7\u7684\uff1a In [74]: arr2d[0][2] Out[74]: 3 In [75]: arr2d[0, 2] Out[75]: 3 \u56fe4-1\u8bf4\u660e\u4e86\u4e8c\u7ef4\u6570\u7ec4\u7684\u7d22\u5f15\u65b9\u5f0f\u3002\u8f740\u4f5c\u4e3a\u884c\uff0c\u8f741\u4f5c\u4e3a\u5217\u3002 \u5728\u591a\u7ef4\u6570\u7ec4\u4e2d\uff0c\u5982\u679c\u7701\u7565\u4e86\u540e\u9762\u7684\u7d22\u5f15\uff0c\u5219\u8fd4\u56de\u5bf9\u8c61\u4f1a\u662f\u4e00\u4e2a\u7ef4\u5ea6\u4f4e\u4e00\u70b9\u7684ndarray\uff08\u5b83\u542b\u6709\u9ad8\u4e00\u7ea7\u7ef4\u5ea6\u4e0a\u7684\u6240\u6709\u6570\u636e\uff09\u3002\u56e0\u6b64\uff0c\u57282\u00d72\u00d73\u6570\u7ec4arr3d\u4e2d\uff1a In [76]: arr3d = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]]) In [77]: arr3d Out[77]: array([[[ 1, 2, 3], [ 4, 5, 6]], [[ 7, 8, 9], [10, 11, 12]]]) arr3d[0]\u662f\u4e00\u4e2a2\u00d73\u6570\u7ec4\uff1a In [78]: arr3d[0] Out[78]: array([[1, 2, 3], [4, 5, 6]]) \u6807\u91cf\u503c\u548c\u6570\u7ec4\u90fd\u53ef\u4ee5\u88ab\u8d4b\u503c\u7ed9arr3d[0]\uff1a In [79]: old_values = arr3d[0].copy() In [80]: arr3d[0] = 42 In [81]: arr3d Out[81]: array([[[42, 42, 42], [42, 42, 42]], [[ 7, 8, 9], [10, 11, 12]]]) In [82]: arr3d[0] = old_values In [83]: arr3d Out[83]: array([[[ 1, 2, 3], [ 4, 5, 6]], [[ 7, 8, 9], [10, 11, 12]]]) \u76f8\u4f3c\u7684\uff0carr3d[1,0]\u53ef\u4ee5\u8bbf\u95ee\u7d22\u5f15\u4ee5(1,0)\u5f00\u5934\u7684\u90a3\u4e9b\u503c\uff08\u4ee5\u4e00\u7ef4\u6570\u7ec4\u7684\u5f62\u5f0f\u8fd4\u56de\uff09\uff1a In [84]: arr3d[1, 0] Out[84]: array([7, 8, 9]) \u867d\u7136\u662f\u7528\u4e24\u6b65\u8fdb\u884c\u7d22\u5f15\u7684\uff0c\u8868\u8fbe\u5f0f\u662f\u76f8\u540c\u7684\uff1a In [85]: x = arr3d[1] In [86]: x Out[86]: array([[ 7, 8, 9], [10, 11, 12]]) In [87]: x[0] Out[87]: array([7, 8, 9]) \u6ce8\u610f\uff0c\u5728\u4e0a\u9762\u6240\u6709\u8fd9\u4e9b\u9009\u53d6\u6570\u7ec4\u5b50\u96c6\u7684\u4f8b\u5b50\u4e2d\uff0c\u8fd4\u56de\u7684\u6570\u7ec4\u90fd\u662f\u89c6\u56fe\u3002 \u5207\u7247\u7d22\u5f15 ndarray\u7684\u5207\u7247\u8bed\u6cd5\u8ddfPython\u5217\u8868\u8fd9\u6837\u7684\u4e00\u7ef4\u5bf9\u8c61\u5dee\u4e0d\u591a\uff1a In [88]: arr Out[88]: array([ 0, 1, 2, 3, 4, 64, 64, 64, 8, 9]) In [89]: arr[1:6] Out[89]: array([ 1, 2, 3, 4, 64]) \u5bf9\u4e8e\u4e4b\u524d\u7684\u4e8c\u7ef4\u6570\u7ec4arr2d\uff0c\u5176\u5207\u7247\u65b9\u5f0f\u7a0d\u663e\u4e0d\u540c\uff1a In [90]: arr2d Out[90]: array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) In [91]: arr2d[:2] Out[91]: array([[1, 2, 3], [4, 5, 6]]) \u53ef\u4ee5\u770b\u51fa\uff0c\u5b83\u662f\u6cbf\u7740\u7b2c0\u8f74\uff08\u5373\u7b2c\u4e00\u4e2a\u8f74\uff09\u5207\u7247\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5207\u7247\u662f\u6cbf\u7740\u4e00\u4e2a\u8f74\u5411\u9009\u53d6\u5143\u7d20\u7684\u3002\u8868\u8fbe\u5f0farr2d[:2]\u53ef\u4ee5\u88ab\u8ba4\u4e3a\u662f\u201c\u9009\u53d6arr2d\u7684\u524d\u4e24\u884c\u201d\u3002 \u4f60\u53ef\u4ee5\u4e00\u6b21\u4f20\u5165\u591a\u4e2a\u5207\u7247\uff0c\u5c31\u50cf\u4f20\u5165\u591a\u4e2a\u7d22\u5f15\u90a3\u6837\uff1a In [92]: arr2d[:2, 1:] Out[92]: array([[2, 3], [5, 6]]) \u50cf\u8fd9\u6837\u8fdb\u884c\u5207\u7247\u65f6\uff0c\u53ea\u80fd\u5f97\u5230\u76f8\u540c\u7ef4\u6570\u7684\u6570\u7ec4\u89c6\u56fe\u3002\u901a\u8fc7\u5c06\u6574\u6570\u7d22\u5f15\u548c\u5207\u7247\u6df7\u5408\uff0c\u53ef\u4ee5\u5f97\u5230\u4f4e\u7ef4\u5ea6\u7684\u5207\u7247\u3002 \u4f8b\u5982\uff0c\u6211\u53ef\u4ee5\u9009\u53d6\u7b2c\u4e8c\u884c\u7684\u524d\u4e24\u5217\uff1a In [93]: arr2d[1, :2] Out[93]: array([4, 5]) \u76f8\u4f3c\u7684\uff0c\u8fd8\u53ef\u4ee5\u9009\u62e9\u7b2c\u4e09\u5217\u7684\u524d\u4e24\u884c\uff1a In [94]: arr2d[:2, 2] Out[94]: array([3, 6]) \u56fe4-2\u5bf9\u6b64\u8fdb\u884c\u4e86\u8bf4\u660e\u3002\u6ce8\u610f\uff0c\u201c\u53ea\u6709\u5192\u53f7\u201d\u8868\u793a\u9009\u53d6\u6574\u4e2a\u8f74\uff0c\u56e0\u6b64\u4f60\u53ef\u4ee5\u50cf\u4e0b\u9762\u8fd9\u6837\u53ea\u5bf9\u9ad8\u7ef4\u8f74\u8fdb\u884c\u5207\u7247\uff1a In [95]: arr2d[:, :1] Out[95]: array([[1], [4], [7]]) \u81ea\u7136\uff0c\u5bf9\u5207\u7247\u8868\u8fbe\u5f0f\u7684\u8d4b\u503c\u64cd\u4f5c\u4e5f\u4f1a\u88ab\u6269\u6563\u5230\u6574\u4e2a\u9009\u533a\uff1a In [96]: arr2d[:2, 1:] = 0 In [97]: arr2d Out[97]: array([[1, 0, 0], [4, 0, 0], [7, 8, 9]]) \u5e03\u5c14\u578b\u7d22\u5f15 \u6765\u770b\u8fd9\u6837\u4e00\u4e2a\u4f8b\u5b50\uff0c\u5047\u8bbe\u6211\u4eec\u6709\u4e00\u4e2a\u7528\u4e8e\u5b58\u50a8\u6570\u636e\u7684\u6570\u7ec4\u4ee5\u53ca\u4e00\u4e2a\u5b58\u50a8\u59d3\u540d\u7684\u6570\u7ec4\uff08\u542b\u6709\u91cd\u590d\u9879\uff09\u3002\u5728\u8fd9\u91cc\uff0c\u6211\u5c06\u4f7f\u7528numpy.random\u4e2d\u7684randn\u51fd\u6570\u751f\u6210\u4e00\u4e9b\u6b63\u6001\u5206\u5e03\u7684\u968f\u673a\u6570\u636e\uff1a In [98]: names = np.array(['Bob', 'Joe', 'Will', 'Bob', 'Will', 'Joe', 'Joe']) In [99]: data = np.random.randn(7, 4) In [100]: names Out[100]: array(['Bob', 'Joe', 'Will', 'Bob', 'Will', 'Joe', 'Joe'], dtype='<U4') In [101]: data Out[101]: array([[ 0.0929, 0.2817, 0.769 , 1.2464], [ 1.0072, -1.2962, 0.275 , 0.2289], [ 1.3529, 0.8864, -2.0016, -0.3718], [ 1.669 , -0.4386, -0.5397, 0.477 ], [ 3.2489, -1.0212, -0.5771, 0.1241], [ 0.3026, 0.5238, 0.0009, 1.3438], [-0.7135, -0.8312, -2.3702, -1.8608]]) \u5047\u8bbe\u6bcf\u4e2a\u540d\u5b57\u90fd\u5bf9\u5e94data\u6570\u7ec4\u4e2d\u7684\u4e00\u884c\uff0c\u800c\u6211\u4eec\u60f3\u8981\u9009\u51fa\u5bf9\u5e94\u4e8e\u540d\u5b57\"Bob\"\u7684\u6240\u6709\u884c\u3002\u8ddf\u7b97\u672f\u8fd0\u7b97\u4e00\u6837\uff0c\u6570\u7ec4\u7684\u6bd4\u8f83\u8fd0\u7b97\uff08\u5982==\uff09\u4e5f\u662f\u77e2\u91cf\u5316\u7684\u3002\u56e0\u6b64\uff0c\u5bf9names\u548c\u5b57\u7b26\u4e32\"Bob\"\u7684\u6bd4\u8f83\u8fd0\u7b97\u5c06\u4f1a\u4ea7\u751f\u4e00\u4e2a\u5e03\u5c14\u578b\u6570\u7ec4\uff1a In [102]: names == 'Bob' Out[102]: array([ True, False, False, True, False, False, False], dtype=bool) \u8fd9\u4e2a\u5e03\u5c14\u578b\u6570\u7ec4\u53ef\u7528\u4e8e\u6570\u7ec4\u7d22\u5f15\uff1a In [103]: data[names == 'Bob'] Out[103]: array([[ 0.0929, 0.2817, 0.769 , 1.2464], [ 1.669 , -0.4386, -0.5397, 0.477 ]]) \u5e03\u5c14\u578b\u6570\u7ec4\u7684\u957f\u5ea6\u5fc5\u987b\u8ddf\u88ab\u7d22\u5f15\u7684\u8f74\u957f\u5ea6\u4e00\u81f4\u3002\u6b64\u5916\uff0c\u8fd8\u53ef\u4ee5\u5c06\u5e03\u5c14\u578b\u6570\u7ec4\u8ddf\u5207\u7247\u3001\u6574\u6570\uff08\u6216\u6574\u6570\u5e8f\u5217\uff0c\u7a0d\u540e\u5c06\u5bf9\u6b64\u8fdb\u884c\u8be6\u7ec6\u8bb2\u89e3\uff09\u6df7\u5408\u4f7f\u7528\uff1a In [103]: data[names == 'Bob'] Out[103]: array([[ 0.0929, 0.2817, 0.769 , 1.2464], [ 1.669 , -0.4386, -0.5397, 0.477 ]]) \u6ce8\u610f\uff1a\u5982\u679c\u5e03\u5c14\u578b\u6570\u7ec4\u7684\u957f\u5ea6\u4e0d\u5bf9\uff0c\u5e03\u5c14\u578b\u9009\u62e9\u5c31\u4f1a\u51fa\u9519\uff0c\u56e0\u6b64\u4e00\u5b9a\u8981\u5c0f\u5fc3\u3002 \u4e0b\u9762\u7684\u4f8b\u5b50\uff0c\u6211\u9009\u53d6\u4e86 names == 'Bob' \u7684\u884c\uff0c\u5e76\u7d22\u5f15\u4e86\u5217\uff1a In [104]: data[names == 'Bob', 2:] Out[104]: array([[ 0.769 , 1.2464], [-0.5397, 0.477 ]]) In [105]: data[names == 'Bob', 3] Out[105]: array([ 1.2464, 0.477 ]) \u8981\u9009\u62e9\u9664\"Bob\"\u4ee5\u5916\u7684\u5176\u4ed6\u503c\uff0c\u65e2\u53ef\u4ee5\u4f7f\u7528\u4e0d\u7b49\u4e8e\u7b26\u53f7\uff08!=\uff09\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7~\u5bf9\u6761\u4ef6\u8fdb\u884c\u5426\u5b9a\uff1a In [106]: names != 'Bob' Out[106]: array([False, True, True, False, True, True, True], dtype=bool) In [107]: data[~(names == 'Bob')] Out[107]: array([[ 1.0072, -1.2962, 0.275 , 0.2289], [ 1.3529, 0.8864, -2.0016, -0.3718], [ 3.2489, -1.0212, -0.5771, 0.1241], [ 0.3026, 0.5238, 0.0009, 1.3438], [-0.7135, -0.8312, -2.3702, -1.8608]]) ~\u64cd\u4f5c\u7b26\u7528\u6765\u53cd\u8f6c\u6761\u4ef6\u5f88\u597d\u7528\uff1a In [108]: cond = names == 'Bob' In [109]: data[~cond] Out[109]: array([[ 1.0072, -1.2962, 0.275 , 0.2289], [ 1.3529, 0.8864, -2.0016, -0.3718], [ 3.2489, -1.0212, -0.5771, 0.1241], [ 0.3026, 0.5238, 0.0009, 1.3438], [-0.7135, -0.8312, -2.3702, -1.8608]]) \u9009\u53d6\u8fd9\u4e09\u4e2a\u540d\u5b57\u4e2d\u7684\u4e24\u4e2a\u9700\u8981\u7ec4\u5408\u5e94\u7528\u591a\u4e2a\u5e03\u5c14\u6761\u4ef6\uff0c\u4f7f\u7528&\uff08\u548c\uff09\u3001|\uff08\u6216\uff09\u4e4b\u7c7b\u7684\u5e03\u5c14\u7b97\u672f\u8fd0\u7b97\u7b26\u5373\u53ef\uff1a In [110]: mask = (names == 'Bob') | (names == 'Will') In [111]: mask Out[111]: array([ True, False, True, True, True, False, False], dtype=bool) In [112]: data[mask] Out[112]: array([[ 0.0929, 0.2817, 0.769 , 1.2464], [ 1.3529, 0.8864, -2.0016, -0.3718], [ 1.669 , -0.4386, -0.5397, 0.477 ], [ 3.2489, -1.0212, -0.5771, 0.1241]]) \u901a\u8fc7\u5e03\u5c14\u578b\u7d22\u5f15\u9009\u53d6\u6570\u7ec4\u4e2d\u7684\u6570\u636e\uff0c\u5c06\u603b\u662f\u521b\u5efa\u6570\u636e\u7684\u526f\u672c\uff0c\u5373\u4f7f\u8fd4\u56de\u4e00\u6a21\u4e00\u6837\u7684\u6570\u7ec4\u4e5f\u662f\u5982\u6b64\u3002 \u6ce8\u610f\uff1aPython\u5173\u952e\u5b57and\u548cor\u5728\u5e03\u5c14\u578b\u6570\u7ec4\u4e2d\u65e0\u6548\u3002\u8981\u4f7f\u7528&\u4e0e|\u3002 \u901a\u8fc7\u5e03\u5c14\u578b\u6570\u7ec4\u8bbe\u7f6e\u503c\u662f\u4e00\u79cd\u7ecf\u5e38\u7528\u5230\u7684\u624b\u6bb5\u3002\u4e3a\u4e86\u5c06data\u4e2d\u7684\u6240\u6709\u8d1f\u503c\u90fd\u8bbe\u7f6e\u4e3a0\uff0c\u6211\u4eec\u53ea\u9700\uff1a In [113]: data[data < 0] = 0 In [114]: data Out[114]: array([[ 0.0929, 0.2817, 0.769 , 1.2464], [ 1.0072, 0. , 0.275 , 0.2289], [ 1.3529, 0.8864, 0. , 0. ], [ 1.669 , 0. , 0. , 0.477 ], [ 3.2489, 0. , 0. , 0.1241], [ 0.3026, 0.5238, 0.0009, 1.3438], [ 0. , 0. , 0. , 0. ]]) \u901a\u8fc7\u4e00\u7ef4\u5e03\u5c14\u6570\u7ec4\u8bbe\u7f6e\u6574\u884c\u6216\u5217\u7684\u503c\u4e5f\u5f88\u7b80\u5355\uff1a In [115]: data[names != 'Joe'] = 7 In [116]: data Out[116]: array([[ 7. , 7. , 7. , 7. ], [ 1.0072, 0. , 0.275 , 0.2289], [ 7. , 7. , 7. , 7. ], [ 7. , 7. , 7. , 7. ], [ 7. , 7. , 7. , 7. ], [ 0.3026, 0.5238, 0.0009, 1.3438], [ 0. , 0. , 0. , 0. ]]) \u540e\u9762\u4f1a\u770b\u5230\uff0c\u8fd9\u7c7b\u4e8c\u7ef4\u6570\u636e\u7684\u64cd\u4f5c\u4e5f\u53ef\u4ee5\u7528pandas\u65b9\u4fbf\u7684\u6765\u505a\u3002 \u82b1\u5f0f\u7d22\u5f15 \u82b1\u5f0f\u7d22\u5f15\uff08Fancy indexing\uff09\u662f\u4e00\u4e2aNumPy\u672f\u8bed\uff0c\u5b83\u6307\u7684\u662f\u5229\u7528\u6574\u6570\u6570\u7ec4\u8fdb\u884c\u7d22\u5f15\u3002\u5047\u8bbe\u6211\u4eec\u6709\u4e00\u4e2a8\u00d74\u6570\u7ec4\uff1a In [117]: arr = np.empty((8, 4)) In [118]: for i in range(8): .....: arr[i] = i In [119]: arr Out[119]: array([[ 0., 0., 0., 0.], [ 1., 1., 1., 1.], [ 2., 2., 2., 2.], [ 3., 3., 3., 3.], [ 4., 4., 4., 4.], [ 5., 5., 5., 5.], [ 6., 6., 6., 6.], [ 7., 7., 7., 7.]]) \u4e3a\u4e86\u4ee5\u7279\u5b9a\u987a\u5e8f\u9009\u53d6\u884c\u5b50\u96c6\uff0c\u53ea\u9700\u4f20\u5165\u4e00\u4e2a\u7528\u4e8e\u6307\u5b9a\u987a\u5e8f\u7684\u6574\u6570\u5217\u8868\u6216ndarray\u5373\u53ef\uff1a In [120]: arr[[4, 3, 0, 6]] Out[120]: array([[ 4., 4., 4., 4.], [ 3., 3., 3., 3.], [ 0., 0., 0., 0.], [ 6., 6., 6., 6.]]) \u8fd9\u6bb5\u4ee3\u7801\u786e\u5b9e\u8fbe\u5230\u6211\u4eec\u7684\u8981\u6c42\u4e86\uff01\u4f7f\u7528\u8d1f\u6570\u7d22\u5f15\u5c06\u4f1a\u4ece\u672b\u5c3e\u5f00\u59cb\u9009\u53d6\u884c\uff1a In [121]: arr[[-3, -5, -7]] Out[121]: array([[ 5., 5., 5., 5.], [ 3., 3., 3., 3.], [ 1., 1., 1., 1.]]) \u4e00\u6b21\u4f20\u5165\u591a\u4e2a\u7d22\u5f15\u6570\u7ec4\u4f1a\u6709\u4e00\u70b9\u7279\u522b\u3002\u5b83\u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u4e00\u7ef4\u6570\u7ec4\uff0c\u5176\u4e2d\u7684\u5143\u7d20\u5bf9\u5e94\u5404\u4e2a\u7d22\u5f15\u5143\u7ec4\uff1a In [122]: arr = np.arange(32).reshape((8, 4)) In [123]: arr Out[123]: array([[ 0, 1, 2, 3], [ 4, 5, 6, 7], [ 8, 9, 10, 11], [12, 13, 14, 15], [16, 17, 18, 19], [20, 21, 22, 23], [24, 25, 26, 27], [28, 29, 30, 31]]) In [124]: arr[[1, 5, 7, 2], [0, 3, 1, 2]] Out[124]: array([ 4, 23, 29, 10]) \u9644\u5f55A\u4e2d\u4f1a\u8be6\u7ec6\u4ecb\u7ecdreshape\u65b9\u6cd5\u3002 \u6700\u7ec8\u9009\u51fa\u7684\u662f\u5143\u7d20(1,0)\u3001(5,3)\u3001(7,1)\u548c(2,2)\u3002\u65e0\u8bba\u6570\u7ec4\u662f\u591a\u5c11\u7ef4\u7684\uff0c\u82b1\u5f0f\u7d22\u5f15\u603b\u662f\u4e00\u7ef4\u7684\u3002 \u8fd9\u4e2a\u82b1\u5f0f\u7d22\u5f15\u7684\u884c\u4e3a\u53ef\u80fd\u4f1a\u8ddf\u67d0\u4e9b\u7528\u6237\u7684\u9884\u671f\u4e0d\u4e00\u6837\uff08\u5305\u62ec\u6211\u5728\u5185\uff09\uff0c\u9009\u53d6\u77e9\u9635\u7684\u884c\u5217\u5b50\u96c6\u5e94\u8be5\u662f\u77e9\u5f62\u533a\u57df\u7684\u5f62\u5f0f\u624d\u5bf9\u3002\u4e0b\u9762\u662f\u5f97\u5230\u8be5\u7ed3\u679c\u7684\u4e00\u4e2a\u529e\u6cd5\uff1a In [125]: arr[[1, 5, 7, 2]][:, [0, 3, 1, 2]] Out[125]: array([[ 4, 7, 5, 6], [20, 23, 21, 22], [28, 31, 29, 30], [ 8, 11, 9, 10]]) \u8bb0\u4f4f\uff0c\u82b1\u5f0f\u7d22\u5f15\u8ddf\u5207\u7247\u4e0d\u4e00\u6837\uff0c\u5b83\u603b\u662f\u5c06\u6570\u636e\u590d\u5236\u5230\u65b0\u6570\u7ec4\u4e2d\u3002 \u6570\u7ec4\u8f6c\u7f6e\u548c\u8f74\u5bf9\u6362 \u8f6c\u7f6e\u662f\u91cd\u5851\u7684\u4e00\u79cd\u7279\u6b8a\u5f62\u5f0f\uff0c\u5b83\u8fd4\u56de\u7684\u662f\u6e90\u6570\u636e\u7684\u89c6\u56fe\uff08\u4e0d\u4f1a\u8fdb\u884c\u4efb\u4f55\u590d\u5236\u64cd\u4f5c\uff09\u3002\u6570\u7ec4\u4e0d\u4ec5\u6709transpose\u65b9\u6cd5\uff0c\u8fd8\u6709\u4e00\u4e2a\u7279\u6b8a\u7684T\u5c5e\u6027\uff1a In [126]: arr = np.arange(15).reshape((3, 5)) In [127]: arr Out[127]: array([[ 0, 1, 2, 3, 4], [ 5, 6, 7, 8, 9], [10, 11, 12, 13, 14]]) In [128]: arr.T Out[128]: array([[ 0, 5, 10], [ 1, 6, 11], [ 2, 7, 12], [ 3, 8, 13], [ 4, 9, 14]]) \u5728\u8fdb\u884c\u77e9\u9635\u8ba1\u7b97\u65f6\uff0c\u7ecf\u5e38\u9700\u8981\u7528\u5230\u8be5\u64cd\u4f5c\uff0c\u6bd4\u5982\u5229\u7528np.dot\u8ba1\u7b97\u77e9\u9635\u5185\u79ef\uff1a In [129]: arr = np.random.randn(6, 3) In [130]: arr Out[130]: array([[-0.8608, 0.5601, -1.2659], [ 0.1198, -1.0635, 0.3329], [-2.3594, -0.1995, -1.542 ], [-0.9707, -1.307 , 0.2863], [ 0.378 , -0.7539, 0.3313], [ 1.3497, 0.0699, 0.2467]]) In [131]: np.dot(arr.T, arr) Out[131]: array([[ 9.2291, 0.9394, 4.948 ], [ 0.9394, 3.7662, -1.3622], [ 4.948 , -1.3622, 4.3437]]) \u5bf9\u4e8e\u9ad8\u7ef4\u6570\u7ec4\uff0ctranspose\u9700\u8981\u5f97\u5230\u4e00\u4e2a\u7531\u8f74\u7f16\u53f7\u7ec4\u6210\u7684\u5143\u7ec4\u624d\u80fd\u5bf9\u8fd9\u4e9b\u8f74\u8fdb\u884c\u8f6c\u7f6e\uff08\u6bd4\u8f83\u8d39\u8111\u5b50\uff09\uff1a In [132]: arr = np.arange(16).reshape((2, 2, 4)) In [133]: arr Out[133]: array([[[ 0, 1, 2, 3], [ 4, 5, 6, 7]], [[ 8, 9, 10, 11], [12, 13, 14, 15]]]) In [134]: arr.transpose((1, 0, 2)) Out[134]: array([[[ 0, 1, 2, 3], [ 8, 9, 10, 11]], [[ 4, 5, 6, 7], [12, 13, 14, 15]]]) \u8fd9\u91cc\uff0c\u7b2c\u4e00\u4e2a\u8f74\u88ab\u6362\u6210\u4e86\u7b2c\u4e8c\u4e2a\uff0c\u7b2c\u4e8c\u4e2a\u8f74\u88ab\u6362\u6210\u4e86\u7b2c\u4e00\u4e2a\uff0c\u6700\u540e\u4e00\u4e2a\u8f74\u4e0d\u53d8\u3002 \u7b80\u5355\u7684\u8f6c\u7f6e\u53ef\u4ee5\u4f7f\u7528.T\uff0c\u5b83\u5176\u5b9e\u5c31\u662f\u8fdb\u884c\u8f74\u5bf9\u6362\u800c\u5df2\u3002ndarray\u8fd8\u6709\u4e00\u4e2aswapaxes\u65b9\u6cd5\uff0c\u5b83\u9700\u8981\u63a5\u53d7\u4e00\u5bf9\u8f74\u7f16\u53f7\uff1a In [135]: arr Out[135]: array([[[ 0, 1, 2, 3], [ 4, 5, 6, 7]], [[ 8, 9, 10, 11], [12, 13, 14, 15]]]) In [136]: arr.swapaxes(1, 2) Out[136]: array([[[ 0, 4], [ 1, 5], [ 2, 6], [ 3, 7]], [[ 8, 12], [ 9, 13], [10, 14], [11, 15]]]) swapaxes\u4e5f\u662f\u8fd4\u56de\u6e90\u6570\u636e\u7684\u89c6\u56fe\uff08\u4e0d\u4f1a\u8fdb\u884c\u4efb\u4f55\u590d\u5236\u64cd\u4f5c\uff09\u3002 \u901a\u7528\u51fd\u6570\uff1a\u5feb\u901f\u7684\u5143\u7d20\u7ea7\u6570\u7ec4\u51fd\u6570 \u901a\u7528\u51fd\u6570\uff08\u5373ufunc\uff09\u662f\u4e00\u79cd\u5bf9ndarray\u4e2d\u7684\u6570\u636e\u6267\u884c\u5143\u7d20\u7ea7\u8fd0\u7b97\u7684\u51fd\u6570\u3002\u4f60\u53ef\u4ee5\u5c06\u5176\u770b\u505a\u7b80\u5355\u51fd\u6570\uff08\u63a5\u53d7\u4e00\u4e2a\u6216\u591a\u4e2a\u6807\u91cf\u503c\uff0c\u5e76\u4ea7\u751f\u4e00\u4e2a\u6216\u591a\u4e2a\u6807\u91cf\u503c\uff09\u7684\u77e2\u91cf\u5316\u5305\u88c5\u5668\u3002 \u8bb8\u591aufunc\u90fd\u662f\u7b80\u5355\u7684\u5143\u7d20\u7ea7\u53d8\u4f53\uff0c\u5982sqrt\u548cexp\uff1a In [137]: arr = np.arange(10) In [138]: arr Out[138]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) In [139]: np.sqrt(arr) Out[139]: array([ 0. , 1. , 1.4142, 1.7321, 2. , 2.2361, 2.4495, 2.6458, 2.8284, 3. ]) In [140]: np.exp(arr) Out[140]: array([ 1. , 2.7183, 7.3891, 20.0855, 54.5982, 148.4132, 403.4288, 1096.6332, 2980.958 , 8103.0839]) \u8fd9\u4e9b\u90fd\u662f\u4e00\u5143\uff08unary\uff09ufunc\u3002\u53e6\u5916\u4e00\u4e9b\uff08\u5982add\u6216maximum\uff09\u63a5\u53d72\u4e2a\u6570\u7ec4\uff08\u56e0\u6b64\u4e5f\u53eb\u4e8c\u5143\uff08binary\uff09ufunc\uff09\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u7ed3\u679c\u6570\u7ec4\uff1a In [141]: x = np.random.randn(8) In [142]: y = np.random.randn(8) In [143]: x Out[143]: array([-0.0119, 1.0048, 1.3272, -0.9193, -1.5491, 0.0222, 0.7584, -0.6605]) In [144]: y Out[144]: array([ 0.8626, -0.01 , 0.05 , 0.6702, 0.853 , -0.9559, -0.0235, -2.3042]) In [145]: np.maximum(x, y) Out[145]: array([ 0.8626, 1.0048, 1.3272, 0.6702, 0.853 , 0.0222, 0.7584, -0.6605]) \u8fd9\u91cc\uff0cnumpy.maximum\u8ba1\u7b97\u4e86x\u548cy\u4e2d\u5143\u7d20\u7ea7\u522b\u6700\u5927\u7684\u5143\u7d20\u3002 \u867d\u7136\u5e76\u4e0d\u5e38\u89c1\uff0c\u4f46\u6709\u4e9bufunc\u7684\u786e\u53ef\u4ee5\u8fd4\u56de\u591a\u4e2a\u6570\u7ec4\u3002modf\u5c31\u662f\u4e00\u4e2a\u4f8b\u5b50\uff0c\u5b83\u662fPython\u5185\u7f6e\u51fd\u6570divmod\u7684\u77e2\u91cf\u5316\u7248\u672c\uff0c\u5b83\u4f1a\u8fd4\u56de\u6d6e\u70b9\u6570\u6570\u7ec4\u7684\u5c0f\u6570\u548c\u6574\u6570\u90e8\u5206\uff1a In [146]: arr = np.random.randn(7) * 5 In [147]: arr Out[147]: array([-3.2623, -6.0915, -6.663 , 5.3731, 3.6182, 3.45 , 5.0077]) In [148]: remainder, whole_part = np.modf(arr) In [149]: remainder Out[149]: array([-0.2623, -0.0915, -0.663 , 0.3731, 0.6182, 0.45 , 0.0077]) In [150]: whole_part Out[150]: array([-3., -6., -6., 5., 3., 3., 5.]) Ufuncs\u53ef\u4ee5\u63a5\u53d7\u4e00\u4e2aout\u53ef\u9009\u53c2\u6570\uff0c\u8fd9\u6837\u5c31\u80fd\u5728\u6570\u7ec4\u539f\u5730\u8fdb\u884c\u64cd\u4f5c\uff1a In [151]: arr Out[151]: array([-3.2623, -6.0915, -6.663 , 5.3731, 3.6182, 3.45 , 5.0077]) In [152]: np.sqrt(arr) Out[152]: array([ nan, nan, nan, 2.318 , 1.9022, 1.8574, 2.2378]) In [153]: np.sqrt(arr, arr) Out[153]: array([ nan, nan, nan, 2.318 , 1.9022, 1.8574, 2.2378]) In [154]: arr Out[154]: array([ nan, nan, nan, 2.318 , 1.9022, 1.8574, 2.2378]) \u88684-3\u548c\u88684-4\u5206\u522b\u5217\u51fa\u4e86\u4e00\u4e9b\u4e00\u5143\u548c\u4e8c\u5143ufunc\u3002 \u5229\u7528\u6570\u7ec4\u8fdb\u884c\u6570\u636e\u5904\u7406 NumPy\u6570\u7ec4\u4f7f\u4f60\u53ef\u4ee5\u5c06\u8bb8\u591a\u79cd\u6570\u636e\u5904\u7406\u4efb\u52a1\u8868\u8ff0\u4e3a\u7b80\u6d01\u7684\u6570\u7ec4\u8868\u8fbe\u5f0f\uff08\u5426\u5219\u9700\u8981\u7f16\u5199\u5faa\u73af\uff09\u3002\u7528\u6570\u7ec4\u8868\u8fbe\u5f0f\u4ee3\u66ff\u5faa\u73af\u7684\u505a\u6cd5\uff0c\u901a\u5e38\u88ab\u79f0\u4e3a\u77e2\u91cf\u5316\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u77e2\u91cf\u5316\u6570\u7ec4\u8fd0\u7b97\u8981\u6bd4\u7b49\u4ef7\u7684\u7eafPython\u65b9\u5f0f\u5feb\u4e0a\u4e00\u4e24\u4e2a\u6570\u91cf\u7ea7\uff08\u751a\u81f3\u66f4\u591a\uff09\uff0c\u5c24\u5176\u662f\u5404\u79cd\u6570\u503c\u8ba1\u7b97\u3002\u5728\u540e\u9762\u5185\u5bb9\u4e2d\uff08\u89c1\u9644\u5f55A\uff09\u6211\u5c06\u4ecb\u7ecd\u5e7f\u64ad\uff0c\u8fd9\u662f\u4e00\u79cd\u9488\u5bf9\u77e2\u91cf\u5316\u8ba1\u7b97\u7684\u5f3a\u5927\u624b\u6bb5\u3002 \u4f5c\u4e3a\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u5047\u8bbe\u6211\u4eec\u60f3\u8981\u5728\u4e00\u7ec4\u503c\uff08\u7f51\u683c\u578b\uff09\u4e0a\u8ba1\u7b97\u51fd\u6570 sqrt(x^2+y^2) \u3002np.meshgrid\u51fd\u6570\u63a5\u53d7\u4e24\u4e2a\u4e00\u7ef4\u6570\u7ec4\uff0c\u5e76\u4ea7\u751f\u4e24\u4e2a\u4e8c\u7ef4\u77e9\u9635\uff08\u5bf9\u5e94\u4e8e\u4e24\u4e2a\u6570\u7ec4\u4e2d\u6240\u6709\u7684(x,y)\u5bf9\uff09\uff1a In [155]: points = np.arange(-5, 5, 0.01) # 1000 equally spaced points In [156]: xs, ys = np.meshgrid(points, points) In [157]: ys Out[157]: array([[-5. , -5. , -5. , ..., -5. , -5. , -5. ], [-4.99, -4.99, -4.99, ..., -4.99, -4.99, -4.99], [-4.98, -4.98, -4.98, ..., -4.98, -4.98, -4.98], ..., [ 4.97, 4.97, 4.97, ..., 4.97, 4.97, 4.97], [ 4.98, 4.98, 4.98, ..., 4.98, 4.98, 4.98], [ 4.99, 4.99, 4.99, ..., 4.99, 4.99, 4.99]]) \u73b0\u5728\uff0c\u5bf9\u8be5\u51fd\u6570\u7684\u6c42\u503c\u8fd0\u7b97\u5c31\u597d\u529e\u4e86\uff0c\u628a\u8fd9\u4e24\u4e2a\u6570\u7ec4\u5f53\u505a\u4e24\u4e2a\u6d6e\u70b9\u6570\u90a3\u6837\u7f16\u5199\u8868\u8fbe\u5f0f\u5373\u53ef\uff1a In [158]: z = np.sqrt(xs ** 2 + ys ** 2) In [159]: z Out[159]: array([[ 7.0711, 7.064 , 7.0569, ..., 7.0499, 7.0569, 7.064 ], [ 7.064 , 7.0569, 7.0499, ..., 7.0428, 7.0499, 7.0569], [ 7.0569, 7.0499, 7.0428, ..., 7.0357, 7.0428, 7.0499], ..., [ 7.0499, 7.0428, 7.0357, ..., 7.0286, 7.0357, 7.0428], [ 7.0569, 7.0499, 7.0428, ..., 7.0357, 7.0428, 7.0499], [ 7.064 , 7.0569, 7.0499, ..., 7.0428, 7.0499, 7.0569]]) \u4f5c\u4e3a\u7b2c9\u7ae0\u7684\u5148\u5bfc\uff0c\u6211\u7528matplotlib\u521b\u5efa\u4e86\u8fd9\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u7684\u53ef\u89c6\u5316\uff1a In [160]: import matplotlib.pyplot as plt In [161]: plt.imshow(z, cmap=plt.cm.gray); plt.colorbar() Out[161]: <matplotlib.colorbar.Colorbar at 0x7f715e3fa630> In [162]: plt.title(\"Image plot of $\\sqrt{x^2 + y^2}$ for a grid of values\") Out[162]: <matplotlib.text.Text at 0x7f715d2de748> \u89c1\u56fe4-3\u3002\u8fd9\u5f20\u56fe\u662f\u7528matplotlib\u7684imshow\u51fd\u6570\u521b\u5efa\u7684\u3002 \u5c06\u6761\u4ef6\u903b\u8f91\u8868\u8ff0\u4e3a\u6570\u7ec4\u8fd0\u7b97 numpy.where\u51fd\u6570\u662f\u4e09\u5143\u8868\u8fbe\u5f0fx if condition else y\u7684\u77e2\u91cf\u5316\u7248\u672c\u3002\u5047\u8bbe\u6211\u4eec\u6709\u4e00\u4e2a\u5e03\u5c14\u6570\u7ec4\u548c\u4e24\u4e2a\u503c\u6570\u7ec4\uff1a In [165]: xarr = np.array([1.1, 1.2, 1.3, 1.4, 1.5]) In [166]: yarr = np.array([2.1, 2.2, 2.3, 2.4, 2.5]) In [167]: cond = np.array([True, False, True, True, False]) \u5047\u8bbe\u6211\u4eec\u60f3\u8981\u6839\u636econd\u4e2d\u7684\u503c\u9009\u53d6xarr\u548cyarr\u7684\u503c\uff1a\u5f53cond\u4e2d\u7684\u503c\u4e3aTrue\u65f6\uff0c\u9009\u53d6xarr\u7684\u503c\uff0c\u5426\u5219\u4eceyarr\u4e2d\u9009\u53d6\u3002\u5217\u8868\u63a8\u5bfc\u5f0f\u7684\u5199\u6cd5\u5e94\u8be5\u5982\u4e0b\u6240\u793a\uff1a In [168]: result = [(x if c else y) .....: for x, y, c in zip(xarr, yarr, cond)] In [169]: result Out[169]: [1.1000000000000001, 2.2000000000000002, 1.3, 1.3999999999999999, 2.5] \u8fd9\u6709\u51e0\u4e2a\u95ee\u9898\u3002\u7b2c\u4e00\uff0c\u5b83\u5bf9\u5927\u6570\u7ec4\u7684\u5904\u7406\u901f\u5ea6\u4e0d\u662f\u5f88\u5feb\uff08\u56e0\u4e3a\u6240\u6709\u5de5\u4f5c\u90fd\u662f\u7531\u7eafPython\u5b8c\u6210\u7684\uff09\u3002\u7b2c\u4e8c\uff0c\u65e0\u6cd5\u7528\u4e8e\u591a\u7ef4\u6570\u7ec4\u3002\u82e5\u4f7f\u7528np.where\uff0c\u5219\u53ef\u4ee5\u5c06\u8be5\u529f\u80fd\u5199\u5f97\u975e\u5e38\u7b80\u6d01\uff1a In [170]: result = np.where(cond, xarr, yarr) In [171]: result Out[171]: array([ 1.1, 2.2, 1.3, 1.4, 2.5]) np.where\u7684\u7b2c\u4e8c\u4e2a\u548c\u7b2c\u4e09\u4e2a\u53c2\u6570\u4e0d\u5fc5\u662f\u6570\u7ec4\uff0c\u5b83\u4eec\u90fd\u53ef\u4ee5\u662f\u6807\u91cf\u503c\u3002\u5728\u6570\u636e\u5206\u6790\u5de5\u4f5c\u4e2d\uff0cwhere\u901a\u5e38\u7528\u4e8e\u6839\u636e\u53e6\u4e00\u4e2a\u6570\u7ec4\u800c\u4ea7\u751f\u4e00\u4e2a\u65b0\u7684\u6570\u7ec4\u3002\u5047\u8bbe\u6709\u4e00\u4e2a\u7531\u968f\u673a\u6570\u636e\u7ec4\u6210\u7684\u77e9\u9635\uff0c\u4f60\u5e0c\u671b\u5c06\u6240\u6709\u6b63\u503c\u66ff\u6362\u4e3a2\uff0c\u5c06\u6240\u6709\u8d1f\u503c\u66ff\u6362\u4e3a\uff0d2\u3002\u82e5\u5229\u7528np.where\uff0c\u5219\u4f1a\u975e\u5e38\u7b80\u5355\uff1a In [172]: arr = np.random.randn(4, 4) In [173]: arr Out[173]: array([[-0.5031, -0.6223, -0.9212, -0.7262], [ 0.2229, 0.0513, -1.1577, 0.8167], [ 0.4336, 1.0107, 1.8249, -0.9975], [ 0.8506, -0.1316, 0.9124, 0.1882]]) In [174]: arr > 0 Out[174]: array([[False, False, False, False], [ True, True, False, True], [ True, True, True, False], [ True, False, True, True]], dtype=bool) In [175]: np.where(arr > 0, 2, -2) Out[175]: array([[-2, -2, -2, -2], [ 2, 2, -2, 2], [ 2, 2, 2, -2], [ 2, -2, 2, 2]]) \u4f7f\u7528np.where\uff0c\u53ef\u4ee5\u5c06\u6807\u91cf\u548c\u6570\u7ec4\u7ed3\u5408\u8d77\u6765\u3002\u4f8b\u5982\uff0c\u6211\u53ef\u7528\u5e38\u65702\u66ff\u6362arr\u4e2d\u6240\u6709\u6b63\u7684\u503c\uff1a In [176]: np.where(arr > 0, 2, arr) # set only positive values to 2 Out[176]: array([[-0.5031, -0.6223, -0.9212, -0.7262], [ 2. , 2. , -1.1577, 2. ], [ 2. , 2. , 2. , -0.9975], [ 2. , -0.1316, 2. , 2. ]]) \u4f20\u9012\u7ed9where\u7684\u6570\u7ec4\u5927\u5c0f\u53ef\u4ee5\u4e0d\u76f8\u7b49\uff0c\u751a\u81f3\u53ef\u4ee5\u662f\u6807\u91cf\u503c\u3002 \u6570\u5b66\u548c\u7edf\u8ba1\u65b9\u6cd5 \u53ef\u4ee5\u901a\u8fc7\u6570\u7ec4\u4e0a\u7684\u4e00\u7ec4\u6570\u5b66\u51fd\u6570\u5bf9\u6574\u4e2a\u6570\u7ec4\u6216\u67d0\u4e2a\u8f74\u5411\u7684\u6570\u636e\u8fdb\u884c\u7edf\u8ba1\u8ba1\u7b97\u3002sum\u3001mean\u4ee5\u53ca\u6807\u51c6\u5deestd\u7b49\u805a\u5408\u8ba1\u7b97\uff08aggregation\uff0c\u901a\u5e38\u53eb\u505a\u7ea6\u7b80\uff08reduction\uff09\uff09\u65e2\u53ef\u4ee5\u5f53\u505a\u6570\u7ec4\u7684\u5b9e\u4f8b\u65b9\u6cd5\u8c03\u7528\uff0c\u4e5f\u53ef\u4ee5\u5f53\u505a\u9876\u7ea7NumPy\u51fd\u6570\u4f7f\u7528\u3002 \u8fd9\u91cc\uff0c\u6211\u751f\u6210\u4e86\u4e00\u4e9b\u6b63\u6001\u5206\u5e03\u968f\u673a\u6570\u636e\uff0c\u7136\u540e\u505a\u4e86\u805a\u7c7b\u7edf\u8ba1\uff1a In [177]: arr = np.random.randn(5, 4) In [178]: arr Out[178]: array([[ 2.1695, -0.1149, 2.0037, 0.0296], [ 0.7953, 0.1181, -0.7485, 0.585 ], [ 0.1527, -1.5657, -0.5625, -0.0327], [-0.929 , -0.4826, -0.0363, 1.0954], [ 0.9809, -0.5895, 1.5817, -0.5287]]) In [179]: arr.mean() Out[179]: 0.19607051119998253 In [180]: np.mean(arr) Out[180]: 0.19607051119998253 In [181]: arr.sum() Out[181]: 3.9214102239996507 mean\u548csum\u8fd9\u7c7b\u7684\u51fd\u6570\u53ef\u4ee5\u63a5\u53d7\u4e00\u4e2aaxis\u9009\u9879\u53c2\u6570\uff0c\u7528\u4e8e\u8ba1\u7b97\u8be5\u8f74\u5411\u4e0a\u7684\u7edf\u8ba1\u503c\uff0c\u6700\u7ec8\u7ed3\u679c\u662f\u4e00\u4e2a\u5c11\u4e00\u7ef4\u7684\u6570\u7ec4\uff1a In [182]: arr.mean(axis=1) Out[182]: array([ 1.022 , 0.1875, -0.502 , -0.0881, 0.3611]) In [183]: arr.sum(axis=0) Out[183]: array([ 3.1693, -2.6345, 2.2381, 1.1486]) \u8fd9\u91cc\uff0carr.mean(1)\u662f\u201c\u8ba1\u7b97\u884c\u7684\u5e73\u5747\u503c\u201d\uff0carr.sum(0)\u662f\u201c\u8ba1\u7b97\u6bcf\u5217\u7684\u548c\u201d\u3002 \u5176\u4ed6\u5982cumsum\u548ccumprod\u4e4b\u7c7b\u7684\u65b9\u6cd5\u5219\u4e0d\u805a\u5408\uff0c\u800c\u662f\u4ea7\u751f\u4e00\u4e2a\u7531\u4e2d\u95f4\u7ed3\u679c\u7ec4\u6210\u7684\u6570\u7ec4\uff1a In [184]: arr = np.array([0, 1, 2, 3, 4, 5, 6, 7]) In [185]: arr.cumsum() Out[185]: array([ 0, 1, 3, 6, 10, 15, 21, 28]) \u5728\u591a\u7ef4\u6570\u7ec4\u4e2d\uff0c\u7d2f\u52a0\u51fd\u6570\uff08\u5982cumsum\uff09\u8fd4\u56de\u7684\u662f\u540c\u6837\u5927\u5c0f\u7684\u6570\u7ec4\uff0c\u4f46\u662f\u4f1a\u6839\u636e\u6bcf\u4e2a\u4f4e\u7ef4\u7684\u5207\u7247\u6cbf\u7740\u6807\u8bb0\u8f74\u8ba1\u7b97\u90e8\u5206\u805a\u7c7b\uff1a In [186]: arr = np.array([[0, 1, 2], [3, 4, 5], [6, 7, 8]]) In [187]: arr Out[187]: array([[0, 1, 2], [3, 4, 5], [6, 7, 8]]) In [188]: arr.cumsum(axis=0) Out[188]: array([[ 0, 1, 2], [ 3, 5, 7], [ 9, 12, 15]]) In [189]: arr.cumprod(axis=1) Out[189]: array([[ 0, 0, 0], [ 3, 12, 60], [ 6, 42, 336]]) \u88684-5\u5217\u51fa\u4e86\u5168\u90e8\u7684\u57fa\u672c\u6570\u7ec4\u7edf\u8ba1\u65b9\u6cd5\u3002\u540e\u7eed\u7ae0\u8282\u4e2d\u6709\u5f88\u591a\u4f8b\u5b50\u90fd\u4f1a\u7528\u5230\u8fd9\u4e9b\u65b9\u6cd5\u3002 \u7528\u4e8e\u5e03\u5c14\u578b\u6570\u7ec4\u7684\u65b9\u6cd5 \u5728\u4e0a\u9762\u8fd9\u4e9b\u65b9\u6cd5\u4e2d\uff0c\u5e03\u5c14\u503c\u4f1a\u88ab\u5f3a\u5236\u8f6c\u6362\u4e3a1\uff08True\uff09\u548c0\uff08False\uff09\u3002\u56e0\u6b64\uff0csum\u7ecf\u5e38\u88ab\u7528\u6765\u5bf9\u5e03\u5c14\u578b\u6570\u7ec4\u4e2d\u7684True\u503c\u8ba1\u6570\uff1a In [190]: arr = np.random.randn(100) In [191]: (arr > 0).sum() # Number of positive values Out[191]: 42 \u53e6\u5916\u8fd8\u6709\u4e24\u4e2a\u65b9\u6cd5any\u548call\uff0c\u5b83\u4eec\u5bf9\u5e03\u5c14\u578b\u6570\u7ec4\u975e\u5e38\u6709\u7528\u3002any\u7528\u4e8e\u6d4b\u8bd5\u6570\u7ec4\u4e2d\u662f\u5426\u5b58\u5728\u4e00\u4e2a\u6216\u591a\u4e2aTrue\uff0c\u800call\u5219\u68c0\u67e5\u6570\u7ec4\u4e2d\u6240\u6709\u503c\u662f\u5426\u90fd\u662fTrue\uff1a In [192]: bools = np.array([False, False, True, False]) In [193]: bools.any() Out[193]: True In [194]: bools.all() Out[194]: False \u8fd9\u4e24\u4e2a\u65b9\u6cd5\u4e5f\u80fd\u7528\u4e8e\u975e\u5e03\u5c14\u578b\u6570\u7ec4\uff0c\u6240\u6709\u975e0\u5143\u7d20\u5c06\u4f1a\u88ab\u5f53\u505aTrue\u3002 \u6392\u5e8f \u8ddfPython\u5185\u7f6e\u7684\u5217\u8868\u7c7b\u578b\u4e00\u6837\uff0cNumPy\u6570\u7ec4\u4e5f\u53ef\u4ee5\u901a\u8fc7sort\u65b9\u6cd5\u5c31\u5730\u6392\u5e8f\uff1a In [195]: arr = np.random.randn(6) In [196]: arr Out[196]: array([ 0.6095, -0.4938, 1.24 , -0.1357, 1.43 , -0.8469]) In [197]: arr.sort() In [198]: arr Out[198]: array([-0.8469, -0.4938, -0.1357, 0.6095, 1.24 , 1.43 ]) \u591a\u7ef4\u6570\u7ec4\u53ef\u4ee5\u5728\u4efb\u4f55\u4e00\u4e2a\u8f74\u5411\u4e0a\u8fdb\u884c\u6392\u5e8f\uff0c\u53ea\u9700\u5c06\u8f74\u7f16\u53f7\u4f20\u7ed9sort\u5373\u53ef\uff1a In [199]: arr = np.random.randn(5, 3) In [200]: arr Out[200]: array([[ 0.6033, 1.2636, -0.2555], [-0.4457, 0.4684, -0.9616], [-1.8245, 0.6254, 1.0229], [ 1.1074, 0.0909, -0.3501], [ 0.218 , -0.8948, -1.7415]]) In [201]: arr.sort(1) In [202]: arr Out[202]: array([[-0.2555, 0.6033, 1.2636], [-0.9616, -0.4457, 0.4684], [-1.8245, 0.6254, 1.0229], [-0.3501, 0.0909, 1.1074], [-1.7415, -0.8948, 0.218 ]]) \u9876\u7ea7\u65b9\u6cd5np.sort\u8fd4\u56de\u7684\u662f\u6570\u7ec4\u7684\u5df2\u6392\u5e8f\u526f\u672c\uff0c\u800c\u5c31\u5730\u6392\u5e8f\u5219\u4f1a\u4fee\u6539\u6570\u7ec4\u672c\u8eab\u3002\u8ba1\u7b97\u6570\u7ec4\u5206\u4f4d\u6570\u6700\u7b80\u5355\u7684\u529e\u6cd5\u662f\u5bf9\u5176\u8fdb\u884c\u6392\u5e8f\uff0c\u7136\u540e\u9009\u53d6\u7279\u5b9a\u4f4d\u7f6e\u7684\u503c\uff1a In [203]: large_arr = np.random.randn(1000) In [204]: large_arr.sort() In [205]: large_arr[int(0.05 * len(large_arr))] # 5% quantile Out[205]: -1.5311513550102103 \u66f4\u591a\u5173\u4e8eNumPy\u6392\u5e8f\u65b9\u6cd5\u4ee5\u53ca\u8bf8\u5982\u95f4\u63a5\u6392\u5e8f\u4e4b\u7c7b\u7684\u9ad8\u7ea7\u6280\u672f\uff0c\u8bf7\u53c2\u9605\u9644\u5f55A\u3002\u5728pandas\u4e2d\u8fd8\u53ef\u4ee5\u627e\u5230\u4e00\u4e9b\u5176\u4ed6\u8ddf\u6392\u5e8f\u6709\u5173\u7684\u6570\u636e\u64cd\u4f5c\uff08\u6bd4\u5982\u6839\u636e\u4e00\u5217\u6216\u591a\u5217\u5bf9\u8868\u683c\u578b\u6570\u636e\u8fdb\u884c\u6392\u5e8f\uff09\u3002 \u552f\u4e00\u5316\u4ee5\u53ca\u5176\u5b83\u7684\u96c6\u5408\u903b\u8f91 NumPy\u63d0\u4f9b\u4e86\u4e00\u4e9b\u9488\u5bf9\u4e00\u7ef4ndarray\u7684\u57fa\u672c\u96c6\u5408\u8fd0\u7b97\u3002\u6700\u5e38\u7528\u7684\u53ef\u80fd\u8981\u6570np.unique\u4e86\uff0c\u5b83\u7528\u4e8e\u627e\u51fa\u6570\u7ec4\u4e2d\u7684\u552f\u4e00\u503c\u5e76\u8fd4\u56de\u5df2\u6392\u5e8f\u7684\u7ed3\u679c\uff1a In [206]: names = np.array(['Bob', 'Joe', 'Will', 'Bob', 'Will', 'Joe', 'Joe']) In [207]: np.unique(names) Out[207]: array(['Bob', 'Joe', 'Will'], dtype='<U4') In [208]: ints = np.array([3, 3, 3, 2, 2, 1, 1, 4, 4]) In [209]: np.unique(ints) Out[209]: array([1, 2, 3, 4]) \u62ff\u8ddfnp.unique\u7b49\u4ef7\u7684\u7eafPython\u4ee3\u7801\u6765\u5bf9\u6bd4\u4e00\u4e0b\uff1a In [210]: sorted(set(names)) Out[210]: ['Bob', 'Joe', 'Will'] \u53e6\u4e00\u4e2a\u51fd\u6570np.in1d\u7528\u4e8e\u6d4b\u8bd5\u4e00\u4e2a\u6570\u7ec4\u4e2d\u7684\u503c\u5728\u53e6\u4e00\u4e2a\u6570\u7ec4\u4e2d\u7684\u6210\u5458\u8d44\u683c\uff0c\u8fd4\u56de\u4e00\u4e2a\u5e03\u5c14\u578b\u6570\u7ec4\uff1a In [211]: values = np.array([6, 0, 0, 3, 2, 5, 6]) In [212]: np.in1d(values, [2, 3, 6]) Out[212]: array([ True, False, False, True, True, False, True], dtype=bool) NumPy\u4e2d\u7684\u96c6\u5408\u51fd\u6570\u8bf7\u53c2\u89c1\u88684-6\u3002 \u7528\u4e8e\u6570\u7ec4\u7684\u6587\u4ef6\u8f93\u5165\u8f93\u51fa NumPy\u80fd\u591f\u8bfb\u5199\u78c1\u76d8\u4e0a\u7684\u6587\u672c\u6570\u636e\u6216\u4e8c\u8fdb\u5236\u6570\u636e\u3002\u8fd9\u4e00\u5c0f\u8282\u53ea\u8ba8\u8bbaNumPy\u7684\u5185\u7f6e\u4e8c\u8fdb\u5236\u683c\u5f0f\uff0c\u56e0\u4e3a\u66f4\u591a\u7684\u7528\u6237\u4f1a\u4f7f\u7528pandas\u6216\u5176\u5b83\u5de5\u5177\u52a0\u8f7d\u6587\u672c\u6216\u8868\u683c\u6570\u636e\uff08\u89c1\u7b2c6\u7ae0\uff09\u3002 np.save\u548cnp.load\u662f\u8bfb\u5199\u78c1\u76d8\u6570\u7ec4\u6570\u636e\u7684\u4e24\u4e2a\u4e3b\u8981\u51fd\u6570\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6570\u7ec4\u662f\u4ee5\u672a\u538b\u7f29\u7684\u539f\u59cb\u4e8c\u8fdb\u5236\u683c\u5f0f\u4fdd\u5b58\u5728\u6269\u5c55\u540d\u4e3a.npy\u7684\u6587\u4ef6\u4e2d\u7684\uff1a In [213]: arr = np.arange(10) In [214]: np.save('some_array', arr) \u5982\u679c\u6587\u4ef6\u8def\u5f84\u672b\u5c3e\u6ca1\u6709\u6269\u5c55\u540d.npy\uff0c\u5219\u8be5\u6269\u5c55\u540d\u4f1a\u88ab\u81ea\u52a8\u52a0\u4e0a\u3002\u7136\u540e\u5c31\u53ef\u4ee5\u901a\u8fc7np.load\u8bfb\u53d6\u78c1\u76d8\u4e0a\u7684\u6570\u7ec4\uff1a In [215]: np.load('some_array.npy') Out[215]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) \u901a\u8fc7np.savez\u53ef\u4ee5\u5c06\u591a\u4e2a\u6570\u7ec4\u4fdd\u5b58\u5230\u4e00\u4e2a\u672a\u538b\u7f29\u6587\u4ef6\u4e2d\uff0c\u5c06\u6570\u7ec4\u4ee5\u5173\u952e\u5b57\u53c2\u6570\u7684\u5f62\u5f0f\u4f20\u5165\u5373\u53ef\uff1a In [216]: np.savez('array_archive.npz', a=arr, b=arr) \u52a0\u8f7d.npz\u6587\u4ef6\u65f6\uff0c\u4f60\u4f1a\u5f97\u5230\u4e00\u4e2a\u7c7b\u4f3c\u5b57\u5178\u7684\u5bf9\u8c61\uff0c\u8be5\u5bf9\u8c61\u4f1a\u5bf9\u5404\u4e2a\u6570\u7ec4\u8fdb\u884c\u5ef6\u8fdf\u52a0\u8f7d\uff1a In [217]: arch = np.load('array_archive.npz') In [218]: arch['b'] Out[218]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) \u5982\u679c\u8981\u5c06\u6570\u636e\u538b\u7f29\uff0c\u53ef\u4ee5\u4f7f\u7528numpy.savez_compressed\uff1a In [219]: np.savez_compressed('arrays_compressed.npz', a=arr, b=arr) \u7ebf\u6027\u4ee3\u6570 \u7ebf\u6027\u4ee3\u6570\uff08\u5982\u77e9\u9635\u4e58\u6cd5\u3001\u77e9\u9635\u5206\u89e3\u3001\u884c\u5217\u5f0f\u4ee5\u53ca\u5176\u4ed6\u65b9\u9635\u6570\u5b66\u7b49\uff09\u662f\u4efb\u4f55\u6570\u7ec4\u5e93\u7684\u91cd\u8981\u7ec4\u6210\u90e8\u5206\u3002\u4e0d\u50cf\u67d0\u4e9b\u8bed\u8a00\uff08\u5982MATLAB\uff09\uff0c\u901a\u8fc7*\u5bf9\u4e24\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u76f8\u4e58\u5f97\u5230\u7684\u662f\u4e00\u4e2a\u5143\u7d20\u7ea7\u7684\u79ef\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u77e9\u9635\u70b9\u79ef\u3002\u56e0\u6b64\uff0cNumPy\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7528\u4e8e\u77e9\u9635\u4e58\u6cd5\u7684dot\u51fd\u6570\uff08\u65e2\u662f\u4e00\u4e2a\u6570\u7ec4\u65b9\u6cd5\u4e5f\u662fnumpy\u547d\u540d\u7a7a\u95f4\u4e2d\u7684\u4e00\u4e2a\u51fd\u6570\uff09\uff1a In [223]: x = np.array([[1., 2., 3.], [4., 5., 6.]]) In [224]: y = np.array([[6., 23.], [-1, 7], [8, 9]]) In [225]: x Out[225]: array([[ 1., 2., 3.], [ 4., 5., 6.]]) In [226]: y Out[226]: array([[ 6., 23.], [ -1., 7.], [ 8., 9.]]) In [227]: x.dot(y) Out[227]: array([[ 28., 64.], [ 67., 181.]]) x.dot(y)\u7b49\u4ef7\u4e8enp.dot(x, y)\uff1a In [228]: np.dot(x, y) Out[228]: array([[ 28., 64.], [ 67., 181.]]) \u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u8ddf\u4e00\u4e2a\u5927\u5c0f\u5408\u9002\u7684\u4e00\u7ef4\u6570\u7ec4\u7684\u77e9\u9635\u70b9\u79ef\u8fd0\u7b97\u4e4b\u540e\u5c06\u4f1a\u5f97\u5230\u4e00\u4e2a\u4e00\u7ef4\u6570\u7ec4\uff1a In [229]: np.dot(x, np.ones(3)) Out[229]: array([ 6., 15.]) @\u7b26\uff08\u7c7b\u4f3cPython 3.5\uff09\u4e5f\u53ef\u4ee5\u7528\u4f5c\u4e2d\u7f00\u8fd0\u7b97\u7b26\uff0c\u8fdb\u884c\u77e9\u9635\u4e58\u6cd5\uff1a In [230]: x @ np.ones(3) Out[230]: array([ 6., 15.]) numpy.linalg\u4e2d\u6709\u4e00\u7ec4\u6807\u51c6\u7684\u77e9\u9635\u5206\u89e3\u8fd0\u7b97\u4ee5\u53ca\u8bf8\u5982\u6c42\u9006\u548c\u884c\u5217\u5f0f\u4e4b\u7c7b\u7684\u4e1c\u897f\u3002\u5b83\u4eec\u8ddfMATLAB\u548cR\u7b49\u8bed\u8a00\u6240\u4f7f\u7528\u7684\u662f\u76f8\u540c\u7684\u884c\u4e1a\u6807\u51c6\u7ebf\u6027\u4ee3\u6570\u5e93\uff0c\u5982BLAS\u3001LAPACK\u3001Intel MKL\uff08Math Kernel Library\uff0c\u53ef\u80fd\u6709\uff0c\u53d6\u51b3\u4e8e\u4f60\u7684NumPy\u7248\u672c\uff09\u7b49\uff1a In [231]: from numpy.linalg import inv, qr In [232]: X = np.random.randn(5, 5) In [233]: mat = X.T.dot(X) In [234]: inv(mat) Out[234]: array([[ 933.1189, 871.8258, -1417.6902, -1460.4005, 1782.1391], [ 871.8258, 815.3929, -1325.9965, -1365.9242, 1666.9347], [-1417.6902, -1325.9965, 2158.4424, 2222.0191, -2711.6822], [-1460.4005, -1365.9242, 2222.0191, 2289.0575, -2793.422 ], [ 1782.1391, 1666.9347, -2711.6822, -2793.422 , 3409.5128]]) In [235]: mat.dot(inv(mat)) Out[235]: array([[ 1., 0., -0., -0., -0.], [-0., 1., 0., 0., 0.], [ 0., 0., 1., 0., 0.], [-0., 0., 0., 1., -0.], [-0., 0., 0., 0., 1.]]) In [236]: q, r = qr(mat) In [237]: r Out[237]: array([[-1.6914, 4.38 , 0.1757, 0.4075, -0.7838], [ 0. , -2.6436, 0.1939, -3.072 , -1.0702], [ 0. , 0. , -0.8138, 1.5414, 0.6155], [ 0. , 0. , 0. , -2.6445, -2.1669], [ 0. , 0. , 0. , 0. , 0.0002]]) \u8868\u8fbe\u5f0fX.T.dot(X)\u8ba1\u7b97X\u548c\u5b83\u7684\u8f6c\u7f6eX.T\u7684\u70b9\u79ef\u3002 \u88684-7\u4e2d\u5217\u51fa\u4e86\u4e00\u4e9b\u6700\u5e38\u7528\u7684\u7ebf\u6027\u4ee3\u6570\u51fd\u6570\u3002 \u4f2a\u968f\u673a\u6570\u751f\u6210 numpy.random\u6a21\u5757\u5bf9Python\u5185\u7f6e\u7684random\u8fdb\u884c\u4e86\u8865\u5145\uff0c\u589e\u52a0\u4e86\u4e00\u4e9b\u7528\u4e8e\u9ad8\u6548\u751f\u6210\u591a\u79cd\u6982\u7387\u5206\u5e03\u7684\u6837\u672c\u503c\u7684\u51fd\u6570\u3002\u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u7528normal\u6765\u5f97\u5230\u4e00\u4e2a\u6807\u51c6\u6b63\u6001\u5206\u5e03\u76844\u00d74\u6837\u672c\u6570\u7ec4\uff1a In [238]: samples = np.random.normal(size=(4, 4)) In [239]: samples Out[239]: array([[ 0.5732, 0.1933, 0.4429, 1.2796], [ 0.575 , 0.4339, -0.7658, -1.237 ], [-0.5367, 1.8545, -0.92 , -0.1082], [ 0.1525, 0.9435, -1.0953, -0.144 ]]) \u800cPython\u5185\u7f6e\u7684random\u6a21\u5757\u5219\u53ea\u80fd\u4e00\u6b21\u751f\u6210\u4e00\u4e2a\u6837\u672c\u503c\u3002\u4ece\u4e0b\u9762\u7684\u6d4b\u8bd5\u7ed3\u679c\u4e2d\u53ef\u4ee5\u770b\u51fa\uff0c\u5982\u679c\u9700\u8981\u4ea7\u751f\u5927\u91cf\u6837\u672c\u503c\uff0cnumpy.random\u5feb\u4e86\u4e0d\u6b62\u4e00\u4e2a\u6570\u91cf\u7ea7\uff1a In [240]: from random import normalvariate In [241]: N = 1000000 In [242]: %timeit samples = [normalvariate(0, 1) for _ in range(N)] 1.77 s +- 126 ms per loop (mean +- std. dev. of 7 runs, 1 loop each) In [243]: %timeit np.random.normal(size=N) 61.7 ms +- 1.32 ms per loop (mean +- std. dev. of 7 runs, 10 loops each) \u6211\u4eec\u8bf4\u8fd9\u4e9b\u90fd\u662f\u4f2a\u968f\u673a\u6570\uff0c\u662f\u56e0\u4e3a\u5b83\u4eec\u90fd\u662f\u901a\u8fc7\u7b97\u6cd5\u57fa\u4e8e\u968f\u673a\u6570\u751f\u6210\u5668\u79cd\u5b50\uff0c\u5728\u786e\u5b9a\u6027\u7684\u6761\u4ef6\u4e0b\u751f\u6210\u7684\u3002\u4f60\u53ef\u4ee5\u7528NumPy\u7684np.random.seed\u66f4\u6539\u968f\u673a\u6570\u751f\u6210\u79cd\u5b50\uff1a In [244]: np.random.seed(1234) numpy.random\u7684\u6570\u636e\u751f\u6210\u51fd\u6570\u4f7f\u7528\u4e86\u5168\u5c40\u7684\u968f\u673a\u79cd\u5b50\u3002\u8981\u907f\u514d\u5168\u5c40\u72b6\u6001\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528numpy.random.RandomState\uff0c\u521b\u5efa\u4e00\u4e2a\u4e0e\u5176\u5b83\u9694\u79bb\u7684\u968f\u673a\u6570\u751f\u6210\u5668\uff1a In [245]: rng = np.random.RandomState(1234) In [246]: rng.randn(10) Out[246]: array([ 0.4714, -1.191 , 1.4327, -0.3127, -0.7206, 0.8872, 0.8596, -0.6365, 0.0157, -2.2427]) \u88684-8\u5217\u51fa\u4e86numpy.random\u4e2d\u7684\u90e8\u5206\u51fd\u6570\u3002\u5728\u4e0b\u4e00\u8282\u4e2d\uff0c\u6211\u5c06\u7ed9\u51fa\u4e00\u4e9b\u5229\u7528\u8fd9\u4e9b\u51fd\u6570\u4e00\u6b21\u6027\u751f\u6210\u5927\u91cf\u6837\u672c\u503c\u7684\u8303\u4f8b\u3002 \u793a\u4f8b\uff1a\u968f\u673a\u6f2b\u6b65 \u6211\u4eec\u901a\u8fc7\u6a21\u62df\u968f\u673a\u6f2b\u6b65\u6765\u8bf4\u660e\u5982\u4f55\u8fd0\u7528\u6570\u7ec4\u8fd0\u7b97\u3002\u5148\u6765\u770b\u4e00\u4e2a\u7b80\u5355\u7684\u968f\u673a\u6f2b\u6b65\u7684\u4f8b\u5b50\uff1a\u4ece0\u5f00\u59cb\uff0c\u6b65\u957f1\u548c\uff0d1\u51fa\u73b0\u7684\u6982\u7387\u76f8\u7b49\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u901a\u8fc7\u5185\u7f6e\u7684random\u6a21\u5757\u4ee5\u7eafPython\u7684\u65b9\u5f0f\u5b9e\u73b01000\u6b65\u7684\u968f\u673a\u6f2b\u6b65\uff1a In [247]: import random .....: position = 0 .....: walk = [position] .....: steps = 1000 .....: for i in range(steps): .....: step = 1 if random.randint(0, 1) else -1 .....: position += step .....: walk.append(position) .....: \u56fe4-4\u662f\u6839\u636e\u524d100\u4e2a\u968f\u673a\u6f2b\u6b65\u503c\u751f\u6210\u7684\u6298\u7ebf\u56fe\uff1a In [249]: plt.plot(walk[:100]) \u4e0d\u96be\u770b\u51fa\uff0c\u8fd9\u5176\u5b9e\u5c31\u662f\u968f\u673a\u6f2b\u6b65\u4e2d\u5404\u6b65\u7684\u7d2f\u8ba1\u548c\uff0c\u53ef\u4ee5\u7528\u4e00\u4e2a\u6570\u7ec4\u8fd0\u7b97\u6765\u5b9e\u73b0\u3002\u56e0\u6b64\uff0c\u6211\u7528np.random\u6a21\u5757\u4e00\u6b21\u6027\u968f\u673a\u4ea7\u751f1000\u4e2a\u201c\u63b7\u786c\u5e01\u201d\u7ed3\u679c\uff08\u5373\u4e24\u4e2a\u6570\u4e2d\u4efb\u9009\u4e00\u4e2a\uff09\uff0c\u5c06\u5176\u5206\u522b\u8bbe\u7f6e\u4e3a1\u6216\uff0d1\uff0c\u7136\u540e\u8ba1\u7b97\u7d2f\u8ba1\u548c\uff1a In [251]: nsteps = 1000 In [252]: draws = np.random.randint(0, 2, size=nsteps) In [253]: steps = np.where(draws > 0, 1, -1) In [254]: walk = steps.cumsum() \u6709\u4e86\u8fd9\u4e9b\u6570\u636e\u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u6cbf\u7740\u6f2b\u6b65\u8def\u5f84\u505a\u4e00\u4e9b\u7edf\u8ba1\u5de5\u4f5c\u4e86\uff0c\u6bd4\u5982\u6c42\u53d6\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\uff1a In [255]: walk.min() Out[255]: -3 In [256]: walk.max() Out[256]: 31 \u73b0\u5728\u6765\u770b\u4e00\u4e2a\u590d\u6742\u70b9\u7684\u7edf\u8ba1\u4efb\u52a1\u2014\u2014\u9996\u6b21\u7a7f\u8d8a\u65f6\u95f4\uff0c\u5373\u968f\u673a\u6f2b\u6b65\u8fc7\u7a0b\u4e2d\u7b2c\u4e00\u6b21\u5230\u8fbe\u67d0\u4e2a\u7279\u5b9a\u503c\u7684\u65f6\u95f4\u3002\u5047\u8bbe\u6211\u4eec\u60f3\u8981\u77e5\u9053\u672c\u6b21\u968f\u673a\u6f2b\u6b65\u9700\u8981\u591a\u4e45\u624d\u80fd\u8ddd\u79bb\u521d\u59cb0\u70b9\u81f3\u5c1110\u6b65\u8fdc\uff08\u4efb\u4e00\u65b9\u5411\u5747\u53ef\uff09\u3002np.abs(walk)>=10\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u5e03\u5c14\u578b\u6570\u7ec4\uff0c\u5b83\u8868\u793a\u7684\u662f\u8ddd\u79bb\u662f\u5426\u8fbe\u5230\u6216\u8d85\u8fc710\uff0c\u800c\u6211\u4eec\u60f3\u8981\u77e5\u9053\u7684\u662f\u7b2c\u4e00\u4e2a10\u6216\uff0d10\u7684\u7d22\u5f15\u3002\u53ef\u4ee5\u7528argmax\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u5b83\u8fd4\u56de\u7684\u662f\u8be5\u5e03\u5c14\u578b\u6570\u7ec4\u7b2c\u4e00\u4e2a\u6700\u5927\u503c\u7684\u7d22\u5f15\uff08True\u5c31\u662f\u6700\u5927\u503c\uff09\uff1a In [257]: (np.abs(walk) >= 10).argmax() Out[257]: 37 \u6ce8\u610f\uff0c\u8fd9\u91cc\u4f7f\u7528argmax\u5e76\u4e0d\u662f\u5f88\u9ad8\u6548\uff0c\u56e0\u4e3a\u5b83\u65e0\u8bba\u5982\u4f55\u90fd\u4f1a\u5bf9\u6570\u7ec4\u8fdb\u884c\u5b8c\u5168\u626b\u63cf\u3002\u5728\u672c\u4f8b\u4e2d\uff0c\u53ea\u8981\u53d1\u73b0\u4e86\u4e00\u4e2aTrue\uff0c\u90a3\u6211\u4eec\u5c31\u77e5\u9053\u5b83\u662f\u4e2a\u6700\u5927\u503c\u4e86\u3002 \u4e00\u6b21\u6a21\u62df\u591a\u4e2a\u968f\u673a\u6f2b\u6b65 \u5982\u679c\u4f60\u5e0c\u671b\u6a21\u62df\u591a\u4e2a\u968f\u673a\u6f2b\u6b65\u8fc7\u7a0b\uff08\u6bd4\u59825000\u4e2a\uff09\uff0c\u53ea\u9700\u5bf9\u4e0a\u9762\u7684\u4ee3\u7801\u505a\u4e00\u70b9\u70b9\u4fee\u6539\u5373\u53ef\u751f\u6210\u6240\u6709\u7684\u968f\u673a\u6f2b\u6b65\u8fc7\u7a0b\u3002\u53ea\u8981\u7ed9numpy.random\u7684\u51fd\u6570\u4f20\u5165\u4e00\u4e2a\u4e8c\u5143\u5143\u7ec4\u5c31\u53ef\u4ee5\u4ea7\u751f\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\uff0c\u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u4e00\u6b21\u6027\u8ba1\u7b975000\u4e2a\u968f\u673a\u6f2b\u6b65\u8fc7\u7a0b\uff08\u4e00\u884c\u4e00\u4e2a\uff09\u7684\u7d2f\u8ba1\u548c\u4e86\uff1a In [258]: nwalks = 5000 In [259]: nsteps = 1000 In [260]: draws = np.random.randint(0, 2, size=(nwalks, nsteps)) # 0 or 1 In [261]: steps = np.where(draws > 0, 1, -1) In [262]: walks = steps.cumsum(1) In [263]: walks Out[263]: array([[ 1, 0, 1, ..., 8, 7, 8], [ 1, 0, -1, ..., 34, 33, 32], [ 1, 0, -1, ..., 4, 5, 4], ..., [ 1, 2, 1, ..., 24, 25, 26], [ 1, 2, 3, ..., 14, 13, 14], [ -1, -2, -3, ..., -24, -23, -22]]) \u73b0\u5728\uff0c\u6211\u4eec\u6765\u8ba1\u7b97\u6240\u6709\u968f\u673a\u6f2b\u6b65\u8fc7\u7a0b\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\uff1a In [264]: walks.max() Out[264]: 138 In [265]: walks.min() Out[265]: -133 \u5f97\u5230\u8fd9\u4e9b\u6570\u636e\u4e4b\u540e\uff0c\u6211\u4eec\u6765\u8ba1\u7b9730\u6216\uff0d30\u7684\u6700\u5c0f\u7a7f\u8d8a\u65f6\u95f4\u3002\u8fd9\u91cc\u7a0d\u5fae\u590d\u6742\u4e9b\uff0c\u56e0\u4e3a\u4e0d\u662f5000\u4e2a\u8fc7\u7a0b\u90fd\u5230\u8fbe\u4e8630\u3002\u6211\u4eec\u53ef\u4ee5\u7528any\u65b9\u6cd5\u6765\u5bf9\u6b64\u8fdb\u884c\u68c0\u67e5\uff1a In [266]: hits30 = (np.abs(walks) >= 30).any(1) In [267]: hits30 Out[267]: array([False, True, False, ..., False, True, False], dtype=bool) In [268]: hits30.sum() # Number that hit 30 or -30 Out[268]: 3410 \u7136\u540e\u6211\u4eec\u5229\u7528\u8fd9\u4e2a\u5e03\u5c14\u578b\u6570\u7ec4\u9009\u51fa\u90a3\u4e9b\u7a7f\u8d8a\u4e8630\uff08\u7edd\u5bf9\u503c\uff09\u7684\u968f\u673a\u6f2b\u6b65\uff08\u884c\uff09\uff0c\u5e76\u8c03\u7528argmax\u5728\u8f741\u4e0a\u83b7\u53d6\u7a7f\u8d8a\u65f6\u95f4\uff1a In [269]: crossing_times = (np.abs(walks[hits30]) >= 30).argmax(1) In [270]: crossing_times.mean() Out[270]: 498.88973607038122 \u8bf7\u5c1d\u8bd5\u7528\u5176\u4ed6\u5206\u5e03\u65b9\u5f0f\u5f97\u5230\u6f2b\u6b65\u6570\u636e\u3002\u53ea\u9700\u4f7f\u7528\u4e0d\u540c\u7684\u968f\u673a\u6570\u751f\u6210\u51fd\u6570\u5373\u53ef\uff0c\u5982normal\u7528\u4e8e\u751f\u6210\u6307\u5b9a\u5747\u503c\u548c\u6807\u51c6\u5dee\u7684\u6b63\u6001\u5206\u5e03\u6570\u636e\uff1a In [271]: steps = np.random.normal(loc=0, scale=0.25, .....: size=(nwalks, nsteps))","title":"3.3 NumPy Basics"},{"location":"NumPy_Basics/#numpy","text":"","title":"NumPy \u901f\u67e5\u8868"},{"location":"NumPy_Basics/#numpyndarray","text":"NumPy\u6700\u91cd\u8981\u7684\u4e00\u4e2a\u7279\u70b9\u5c31\u662f\u5176N\u7ef4\u6570\u7ec4\u5bf9\u8c61\uff08\u5373ndarray\uff09\uff0c\u8be5\u5bf9\u8c61\u662f\u4e00\u4e2a\u5feb\u901f\u800c\u7075\u6d3b\u7684\u5927\u6570\u636e\u96c6\u5bb9\u5668 In [12]: import numpy as np # Generate some random data In [13]: data = np.random.randn(2, 3) In [14]: data Out[14]: array([[-0.2047, 0.4789, -0.5194], [-0.5557, 1.9658, 1.3934]]) \u8fdb\u884c\u6570\u5b66\u8fd0\u7b97 In [15]: data * 10 Out[15]: array([[ -2.0471, 4.7894, -5.1944], [ -5.5573, 19.6578, 13.9341]]) In [16]: data + data Out[16]: array([[-0.4094, 0.9579, -1.0389], [-1.1115, 3.9316, 2.7868]]) ndarray\u662f\u4e00\u4e2a\u901a\u7528\u7684\u540c\u6784\u6570\u636e\u591a\u7ef4\u5bb9\u5668\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5176\u4e2d\u7684\u6240\u6709\u5143\u7d20\u5fc5\u987b\u662f\u76f8\u540c\u7c7b\u578b\u7684\u3002\u6bcf\u4e2a\u6570\u7ec4\u90fd\u6709\u4e00\u4e2ashape\uff08\u4e00\u4e2a\u8868\u793a\u5404\u7ef4\u5ea6\u5927\u5c0f\u7684\u5143\u7ec4\uff09\u548c\u4e00\u4e2adtype\uff08\u4e00\u4e2a\u7528\u4e8e\u8bf4\u660e\u6570\u7ec4\u6570\u636e\u7c7b\u578b\u7684\u5bf9\u8c61\uff09\uff1a In [17]: data.shape Out[17]: (2, 3) In [18]: data.dtype Out[18]: dtype('float64')","title":"NumPy\u7684ndarray\uff1a\u4e00\u79cd\u591a\u7ef4\u6570\u7ec4\u5bf9\u8c61"},{"location":"NumPy_Basics/#ndarray","text":"\u521b\u5efa\u6570\u7ec4\u6700\u7b80\u5355\u7684\u529e\u6cd5\u5c31\u662f\u4f7f\u7528array\u51fd\u6570\u3002\u5b83\u63a5\u53d7\u4e00\u5207\u5e8f\u5217\u578b\u7684\u5bf9\u8c61\uff08\u5305\u62ec\u5176\u4ed6\u6570\u7ec4\uff09\uff0c\u7136\u540e\u4ea7\u751f\u4e00\u4e2a\u65b0\u7684\u542b\u6709\u4f20\u5165\u6570\u636e\u7684NumPy\u6570\u7ec4\u3002\u4ee5\u4e00\u4e2a\u5217\u8868\u7684\u8f6c\u6362\u4e3a\u4f8b\uff1a In [19]: data1 = [6, 7.5, 8, 0, 1] In [20]: arr1 = np.array(data1) In [21]: arr1 Out[21]: array([ 6. , 7.5, 8. , 0. , 1. ]) \u5d4c\u5957\u5e8f\u5217\uff08\u6bd4\u5982\u7531\u4e00\u7ec4\u7b49\u957f\u5217\u8868\u7ec4\u6210\u7684\u5217\u8868\uff09\u5c06\u4f1a\u88ab\u8f6c\u6362\u4e3a\u4e00\u4e2a\u591a\u7ef4\u6570\u7ec4\uff1a In [22]: data2 = [[1, 2, 3, 4], [5, 6, 7, 8]] In [23]: arr2 = np.array(data2) In [24]: arr2 Out[24]: array([[1, 2, 3, 4], [5, 6, 7, 8]]) \u56e0\u4e3adata2\u662f\u5217\u8868\u7684\u5217\u8868\uff0cNumPy\u6570\u7ec4arr2\u7684\u4e24\u4e2a\u7ef4\u5ea6\u7684shape\u662f\u4ecedata2\u5f15\u5165\u7684\u3002\u53ef\u4ee5\u7528\u5c5e\u6027ndim\u548cshape\u9a8c\u8bc1\uff1a In [25]: arr2.ndim Out[25]: 2 In [26]: arr2.shape Out[26]: (2, 4) \u9664\u975e\u7279\u522b\u8bf4\u660e\uff08\u7a0d\u540e\u5c06\u4f1a\u8be6\u7ec6\u4ecb\u7ecd\uff09\uff0cnp.array\u4f1a\u5c1d\u8bd5\u4e3a\u65b0\u5efa\u7684\u8fd9\u4e2a\u6570\u7ec4\u63a8\u65ad\u51fa\u4e00\u4e2a\u8f83\u4e3a\u5408\u9002\u7684\u6570\u636e\u7c7b\u578b\u3002\u6570\u636e\u7c7b\u578b\u4fdd\u5b58\u5728\u4e00\u4e2a\u7279\u6b8a\u7684dtype\u5bf9\u8c61\u4e2d\u3002\u6bd4\u5982\u8bf4\uff0c\u5728\u4e0a\u9762\u7684\u4e24\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u6709\uff1a In [27]: arr1.dtype Out[27]: dtype('float64') In [28]: arr2.dtype Out[28]: dtype('int64') \u9664np.array\u4e4b\u5916\uff0c\u8fd8\u6709\u4e00\u4e9b\u51fd\u6570\u4e5f\u53ef\u4ee5\u65b0\u5efa\u6570\u7ec4\u3002\u6bd4\u5982\uff0czeros\u548cones\u5206\u522b\u53ef\u4ee5\u521b\u5efa\u6307\u5b9a\u957f\u5ea6\u6216\u5f62\u72b6\u7684\u51680\u6216\u51681\u6570\u7ec4\u3002empty\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u6ca1\u6709\u4efb\u4f55\u5177\u4f53\u503c\u7684\u6570\u7ec4\u3002\u8981\u7528\u8fd9\u4e9b\u65b9\u6cd5\u521b\u5efa\u591a\u7ef4\u6570\u7ec4\uff0c\u53ea\u9700\u4f20\u5165\u4e00\u4e2a\u8868\u793a\u5f62\u72b6\u7684\u5143\u7ec4\u5373\u53ef\uff1a In [29]: np.zeros(10) Out[29]: array([ 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]) In [30]: np.zeros((3, 6)) Out[30]: array([[ 0., 0., 0., 0., 0., 0.], [ 0., 0., 0., 0., 0., 0.], [ 0., 0., 0., 0., 0., 0.]]) In [31]: np.empty((2, 3, 2)) Out[31]: array([[[ 0., 0.], [ 0., 0.], [ 0., 0.]], [[ 0., 0.], [ 0., 0.], [ 0., 0.]]]) \u6ce8\u610f\uff1a\u8ba4\u4e3anp.empty\u4f1a\u8fd4\u56de\u51680\u6570\u7ec4\u7684\u60f3\u6cd5\u662f\u4e0d\u5b89\u5168\u7684\u3002\u5f88\u591a\u60c5\u51b5\u4e0b\uff08\u5982\u524d\u6240\u793a\uff09\uff0c\u5b83\u8fd4\u56de\u7684\u90fd\u662f\u4e00\u4e9b\u672a\u521d\u59cb\u5316\u7684\u5783\u573e\u503c\u3002 arange\u662fPython\u5185\u7f6e\u51fd\u6570range\u7684\u6570\u7ec4\u7248\uff1a In [32]: np.arange(15) Out[32]: array([ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) \u88684-1\u5217\u51fa\u4e86\u4e00\u4e9b\u6570\u7ec4\u521b\u5efa\u51fd\u6570\u3002\u7531\u4e8eNumPy\u5173\u6ce8\u7684\u662f\u6570\u503c\u8ba1\u7b97\uff0c\u56e0\u6b64\uff0c\u5982\u679c\u6ca1\u6709\u7279\u522b\u6307\u5b9a\uff0c\u6570\u636e\u7c7b\u578b\u57fa\u672c\u90fd\u662ffloat64\uff08\u6d6e\u70b9\u6570\uff09\u3002","title":"\u521b\u5efandarray"},{"location":"NumPy_Basics/#ndarray_1","text":"dtype\uff08\u6570\u636e\u7c7b\u578b\uff09\u662f\u4e00\u4e2a\u7279\u6b8a\u7684\u5bf9\u8c61\uff0c\u5b83\u542b\u6709ndarray\u5c06\u4e00\u5757\u5185\u5b58\u89e3\u91ca\u4e3a\u7279\u5b9a\u6570\u636e\u7c7b\u578b\u6240\u9700\u7684\u4fe1\u606f\uff1a In [33]: arr1 = np.array([1, 2, 3], dtype=np.float64) In [34]: arr2 = np.array([1, 2, 3], dtype=np.int32) In [35]: arr1.dtype Out[35]: dtype('float64') In [36]: arr2.dtype Out[36]: dtype('int32') dtype\u662fNumPy\u7075\u6d3b\u4ea4\u4e92\u5176\u5b83\u7cfb\u7edf\u7684\u6e90\u6cc9\u4e4b\u4e00\u3002\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u5b83\u4eec\u76f4\u63a5\u6620\u5c04\u5230\u76f8\u5e94\u7684\u673a\u5668\u8868\u793a\uff0c\u8fd9\u4f7f\u5f97\u201c\u8bfb\u5199\u78c1\u76d8\u4e0a\u7684\u4e8c\u8fdb\u5236\u6570\u636e\u6d41\u201d\u4ee5\u53ca\u201c\u96c6\u6210\u4f4e\u7ea7\u8bed\u8a00\u4ee3\u7801\uff08\u5982C\u3001Fortran\uff09\u201d\u7b49\u5de5\u4f5c\u53d8\u5f97\u66f4\u52a0\u7b80\u5355\u3002\u6570\u503c\u578bdtype\u7684\u547d\u540d\u65b9\u5f0f\u76f8\u540c\uff1a\u4e00\u4e2a\u7c7b\u578b\u540d\uff08\u5982float\u6216int\uff09\uff0c\u540e\u9762\u8ddf\u4e00\u4e2a\u7528\u4e8e\u8868\u793a\u5404\u5143\u7d20\u4f4d\u957f\u7684\u6570\u5b57\u3002\u6807\u51c6\u7684\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u503c\uff08\u5373Python\u4e2d\u7684float\u5bf9\u8c61\uff09\u9700\u8981\u5360\u75288\u5b57\u8282\uff08\u537364\u4f4d\uff09\u3002\u56e0\u6b64\uff0c\u8be5\u7c7b\u578b\u5728NumPy\u4e2d\u5c31\u8bb0\u4f5cfloat64\u3002\u88684-2\u5217\u51fa\u4e86NumPy\u6240\u652f\u6301\u7684\u5168\u90e8\u6570\u636e\u7c7b\u578b\u3002 \u7b14\u8bb0\uff1a\u8bb0\u4e0d\u4f4f\u8fd9\u4e9bNumPy\u7684dtype\u4e5f\u6ca1\u5173\u7cfb\uff0c\u65b0\u624b\u66f4\u662f\u5982\u6b64\u3002\u901a\u5e38\u53ea\u9700\u8981\u77e5\u9053\u4f60\u6240\u5904\u7406\u7684\u6570\u636e\u7684\u5927\u81f4\u7c7b\u578b\u662f\u6d6e\u70b9\u6570\u3001\u590d\u6570\u3001\u6574\u6570\u3001\u5e03\u5c14\u503c\u3001\u5b57\u7b26\u4e32\uff0c\u8fd8\u662f\u666e\u901a\u7684Python\u5bf9\u8c61\u5373\u53ef\u3002\u5f53\u4f60\u9700\u8981\u63a7\u5236\u6570\u636e\u5728\u5185\u5b58\u548c\u78c1\u76d8\u4e2d\u7684\u5b58\u50a8\u65b9\u5f0f\u65f6\uff08\u5c24\u5176\u662f\u5bf9\u5927\u6570\u636e\u96c6\uff09\uff0c\u90a3\u5c31\u5f97\u4e86\u89e3\u5982\u4f55\u63a7\u5236\u5b58\u50a8\u7c7b\u578b\u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7ndarray\u7684astype\u65b9\u6cd5\u660e\u786e\u5730\u5c06\u4e00\u4e2a\u6570\u7ec4\u4ece\u4e00\u4e2adtype\u8f6c\u6362\u6210\u53e6\u4e00\u4e2adtype\uff1a In [37]: arr = np.array([1, 2, 3, 4, 5]) In [38]: arr.dtype Out[38]: dtype('int64') In [39]: float_arr = arr.astype(np.float64) In [40]: float_arr.dtype Out[40]: dtype('float64') \u5728\u672c\u4f8b\u4e2d\uff0c\u6574\u6570\u88ab\u8f6c\u6362\u6210\u4e86\u6d6e\u70b9\u6570\u3002\u5982\u679c\u5c06\u6d6e\u70b9\u6570\u8f6c\u6362\u6210\u6574\u6570\uff0c\u5219\u5c0f\u6570\u90e8\u5206\u5c06\u4f1a\u88ab\u622a\u53d6\u5220\u9664\uff1a In [41]: arr = np.array([3.7, -1.2, -2.6, 0.5, 12.9, 10.1]) In [42]: arr Out[42]: array([ 3.7, -1.2, -2.6, 0.5, 12.9, 10.1]) In [43]: arr.astype(np.int32) Out[43]: array([ 3, -1, -2, 0, 12, 10], dtype=int32) \u5982\u679c\u67d0\u5b57\u7b26\u4e32\u6570\u7ec4\u8868\u793a\u7684\u5168\u662f\u6570\u5b57\uff0c\u4e5f\u53ef\u4ee5\u7528astype\u5c06\u5176\u8f6c\u6362\u4e3a\u6570\u503c\u5f62\u5f0f\uff1a In [44]: numeric_strings = np.array(['1.25', '-9.6', '42'], dtype=np.string_) In [45]: numeric_strings.astype(float) Out[45]: array([ 1.25, -9.6 , 42. ]) \u6ce8\u610f\uff1a\u4f7f\u7528numpy.string_\u7c7b\u578b\u65f6\uff0c\u4e00\u5b9a\u8981\u5c0f\u5fc3\uff0c\u56e0\u4e3aNumPy\u7684\u5b57\u7b26\u4e32\u6570\u636e\u662f\u5927\u5c0f\u56fa\u5b9a\u7684\uff0c\u53d1\u751f\u622a\u53d6\u65f6\uff0c\u4e0d\u4f1a\u53d1\u51fa\u8b66\u544a\u3002pandas\u63d0\u4f9b\u4e86\u66f4\u591a\u975e\u6570\u503c\u6570\u636e\u7684\u4fbf\u5229\u7684\u5904\u7406\u65b9\u6cd5\u3002 \u5982\u679c\u8f6c\u6362\u8fc7\u7a0b\u56e0\u4e3a\u67d0\u79cd\u539f\u56e0\u800c\u5931\u8d25\u4e86\uff08\u6bd4\u5982\u67d0\u4e2a\u4e0d\u80fd\u88ab\u8f6c\u6362\u4e3afloat64\u7684\u5b57\u7b26\u4e32\uff09\uff0c\u5c31\u4f1a\u5f15\u53d1\u4e00\u4e2aValueError\u3002\u8fd9\u91cc\uff0c\u6211\u6bd4\u8f83\u61d2\uff0c\u5199\u7684\u662ffloat\u800c\u4e0d\u662fnp.float64\uff1bNumPy\u5f88\u806a\u660e\uff0c\u5b83\u4f1a\u5c06Python\u7c7b\u578b\u6620\u5c04\u5230\u7b49\u4ef7\u7684dtype\u4e0a\u3002 \u6570\u7ec4\u7684dtype\u8fd8\u6709\u53e6\u4e00\u4e2a\u5c5e\u6027\uff1a In [46]: int_array = np.arange(10) In [47]: calibers = np.array([.22, .270, .357, .380, .44, .50], dtype=np.float64) In [48]: int_array.astype(calibers.dtype) Out[48]: array([ 0., 1., 2., 3., 4., 5., 6., 7., 8., 9.]) \u4f60\u8fd8\u53ef\u4ee5\u7528\u7b80\u6d01\u7684\u7c7b\u578b\u4ee3\u7801\u6765\u8868\u793adtype\uff1a In [49]: empty_uint32 = np.empty(8, dtype='u4') In [50]: empty_uint32 Out[50]: array([ 0, 1075314688, 0, 1075707904, 0, 1075838976, 0, 1072693248], dtype=uint32) \u7b14\u8bb0\uff1a\u8c03\u7528astype\u603b\u4f1a\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u6570\u7ec4\uff08\u4e00\u4e2a\u6570\u636e\u7684\u5907\u4efd\uff09\uff0c\u5373\u4f7f\u65b0\u7684dtype\u4e0e\u65e7\u7684dtype\u76f8\u540c\u3002","title":"ndarray\u7684\u6570\u636e\u7c7b\u578b"},{"location":"NumPy_Basics/#numpy_1","text":"\u6570\u7ec4\u5f88\u91cd\u8981\uff0c\u56e0\u4e3a\u5b83\u4f7f\u4f60\u4e0d\u7528\u7f16\u5199\u5faa\u73af\u5373\u53ef\u5bf9\u6570\u636e\u6267\u884c\u6279\u91cf\u8fd0\u7b97\u3002NumPy\u7528\u6237\u79f0\u5176\u4e3a\u77e2\u91cf\u5316\uff08vectorization\uff09\u3002\u5927\u5c0f\u76f8\u7b49\u7684\u6570\u7ec4\u4e4b\u95f4\u7684\u4efb\u4f55\u7b97\u672f\u8fd0\u7b97\u90fd\u4f1a\u5c06\u8fd0\u7b97\u5e94\u7528\u5230\u5143\u7d20\u7ea7\uff1a In [51]: arr = np.array([[1., 2., 3.], [4., 5., 6.]]) In [52]: arr Out[52]: array([[ 1., 2., 3.], [ 4., 5., 6.]]) In [53]: arr * arr Out[53]: array([[ 1., 4., 9.], [ 16., 25., 36.]]) In [54]: arr - arr Out[54]: array([[ 0., 0., 0.], [ 0., 0., 0.]]) \u6570\u7ec4\u4e0e\u6807\u91cf\u7684\u7b97\u672f\u8fd0\u7b97\u4f1a\u5c06\u6807\u91cf\u503c\u4f20\u64ad\u5230\u5404\u4e2a\u5143\u7d20\uff1a In [55]: 1 / arr Out[55]: array([[ 1. , 0.5 , 0.3333], [ 0.25 , 0.2 , 0.1667]]) In [56]: arr ** 0.5 Out[56]: array([[ 1. , 1.4142, 1.7321], [ 2. , 2.2361, 2.4495]]) \u5927\u5c0f\u76f8\u540c\u7684\u6570\u7ec4\u4e4b\u95f4\u7684\u6bd4\u8f83\u4f1a\u751f\u6210\u5e03\u5c14\u503c\u6570\u7ec4\uff1a In [57]: arr2 = np.array([[0., 4., 1.], [7., 2., 12.]]) In [58]: arr2 Out[58]: array([[ 0., 4., 1.], [ 7., 2., 12.]]) In [59]: arr2 > arr Out[59]: array([[False, True, False], [ True, False, True]], dtype=bool) \u4e0d\u540c\u5927\u5c0f\u7684\u6570\u7ec4\u4e4b\u95f4\u7684\u8fd0\u7b97\u53eb\u505a\u5e7f\u64ad\uff08broadcasting\uff09\uff0c\u5c06\u5728\u9644\u5f55A\u4e2d\u5bf9\u5176\u8fdb\u884c\u8be6\u7ec6\u8ba8\u8bba\u3002\u672c\u4e66\u7684\u5185\u5bb9\u4e0d\u9700\u8981\u5bf9\u5e7f\u64ad\u673a\u5236\u6709\u591a\u6df1\u7684\u7406\u89e3\u3002","title":"NumPy\u6570\u7ec4\u7684\u8fd0\u7b97"},{"location":"NumPy_Basics/#_1","text":"NumPy\u6570\u7ec4\u7684\u7d22\u5f15\u662f\u4e00\u4e2a\u5185\u5bb9\u4e30\u5bcc\u7684\u4e3b\u9898\uff0c\u56e0\u4e3a\u9009\u53d6\u6570\u636e\u5b50\u96c6\u6216\u5355\u4e2a\u5143\u7d20\u7684\u65b9\u5f0f\u6709\u5f88\u591a\u3002\u4e00\u7ef4\u6570\u7ec4\u5f88\u7b80\u5355\u3002\u4ece\u8868\u9762\u4e0a\u770b\uff0c\u5b83\u4eec\u8ddfPython\u5217\u8868\u7684\u529f\u80fd\u5dee\u4e0d\u591a\uff1a In [60]: arr = np.arange(10) In [61]: arr Out[61]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) In [62]: arr[5] Out[62]: 5 In [63]: arr[5:8] Out[63]: array([5, 6, 7]) In [64]: arr[5:8] = 12 In [65]: arr Out[65]: array([ 0, 1, 2, 3, 4, 12, 12, 12, 8, 9]) \u5982\u4e0a\u6240\u793a\uff0c\u5f53\u4f60\u5c06\u4e00\u4e2a\u6807\u91cf\u503c\u8d4b\u503c\u7ed9\u4e00\u4e2a\u5207\u7247\u65f6\uff08\u5982arr[5:8]=12\uff09\uff0c\u8be5\u503c\u4f1a\u81ea\u52a8\u4f20\u64ad\uff08\u4e5f\u5c31\u8bf4\u540e\u9762\u5c06\u4f1a\u8bb2\u5230\u7684\u201c\u5e7f\u64ad\u201d\uff09\u5230\u6574\u4e2a\u9009\u533a\u3002\u8ddf\u5217\u8868\u6700\u91cd\u8981\u7684\u533a\u522b\u5728\u4e8e\uff0c\u6570\u7ec4\u5207\u7247\u662f\u539f\u59cb\u6570\u7ec4\u7684\u89c6\u56fe\u3002\u8fd9\u610f\u5473\u7740\u6570\u636e\u4e0d\u4f1a\u88ab\u590d\u5236\uff0c\u89c6\u56fe\u4e0a\u7684\u4efb\u4f55\u4fee\u6539\u90fd\u4f1a\u76f4\u63a5\u53cd\u6620\u5230\u6e90\u6570\u7ec4\u4e0a\u3002 \u4f5c\u4e3a\u4f8b\u5b50\uff0c\u5148\u521b\u5efa\u4e00\u4e2aarr\u7684\u5207\u7247\uff1a In [66]: arr_slice = arr[5:8] In [67]: arr_slice Out[67]: array([12, 12, 12]) \u73b0\u5728\uff0c\u5f53\u6211\u4fee\u7a3farr_slice\u4e2d\u7684\u503c\uff0c\u53d8\u52a8\u4e5f\u4f1a\u4f53\u73b0\u5728\u539f\u59cb\u6570\u7ec4arr\u4e2d\uff1a In [68]: arr_slice[1] = 12345 In [69]: arr Out[69]: array([ 0, 1, 2, 3, 4, 12, 12345, 12, 8, 9]) \u5207\u7247[ : ]\u4f1a\u7ed9\u6570\u7ec4\u4e2d\u7684\u6240\u6709\u503c\u8d4b\u503c\uff1a In [70]: arr_slice[:] = 64 In [71]: arr Out[71]: array([ 0, 1, 2, 3, 4, 64, 64, 64, 8, 9]) \u5982\u679c\u4f60\u521a\u5f00\u59cb\u63a5\u89e6NumPy\uff0c\u53ef\u80fd\u4f1a\u5bf9\u6b64\u611f\u5230\u60ca\u8bb6\uff08\u5c24\u5176\u662f\u5f53\u4f60\u66fe\u7ecf\u7528\u8fc7\u5176\u4ed6\u70ed\u8877\u4e8e\u590d\u5236\u6570\u7ec4\u6570\u636e\u7684\u7f16\u7a0b\u8bed\u8a00\uff09\u3002\u7531\u4e8eNumPy\u7684\u8bbe\u8ba1\u76ee\u7684\u662f\u5904\u7406\u5927\u6570\u636e\uff0c\u6240\u4ee5\u4f60\u53ef\u4ee5\u60f3\u8c61\u4e00\u4e0b\uff0c\u5047\u5982NumPy\u575a\u6301\u8981\u5c06\u6570\u636e\u590d\u5236\u6765\u590d\u5236\u53bb\u7684\u8bdd\u4f1a\u4ea7\u751f\u4f55\u7b49\u7684\u6027\u80fd\u548c\u5185\u5b58\u95ee\u9898\u3002 \u6ce8\u610f\uff1a\u5982\u679c\u4f60\u60f3\u8981\u5f97\u5230\u7684\u662fndarray\u5207\u7247\u7684\u4e00\u4efd\u526f\u672c\u800c\u975e\u89c6\u56fe\uff0c\u5c31\u9700\u8981\u660e\u786e\u5730\u8fdb\u884c\u590d\u5236\u64cd\u4f5c\uff0c\u4f8b\u5982 arr[5:8].copy() \u3002 \u5bf9\u4e8e\u9ad8\u7ef4\u5ea6\u6570\u7ec4\uff0c\u80fd\u505a\u7684\u4e8b\u60c5\u66f4\u591a\u3002\u5728\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u4e2d\uff0c\u5404\u7d22\u5f15\u4f4d\u7f6e\u4e0a\u7684\u5143\u7d20\u4e0d\u518d\u662f\u6807\u91cf\u800c\u662f\u4e00\u7ef4\u6570\u7ec4\uff1a In [72]: arr2d = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) In [73]: arr2d[2] Out[73]: array([7, 8, 9]) \u56e0\u6b64\uff0c\u53ef\u4ee5\u5bf9\u5404\u4e2a\u5143\u7d20\u8fdb\u884c\u9012\u5f52\u8bbf\u95ee\uff0c\u4f46\u8fd9\u6837\u9700\u8981\u505a\u7684\u4e8b\u60c5\u6709\u70b9\u591a\u3002\u4f60\u53ef\u4ee5\u4f20\u5165\u4e00\u4e2a\u4ee5\u9017\u53f7\u9694\u5f00\u7684\u7d22\u5f15\u5217\u8868\u6765\u9009\u53d6\u5355\u4e2a\u5143\u7d20\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e0b\u9762\u4e24\u79cd\u65b9\u5f0f\u662f\u7b49\u4ef7\u7684\uff1a In [74]: arr2d[0][2] Out[74]: 3 In [75]: arr2d[0, 2] Out[75]: 3 \u56fe4-1\u8bf4\u660e\u4e86\u4e8c\u7ef4\u6570\u7ec4\u7684\u7d22\u5f15\u65b9\u5f0f\u3002\u8f740\u4f5c\u4e3a\u884c\uff0c\u8f741\u4f5c\u4e3a\u5217\u3002 \u5728\u591a\u7ef4\u6570\u7ec4\u4e2d\uff0c\u5982\u679c\u7701\u7565\u4e86\u540e\u9762\u7684\u7d22\u5f15\uff0c\u5219\u8fd4\u56de\u5bf9\u8c61\u4f1a\u662f\u4e00\u4e2a\u7ef4\u5ea6\u4f4e\u4e00\u70b9\u7684ndarray\uff08\u5b83\u542b\u6709\u9ad8\u4e00\u7ea7\u7ef4\u5ea6\u4e0a\u7684\u6240\u6709\u6570\u636e\uff09\u3002\u56e0\u6b64\uff0c\u57282\u00d72\u00d73\u6570\u7ec4arr3d\u4e2d\uff1a In [76]: arr3d = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]]) In [77]: arr3d Out[77]: array([[[ 1, 2, 3], [ 4, 5, 6]], [[ 7, 8, 9], [10, 11, 12]]]) arr3d[0]\u662f\u4e00\u4e2a2\u00d73\u6570\u7ec4\uff1a In [78]: arr3d[0] Out[78]: array([[1, 2, 3], [4, 5, 6]]) \u6807\u91cf\u503c\u548c\u6570\u7ec4\u90fd\u53ef\u4ee5\u88ab\u8d4b\u503c\u7ed9arr3d[0]\uff1a In [79]: old_values = arr3d[0].copy() In [80]: arr3d[0] = 42 In [81]: arr3d Out[81]: array([[[42, 42, 42], [42, 42, 42]], [[ 7, 8, 9], [10, 11, 12]]]) In [82]: arr3d[0] = old_values In [83]: arr3d Out[83]: array([[[ 1, 2, 3], [ 4, 5, 6]], [[ 7, 8, 9], [10, 11, 12]]]) \u76f8\u4f3c\u7684\uff0carr3d[1,0]\u53ef\u4ee5\u8bbf\u95ee\u7d22\u5f15\u4ee5(1,0)\u5f00\u5934\u7684\u90a3\u4e9b\u503c\uff08\u4ee5\u4e00\u7ef4\u6570\u7ec4\u7684\u5f62\u5f0f\u8fd4\u56de\uff09\uff1a In [84]: arr3d[1, 0] Out[84]: array([7, 8, 9]) \u867d\u7136\u662f\u7528\u4e24\u6b65\u8fdb\u884c\u7d22\u5f15\u7684\uff0c\u8868\u8fbe\u5f0f\u662f\u76f8\u540c\u7684\uff1a In [85]: x = arr3d[1] In [86]: x Out[86]: array([[ 7, 8, 9], [10, 11, 12]]) In [87]: x[0] Out[87]: array([7, 8, 9]) \u6ce8\u610f\uff0c\u5728\u4e0a\u9762\u6240\u6709\u8fd9\u4e9b\u9009\u53d6\u6570\u7ec4\u5b50\u96c6\u7684\u4f8b\u5b50\u4e2d\uff0c\u8fd4\u56de\u7684\u6570\u7ec4\u90fd\u662f\u89c6\u56fe\u3002","title":"\u57fa\u672c\u7684\u7d22\u5f15\u548c\u5207\u7247"},{"location":"NumPy_Basics/#_2","text":"ndarray\u7684\u5207\u7247\u8bed\u6cd5\u8ddfPython\u5217\u8868\u8fd9\u6837\u7684\u4e00\u7ef4\u5bf9\u8c61\u5dee\u4e0d\u591a\uff1a In [88]: arr Out[88]: array([ 0, 1, 2, 3, 4, 64, 64, 64, 8, 9]) In [89]: arr[1:6] Out[89]: array([ 1, 2, 3, 4, 64]) \u5bf9\u4e8e\u4e4b\u524d\u7684\u4e8c\u7ef4\u6570\u7ec4arr2d\uff0c\u5176\u5207\u7247\u65b9\u5f0f\u7a0d\u663e\u4e0d\u540c\uff1a In [90]: arr2d Out[90]: array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) In [91]: arr2d[:2] Out[91]: array([[1, 2, 3], [4, 5, 6]]) \u53ef\u4ee5\u770b\u51fa\uff0c\u5b83\u662f\u6cbf\u7740\u7b2c0\u8f74\uff08\u5373\u7b2c\u4e00\u4e2a\u8f74\uff09\u5207\u7247\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5207\u7247\u662f\u6cbf\u7740\u4e00\u4e2a\u8f74\u5411\u9009\u53d6\u5143\u7d20\u7684\u3002\u8868\u8fbe\u5f0farr2d[:2]\u53ef\u4ee5\u88ab\u8ba4\u4e3a\u662f\u201c\u9009\u53d6arr2d\u7684\u524d\u4e24\u884c\u201d\u3002 \u4f60\u53ef\u4ee5\u4e00\u6b21\u4f20\u5165\u591a\u4e2a\u5207\u7247\uff0c\u5c31\u50cf\u4f20\u5165\u591a\u4e2a\u7d22\u5f15\u90a3\u6837\uff1a In [92]: arr2d[:2, 1:] Out[92]: array([[2, 3], [5, 6]]) \u50cf\u8fd9\u6837\u8fdb\u884c\u5207\u7247\u65f6\uff0c\u53ea\u80fd\u5f97\u5230\u76f8\u540c\u7ef4\u6570\u7684\u6570\u7ec4\u89c6\u56fe\u3002\u901a\u8fc7\u5c06\u6574\u6570\u7d22\u5f15\u548c\u5207\u7247\u6df7\u5408\uff0c\u53ef\u4ee5\u5f97\u5230\u4f4e\u7ef4\u5ea6\u7684\u5207\u7247\u3002 \u4f8b\u5982\uff0c\u6211\u53ef\u4ee5\u9009\u53d6\u7b2c\u4e8c\u884c\u7684\u524d\u4e24\u5217\uff1a In [93]: arr2d[1, :2] Out[93]: array([4, 5]) \u76f8\u4f3c\u7684\uff0c\u8fd8\u53ef\u4ee5\u9009\u62e9\u7b2c\u4e09\u5217\u7684\u524d\u4e24\u884c\uff1a In [94]: arr2d[:2, 2] Out[94]: array([3, 6]) \u56fe4-2\u5bf9\u6b64\u8fdb\u884c\u4e86\u8bf4\u660e\u3002\u6ce8\u610f\uff0c\u201c\u53ea\u6709\u5192\u53f7\u201d\u8868\u793a\u9009\u53d6\u6574\u4e2a\u8f74\uff0c\u56e0\u6b64\u4f60\u53ef\u4ee5\u50cf\u4e0b\u9762\u8fd9\u6837\u53ea\u5bf9\u9ad8\u7ef4\u8f74\u8fdb\u884c\u5207\u7247\uff1a In [95]: arr2d[:, :1] Out[95]: array([[1], [4], [7]]) \u81ea\u7136\uff0c\u5bf9\u5207\u7247\u8868\u8fbe\u5f0f\u7684\u8d4b\u503c\u64cd\u4f5c\u4e5f\u4f1a\u88ab\u6269\u6563\u5230\u6574\u4e2a\u9009\u533a\uff1a In [96]: arr2d[:2, 1:] = 0 In [97]: arr2d Out[97]: array([[1, 0, 0], [4, 0, 0], [7, 8, 9]])","title":"\u5207\u7247\u7d22\u5f15"},{"location":"NumPy_Basics/#_3","text":"\u6765\u770b\u8fd9\u6837\u4e00\u4e2a\u4f8b\u5b50\uff0c\u5047\u8bbe\u6211\u4eec\u6709\u4e00\u4e2a\u7528\u4e8e\u5b58\u50a8\u6570\u636e\u7684\u6570\u7ec4\u4ee5\u53ca\u4e00\u4e2a\u5b58\u50a8\u59d3\u540d\u7684\u6570\u7ec4\uff08\u542b\u6709\u91cd\u590d\u9879\uff09\u3002\u5728\u8fd9\u91cc\uff0c\u6211\u5c06\u4f7f\u7528numpy.random\u4e2d\u7684randn\u51fd\u6570\u751f\u6210\u4e00\u4e9b\u6b63\u6001\u5206\u5e03\u7684\u968f\u673a\u6570\u636e\uff1a In [98]: names = np.array(['Bob', 'Joe', 'Will', 'Bob', 'Will', 'Joe', 'Joe']) In [99]: data = np.random.randn(7, 4) In [100]: names Out[100]: array(['Bob', 'Joe', 'Will', 'Bob', 'Will', 'Joe', 'Joe'], dtype='<U4') In [101]: data Out[101]: array([[ 0.0929, 0.2817, 0.769 , 1.2464], [ 1.0072, -1.2962, 0.275 , 0.2289], [ 1.3529, 0.8864, -2.0016, -0.3718], [ 1.669 , -0.4386, -0.5397, 0.477 ], [ 3.2489, -1.0212, -0.5771, 0.1241], [ 0.3026, 0.5238, 0.0009, 1.3438], [-0.7135, -0.8312, -2.3702, -1.8608]]) \u5047\u8bbe\u6bcf\u4e2a\u540d\u5b57\u90fd\u5bf9\u5e94data\u6570\u7ec4\u4e2d\u7684\u4e00\u884c\uff0c\u800c\u6211\u4eec\u60f3\u8981\u9009\u51fa\u5bf9\u5e94\u4e8e\u540d\u5b57\"Bob\"\u7684\u6240\u6709\u884c\u3002\u8ddf\u7b97\u672f\u8fd0\u7b97\u4e00\u6837\uff0c\u6570\u7ec4\u7684\u6bd4\u8f83\u8fd0\u7b97\uff08\u5982==\uff09\u4e5f\u662f\u77e2\u91cf\u5316\u7684\u3002\u56e0\u6b64\uff0c\u5bf9names\u548c\u5b57\u7b26\u4e32\"Bob\"\u7684\u6bd4\u8f83\u8fd0\u7b97\u5c06\u4f1a\u4ea7\u751f\u4e00\u4e2a\u5e03\u5c14\u578b\u6570\u7ec4\uff1a In [102]: names == 'Bob' Out[102]: array([ True, False, False, True, False, False, False], dtype=bool) \u8fd9\u4e2a\u5e03\u5c14\u578b\u6570\u7ec4\u53ef\u7528\u4e8e\u6570\u7ec4\u7d22\u5f15\uff1a In [103]: data[names == 'Bob'] Out[103]: array([[ 0.0929, 0.2817, 0.769 , 1.2464], [ 1.669 , -0.4386, -0.5397, 0.477 ]]) \u5e03\u5c14\u578b\u6570\u7ec4\u7684\u957f\u5ea6\u5fc5\u987b\u8ddf\u88ab\u7d22\u5f15\u7684\u8f74\u957f\u5ea6\u4e00\u81f4\u3002\u6b64\u5916\uff0c\u8fd8\u53ef\u4ee5\u5c06\u5e03\u5c14\u578b\u6570\u7ec4\u8ddf\u5207\u7247\u3001\u6574\u6570\uff08\u6216\u6574\u6570\u5e8f\u5217\uff0c\u7a0d\u540e\u5c06\u5bf9\u6b64\u8fdb\u884c\u8be6\u7ec6\u8bb2\u89e3\uff09\u6df7\u5408\u4f7f\u7528\uff1a In [103]: data[names == 'Bob'] Out[103]: array([[ 0.0929, 0.2817, 0.769 , 1.2464], [ 1.669 , -0.4386, -0.5397, 0.477 ]]) \u6ce8\u610f\uff1a\u5982\u679c\u5e03\u5c14\u578b\u6570\u7ec4\u7684\u957f\u5ea6\u4e0d\u5bf9\uff0c\u5e03\u5c14\u578b\u9009\u62e9\u5c31\u4f1a\u51fa\u9519\uff0c\u56e0\u6b64\u4e00\u5b9a\u8981\u5c0f\u5fc3\u3002 \u4e0b\u9762\u7684\u4f8b\u5b50\uff0c\u6211\u9009\u53d6\u4e86 names == 'Bob' \u7684\u884c\uff0c\u5e76\u7d22\u5f15\u4e86\u5217\uff1a In [104]: data[names == 'Bob', 2:] Out[104]: array([[ 0.769 , 1.2464], [-0.5397, 0.477 ]]) In [105]: data[names == 'Bob', 3] Out[105]: array([ 1.2464, 0.477 ]) \u8981\u9009\u62e9\u9664\"Bob\"\u4ee5\u5916\u7684\u5176\u4ed6\u503c\uff0c\u65e2\u53ef\u4ee5\u4f7f\u7528\u4e0d\u7b49\u4e8e\u7b26\u53f7\uff08!=\uff09\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7~\u5bf9\u6761\u4ef6\u8fdb\u884c\u5426\u5b9a\uff1a In [106]: names != 'Bob' Out[106]: array([False, True, True, False, True, True, True], dtype=bool) In [107]: data[~(names == 'Bob')] Out[107]: array([[ 1.0072, -1.2962, 0.275 , 0.2289], [ 1.3529, 0.8864, -2.0016, -0.3718], [ 3.2489, -1.0212, -0.5771, 0.1241], [ 0.3026, 0.5238, 0.0009, 1.3438], [-0.7135, -0.8312, -2.3702, -1.8608]]) ~\u64cd\u4f5c\u7b26\u7528\u6765\u53cd\u8f6c\u6761\u4ef6\u5f88\u597d\u7528\uff1a In [108]: cond = names == 'Bob' In [109]: data[~cond] Out[109]: array([[ 1.0072, -1.2962, 0.275 , 0.2289], [ 1.3529, 0.8864, -2.0016, -0.3718], [ 3.2489, -1.0212, -0.5771, 0.1241], [ 0.3026, 0.5238, 0.0009, 1.3438], [-0.7135, -0.8312, -2.3702, -1.8608]]) \u9009\u53d6\u8fd9\u4e09\u4e2a\u540d\u5b57\u4e2d\u7684\u4e24\u4e2a\u9700\u8981\u7ec4\u5408\u5e94\u7528\u591a\u4e2a\u5e03\u5c14\u6761\u4ef6\uff0c\u4f7f\u7528&\uff08\u548c\uff09\u3001|\uff08\u6216\uff09\u4e4b\u7c7b\u7684\u5e03\u5c14\u7b97\u672f\u8fd0\u7b97\u7b26\u5373\u53ef\uff1a In [110]: mask = (names == 'Bob') | (names == 'Will') In [111]: mask Out[111]: array([ True, False, True, True, True, False, False], dtype=bool) In [112]: data[mask] Out[112]: array([[ 0.0929, 0.2817, 0.769 , 1.2464], [ 1.3529, 0.8864, -2.0016, -0.3718], [ 1.669 , -0.4386, -0.5397, 0.477 ], [ 3.2489, -1.0212, -0.5771, 0.1241]]) \u901a\u8fc7\u5e03\u5c14\u578b\u7d22\u5f15\u9009\u53d6\u6570\u7ec4\u4e2d\u7684\u6570\u636e\uff0c\u5c06\u603b\u662f\u521b\u5efa\u6570\u636e\u7684\u526f\u672c\uff0c\u5373\u4f7f\u8fd4\u56de\u4e00\u6a21\u4e00\u6837\u7684\u6570\u7ec4\u4e5f\u662f\u5982\u6b64\u3002 \u6ce8\u610f\uff1aPython\u5173\u952e\u5b57and\u548cor\u5728\u5e03\u5c14\u578b\u6570\u7ec4\u4e2d\u65e0\u6548\u3002\u8981\u4f7f\u7528&\u4e0e|\u3002 \u901a\u8fc7\u5e03\u5c14\u578b\u6570\u7ec4\u8bbe\u7f6e\u503c\u662f\u4e00\u79cd\u7ecf\u5e38\u7528\u5230\u7684\u624b\u6bb5\u3002\u4e3a\u4e86\u5c06data\u4e2d\u7684\u6240\u6709\u8d1f\u503c\u90fd\u8bbe\u7f6e\u4e3a0\uff0c\u6211\u4eec\u53ea\u9700\uff1a In [113]: data[data < 0] = 0 In [114]: data Out[114]: array([[ 0.0929, 0.2817, 0.769 , 1.2464], [ 1.0072, 0. , 0.275 , 0.2289], [ 1.3529, 0.8864, 0. , 0. ], [ 1.669 , 0. , 0. , 0.477 ], [ 3.2489, 0. , 0. , 0.1241], [ 0.3026, 0.5238, 0.0009, 1.3438], [ 0. , 0. , 0. , 0. ]]) \u901a\u8fc7\u4e00\u7ef4\u5e03\u5c14\u6570\u7ec4\u8bbe\u7f6e\u6574\u884c\u6216\u5217\u7684\u503c\u4e5f\u5f88\u7b80\u5355\uff1a In [115]: data[names != 'Joe'] = 7 In [116]: data Out[116]: array([[ 7. , 7. , 7. , 7. ], [ 1.0072, 0. , 0.275 , 0.2289], [ 7. , 7. , 7. , 7. ], [ 7. , 7. , 7. , 7. ], [ 7. , 7. , 7. , 7. ], [ 0.3026, 0.5238, 0.0009, 1.3438], [ 0. , 0. , 0. , 0. ]]) \u540e\u9762\u4f1a\u770b\u5230\uff0c\u8fd9\u7c7b\u4e8c\u7ef4\u6570\u636e\u7684\u64cd\u4f5c\u4e5f\u53ef\u4ee5\u7528pandas\u65b9\u4fbf\u7684\u6765\u505a\u3002","title":"\u5e03\u5c14\u578b\u7d22\u5f15"},{"location":"NumPy_Basics/#_4","text":"\u82b1\u5f0f\u7d22\u5f15\uff08Fancy indexing\uff09\u662f\u4e00\u4e2aNumPy\u672f\u8bed\uff0c\u5b83\u6307\u7684\u662f\u5229\u7528\u6574\u6570\u6570\u7ec4\u8fdb\u884c\u7d22\u5f15\u3002\u5047\u8bbe\u6211\u4eec\u6709\u4e00\u4e2a8\u00d74\u6570\u7ec4\uff1a In [117]: arr = np.empty((8, 4)) In [118]: for i in range(8): .....: arr[i] = i In [119]: arr Out[119]: array([[ 0., 0., 0., 0.], [ 1., 1., 1., 1.], [ 2., 2., 2., 2.], [ 3., 3., 3., 3.], [ 4., 4., 4., 4.], [ 5., 5., 5., 5.], [ 6., 6., 6., 6.], [ 7., 7., 7., 7.]]) \u4e3a\u4e86\u4ee5\u7279\u5b9a\u987a\u5e8f\u9009\u53d6\u884c\u5b50\u96c6\uff0c\u53ea\u9700\u4f20\u5165\u4e00\u4e2a\u7528\u4e8e\u6307\u5b9a\u987a\u5e8f\u7684\u6574\u6570\u5217\u8868\u6216ndarray\u5373\u53ef\uff1a In [120]: arr[[4, 3, 0, 6]] Out[120]: array([[ 4., 4., 4., 4.], [ 3., 3., 3., 3.], [ 0., 0., 0., 0.], [ 6., 6., 6., 6.]]) \u8fd9\u6bb5\u4ee3\u7801\u786e\u5b9e\u8fbe\u5230\u6211\u4eec\u7684\u8981\u6c42\u4e86\uff01\u4f7f\u7528\u8d1f\u6570\u7d22\u5f15\u5c06\u4f1a\u4ece\u672b\u5c3e\u5f00\u59cb\u9009\u53d6\u884c\uff1a In [121]: arr[[-3, -5, -7]] Out[121]: array([[ 5., 5., 5., 5.], [ 3., 3., 3., 3.], [ 1., 1., 1., 1.]]) \u4e00\u6b21\u4f20\u5165\u591a\u4e2a\u7d22\u5f15\u6570\u7ec4\u4f1a\u6709\u4e00\u70b9\u7279\u522b\u3002\u5b83\u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u4e00\u7ef4\u6570\u7ec4\uff0c\u5176\u4e2d\u7684\u5143\u7d20\u5bf9\u5e94\u5404\u4e2a\u7d22\u5f15\u5143\u7ec4\uff1a In [122]: arr = np.arange(32).reshape((8, 4)) In [123]: arr Out[123]: array([[ 0, 1, 2, 3], [ 4, 5, 6, 7], [ 8, 9, 10, 11], [12, 13, 14, 15], [16, 17, 18, 19], [20, 21, 22, 23], [24, 25, 26, 27], [28, 29, 30, 31]]) In [124]: arr[[1, 5, 7, 2], [0, 3, 1, 2]] Out[124]: array([ 4, 23, 29, 10]) \u9644\u5f55A\u4e2d\u4f1a\u8be6\u7ec6\u4ecb\u7ecdreshape\u65b9\u6cd5\u3002 \u6700\u7ec8\u9009\u51fa\u7684\u662f\u5143\u7d20(1,0)\u3001(5,3)\u3001(7,1)\u548c(2,2)\u3002\u65e0\u8bba\u6570\u7ec4\u662f\u591a\u5c11\u7ef4\u7684\uff0c\u82b1\u5f0f\u7d22\u5f15\u603b\u662f\u4e00\u7ef4\u7684\u3002 \u8fd9\u4e2a\u82b1\u5f0f\u7d22\u5f15\u7684\u884c\u4e3a\u53ef\u80fd\u4f1a\u8ddf\u67d0\u4e9b\u7528\u6237\u7684\u9884\u671f\u4e0d\u4e00\u6837\uff08\u5305\u62ec\u6211\u5728\u5185\uff09\uff0c\u9009\u53d6\u77e9\u9635\u7684\u884c\u5217\u5b50\u96c6\u5e94\u8be5\u662f\u77e9\u5f62\u533a\u57df\u7684\u5f62\u5f0f\u624d\u5bf9\u3002\u4e0b\u9762\u662f\u5f97\u5230\u8be5\u7ed3\u679c\u7684\u4e00\u4e2a\u529e\u6cd5\uff1a In [125]: arr[[1, 5, 7, 2]][:, [0, 3, 1, 2]] Out[125]: array([[ 4, 7, 5, 6], [20, 23, 21, 22], [28, 31, 29, 30], [ 8, 11, 9, 10]]) \u8bb0\u4f4f\uff0c\u82b1\u5f0f\u7d22\u5f15\u8ddf\u5207\u7247\u4e0d\u4e00\u6837\uff0c\u5b83\u603b\u662f\u5c06\u6570\u636e\u590d\u5236\u5230\u65b0\u6570\u7ec4\u4e2d\u3002","title":"\u82b1\u5f0f\u7d22\u5f15"},{"location":"NumPy_Basics/#_5","text":"\u8f6c\u7f6e\u662f\u91cd\u5851\u7684\u4e00\u79cd\u7279\u6b8a\u5f62\u5f0f\uff0c\u5b83\u8fd4\u56de\u7684\u662f\u6e90\u6570\u636e\u7684\u89c6\u56fe\uff08\u4e0d\u4f1a\u8fdb\u884c\u4efb\u4f55\u590d\u5236\u64cd\u4f5c\uff09\u3002\u6570\u7ec4\u4e0d\u4ec5\u6709transpose\u65b9\u6cd5\uff0c\u8fd8\u6709\u4e00\u4e2a\u7279\u6b8a\u7684T\u5c5e\u6027\uff1a In [126]: arr = np.arange(15).reshape((3, 5)) In [127]: arr Out[127]: array([[ 0, 1, 2, 3, 4], [ 5, 6, 7, 8, 9], [10, 11, 12, 13, 14]]) In [128]: arr.T Out[128]: array([[ 0, 5, 10], [ 1, 6, 11], [ 2, 7, 12], [ 3, 8, 13], [ 4, 9, 14]]) \u5728\u8fdb\u884c\u77e9\u9635\u8ba1\u7b97\u65f6\uff0c\u7ecf\u5e38\u9700\u8981\u7528\u5230\u8be5\u64cd\u4f5c\uff0c\u6bd4\u5982\u5229\u7528np.dot\u8ba1\u7b97\u77e9\u9635\u5185\u79ef\uff1a In [129]: arr = np.random.randn(6, 3) In [130]: arr Out[130]: array([[-0.8608, 0.5601, -1.2659], [ 0.1198, -1.0635, 0.3329], [-2.3594, -0.1995, -1.542 ], [-0.9707, -1.307 , 0.2863], [ 0.378 , -0.7539, 0.3313], [ 1.3497, 0.0699, 0.2467]]) In [131]: np.dot(arr.T, arr) Out[131]: array([[ 9.2291, 0.9394, 4.948 ], [ 0.9394, 3.7662, -1.3622], [ 4.948 , -1.3622, 4.3437]]) \u5bf9\u4e8e\u9ad8\u7ef4\u6570\u7ec4\uff0ctranspose\u9700\u8981\u5f97\u5230\u4e00\u4e2a\u7531\u8f74\u7f16\u53f7\u7ec4\u6210\u7684\u5143\u7ec4\u624d\u80fd\u5bf9\u8fd9\u4e9b\u8f74\u8fdb\u884c\u8f6c\u7f6e\uff08\u6bd4\u8f83\u8d39\u8111\u5b50\uff09\uff1a In [132]: arr = np.arange(16).reshape((2, 2, 4)) In [133]: arr Out[133]: array([[[ 0, 1, 2, 3], [ 4, 5, 6, 7]], [[ 8, 9, 10, 11], [12, 13, 14, 15]]]) In [134]: arr.transpose((1, 0, 2)) Out[134]: array([[[ 0, 1, 2, 3], [ 8, 9, 10, 11]], [[ 4, 5, 6, 7], [12, 13, 14, 15]]]) \u8fd9\u91cc\uff0c\u7b2c\u4e00\u4e2a\u8f74\u88ab\u6362\u6210\u4e86\u7b2c\u4e8c\u4e2a\uff0c\u7b2c\u4e8c\u4e2a\u8f74\u88ab\u6362\u6210\u4e86\u7b2c\u4e00\u4e2a\uff0c\u6700\u540e\u4e00\u4e2a\u8f74\u4e0d\u53d8\u3002 \u7b80\u5355\u7684\u8f6c\u7f6e\u53ef\u4ee5\u4f7f\u7528.T\uff0c\u5b83\u5176\u5b9e\u5c31\u662f\u8fdb\u884c\u8f74\u5bf9\u6362\u800c\u5df2\u3002ndarray\u8fd8\u6709\u4e00\u4e2aswapaxes\u65b9\u6cd5\uff0c\u5b83\u9700\u8981\u63a5\u53d7\u4e00\u5bf9\u8f74\u7f16\u53f7\uff1a In [135]: arr Out[135]: array([[[ 0, 1, 2, 3], [ 4, 5, 6, 7]], [[ 8, 9, 10, 11], [12, 13, 14, 15]]]) In [136]: arr.swapaxes(1, 2) Out[136]: array([[[ 0, 4], [ 1, 5], [ 2, 6], [ 3, 7]], [[ 8, 12], [ 9, 13], [10, 14], [11, 15]]]) swapaxes\u4e5f\u662f\u8fd4\u56de\u6e90\u6570\u636e\u7684\u89c6\u56fe\uff08\u4e0d\u4f1a\u8fdb\u884c\u4efb\u4f55\u590d\u5236\u64cd\u4f5c\uff09\u3002","title":"\u6570\u7ec4\u8f6c\u7f6e\u548c\u8f74\u5bf9\u6362"},{"location":"NumPy_Basics/#_6","text":"\u901a\u7528\u51fd\u6570\uff08\u5373ufunc\uff09\u662f\u4e00\u79cd\u5bf9ndarray\u4e2d\u7684\u6570\u636e\u6267\u884c\u5143\u7d20\u7ea7\u8fd0\u7b97\u7684\u51fd\u6570\u3002\u4f60\u53ef\u4ee5\u5c06\u5176\u770b\u505a\u7b80\u5355\u51fd\u6570\uff08\u63a5\u53d7\u4e00\u4e2a\u6216\u591a\u4e2a\u6807\u91cf\u503c\uff0c\u5e76\u4ea7\u751f\u4e00\u4e2a\u6216\u591a\u4e2a\u6807\u91cf\u503c\uff09\u7684\u77e2\u91cf\u5316\u5305\u88c5\u5668\u3002 \u8bb8\u591aufunc\u90fd\u662f\u7b80\u5355\u7684\u5143\u7d20\u7ea7\u53d8\u4f53\uff0c\u5982sqrt\u548cexp\uff1a In [137]: arr = np.arange(10) In [138]: arr Out[138]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) In [139]: np.sqrt(arr) Out[139]: array([ 0. , 1. , 1.4142, 1.7321, 2. , 2.2361, 2.4495, 2.6458, 2.8284, 3. ]) In [140]: np.exp(arr) Out[140]: array([ 1. , 2.7183, 7.3891, 20.0855, 54.5982, 148.4132, 403.4288, 1096.6332, 2980.958 , 8103.0839]) \u8fd9\u4e9b\u90fd\u662f\u4e00\u5143\uff08unary\uff09ufunc\u3002\u53e6\u5916\u4e00\u4e9b\uff08\u5982add\u6216maximum\uff09\u63a5\u53d72\u4e2a\u6570\u7ec4\uff08\u56e0\u6b64\u4e5f\u53eb\u4e8c\u5143\uff08binary\uff09ufunc\uff09\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u7ed3\u679c\u6570\u7ec4\uff1a In [141]: x = np.random.randn(8) In [142]: y = np.random.randn(8) In [143]: x Out[143]: array([-0.0119, 1.0048, 1.3272, -0.9193, -1.5491, 0.0222, 0.7584, -0.6605]) In [144]: y Out[144]: array([ 0.8626, -0.01 , 0.05 , 0.6702, 0.853 , -0.9559, -0.0235, -2.3042]) In [145]: np.maximum(x, y) Out[145]: array([ 0.8626, 1.0048, 1.3272, 0.6702, 0.853 , 0.0222, 0.7584, -0.6605]) \u8fd9\u91cc\uff0cnumpy.maximum\u8ba1\u7b97\u4e86x\u548cy\u4e2d\u5143\u7d20\u7ea7\u522b\u6700\u5927\u7684\u5143\u7d20\u3002 \u867d\u7136\u5e76\u4e0d\u5e38\u89c1\uff0c\u4f46\u6709\u4e9bufunc\u7684\u786e\u53ef\u4ee5\u8fd4\u56de\u591a\u4e2a\u6570\u7ec4\u3002modf\u5c31\u662f\u4e00\u4e2a\u4f8b\u5b50\uff0c\u5b83\u662fPython\u5185\u7f6e\u51fd\u6570divmod\u7684\u77e2\u91cf\u5316\u7248\u672c\uff0c\u5b83\u4f1a\u8fd4\u56de\u6d6e\u70b9\u6570\u6570\u7ec4\u7684\u5c0f\u6570\u548c\u6574\u6570\u90e8\u5206\uff1a In [146]: arr = np.random.randn(7) * 5 In [147]: arr Out[147]: array([-3.2623, -6.0915, -6.663 , 5.3731, 3.6182, 3.45 , 5.0077]) In [148]: remainder, whole_part = np.modf(arr) In [149]: remainder Out[149]: array([-0.2623, -0.0915, -0.663 , 0.3731, 0.6182, 0.45 , 0.0077]) In [150]: whole_part Out[150]: array([-3., -6., -6., 5., 3., 3., 5.]) Ufuncs\u53ef\u4ee5\u63a5\u53d7\u4e00\u4e2aout\u53ef\u9009\u53c2\u6570\uff0c\u8fd9\u6837\u5c31\u80fd\u5728\u6570\u7ec4\u539f\u5730\u8fdb\u884c\u64cd\u4f5c\uff1a In [151]: arr Out[151]: array([-3.2623, -6.0915, -6.663 , 5.3731, 3.6182, 3.45 , 5.0077]) In [152]: np.sqrt(arr) Out[152]: array([ nan, nan, nan, 2.318 , 1.9022, 1.8574, 2.2378]) In [153]: np.sqrt(arr, arr) Out[153]: array([ nan, nan, nan, 2.318 , 1.9022, 1.8574, 2.2378]) In [154]: arr Out[154]: array([ nan, nan, nan, 2.318 , 1.9022, 1.8574, 2.2378]) \u88684-3\u548c\u88684-4\u5206\u522b\u5217\u51fa\u4e86\u4e00\u4e9b\u4e00\u5143\u548c\u4e8c\u5143ufunc\u3002","title":"\u901a\u7528\u51fd\u6570\uff1a\u5feb\u901f\u7684\u5143\u7d20\u7ea7\u6570\u7ec4\u51fd\u6570"},{"location":"NumPy_Basics/#_7","text":"NumPy\u6570\u7ec4\u4f7f\u4f60\u53ef\u4ee5\u5c06\u8bb8\u591a\u79cd\u6570\u636e\u5904\u7406\u4efb\u52a1\u8868\u8ff0\u4e3a\u7b80\u6d01\u7684\u6570\u7ec4\u8868\u8fbe\u5f0f\uff08\u5426\u5219\u9700\u8981\u7f16\u5199\u5faa\u73af\uff09\u3002\u7528\u6570\u7ec4\u8868\u8fbe\u5f0f\u4ee3\u66ff\u5faa\u73af\u7684\u505a\u6cd5\uff0c\u901a\u5e38\u88ab\u79f0\u4e3a\u77e2\u91cf\u5316\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u77e2\u91cf\u5316\u6570\u7ec4\u8fd0\u7b97\u8981\u6bd4\u7b49\u4ef7\u7684\u7eafPython\u65b9\u5f0f\u5feb\u4e0a\u4e00\u4e24\u4e2a\u6570\u91cf\u7ea7\uff08\u751a\u81f3\u66f4\u591a\uff09\uff0c\u5c24\u5176\u662f\u5404\u79cd\u6570\u503c\u8ba1\u7b97\u3002\u5728\u540e\u9762\u5185\u5bb9\u4e2d\uff08\u89c1\u9644\u5f55A\uff09\u6211\u5c06\u4ecb\u7ecd\u5e7f\u64ad\uff0c\u8fd9\u662f\u4e00\u79cd\u9488\u5bf9\u77e2\u91cf\u5316\u8ba1\u7b97\u7684\u5f3a\u5927\u624b\u6bb5\u3002 \u4f5c\u4e3a\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u5047\u8bbe\u6211\u4eec\u60f3\u8981\u5728\u4e00\u7ec4\u503c\uff08\u7f51\u683c\u578b\uff09\u4e0a\u8ba1\u7b97\u51fd\u6570 sqrt(x^2+y^2) \u3002np.meshgrid\u51fd\u6570\u63a5\u53d7\u4e24\u4e2a\u4e00\u7ef4\u6570\u7ec4\uff0c\u5e76\u4ea7\u751f\u4e24\u4e2a\u4e8c\u7ef4\u77e9\u9635\uff08\u5bf9\u5e94\u4e8e\u4e24\u4e2a\u6570\u7ec4\u4e2d\u6240\u6709\u7684(x,y)\u5bf9\uff09\uff1a In [155]: points = np.arange(-5, 5, 0.01) # 1000 equally spaced points In [156]: xs, ys = np.meshgrid(points, points) In [157]: ys Out[157]: array([[-5. , -5. , -5. , ..., -5. , -5. , -5. ], [-4.99, -4.99, -4.99, ..., -4.99, -4.99, -4.99], [-4.98, -4.98, -4.98, ..., -4.98, -4.98, -4.98], ..., [ 4.97, 4.97, 4.97, ..., 4.97, 4.97, 4.97], [ 4.98, 4.98, 4.98, ..., 4.98, 4.98, 4.98], [ 4.99, 4.99, 4.99, ..., 4.99, 4.99, 4.99]]) \u73b0\u5728\uff0c\u5bf9\u8be5\u51fd\u6570\u7684\u6c42\u503c\u8fd0\u7b97\u5c31\u597d\u529e\u4e86\uff0c\u628a\u8fd9\u4e24\u4e2a\u6570\u7ec4\u5f53\u505a\u4e24\u4e2a\u6d6e\u70b9\u6570\u90a3\u6837\u7f16\u5199\u8868\u8fbe\u5f0f\u5373\u53ef\uff1a In [158]: z = np.sqrt(xs ** 2 + ys ** 2) In [159]: z Out[159]: array([[ 7.0711, 7.064 , 7.0569, ..., 7.0499, 7.0569, 7.064 ], [ 7.064 , 7.0569, 7.0499, ..., 7.0428, 7.0499, 7.0569], [ 7.0569, 7.0499, 7.0428, ..., 7.0357, 7.0428, 7.0499], ..., [ 7.0499, 7.0428, 7.0357, ..., 7.0286, 7.0357, 7.0428], [ 7.0569, 7.0499, 7.0428, ..., 7.0357, 7.0428, 7.0499], [ 7.064 , 7.0569, 7.0499, ..., 7.0428, 7.0499, 7.0569]]) \u4f5c\u4e3a\u7b2c9\u7ae0\u7684\u5148\u5bfc\uff0c\u6211\u7528matplotlib\u521b\u5efa\u4e86\u8fd9\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u7684\u53ef\u89c6\u5316\uff1a In [160]: import matplotlib.pyplot as plt In [161]: plt.imshow(z, cmap=plt.cm.gray); plt.colorbar() Out[161]: <matplotlib.colorbar.Colorbar at 0x7f715e3fa630> In [162]: plt.title(\"Image plot of $\\sqrt{x^2 + y^2}$ for a grid of values\") Out[162]: <matplotlib.text.Text at 0x7f715d2de748> \u89c1\u56fe4-3\u3002\u8fd9\u5f20\u56fe\u662f\u7528matplotlib\u7684imshow\u51fd\u6570\u521b\u5efa\u7684\u3002","title":"\u5229\u7528\u6570\u7ec4\u8fdb\u884c\u6570\u636e\u5904\u7406"},{"location":"NumPy_Basics/#_8","text":"numpy.where\u51fd\u6570\u662f\u4e09\u5143\u8868\u8fbe\u5f0fx if condition else y\u7684\u77e2\u91cf\u5316\u7248\u672c\u3002\u5047\u8bbe\u6211\u4eec\u6709\u4e00\u4e2a\u5e03\u5c14\u6570\u7ec4\u548c\u4e24\u4e2a\u503c\u6570\u7ec4\uff1a In [165]: xarr = np.array([1.1, 1.2, 1.3, 1.4, 1.5]) In [166]: yarr = np.array([2.1, 2.2, 2.3, 2.4, 2.5]) In [167]: cond = np.array([True, False, True, True, False]) \u5047\u8bbe\u6211\u4eec\u60f3\u8981\u6839\u636econd\u4e2d\u7684\u503c\u9009\u53d6xarr\u548cyarr\u7684\u503c\uff1a\u5f53cond\u4e2d\u7684\u503c\u4e3aTrue\u65f6\uff0c\u9009\u53d6xarr\u7684\u503c\uff0c\u5426\u5219\u4eceyarr\u4e2d\u9009\u53d6\u3002\u5217\u8868\u63a8\u5bfc\u5f0f\u7684\u5199\u6cd5\u5e94\u8be5\u5982\u4e0b\u6240\u793a\uff1a In [168]: result = [(x if c else y) .....: for x, y, c in zip(xarr, yarr, cond)] In [169]: result Out[169]: [1.1000000000000001, 2.2000000000000002, 1.3, 1.3999999999999999, 2.5] \u8fd9\u6709\u51e0\u4e2a\u95ee\u9898\u3002\u7b2c\u4e00\uff0c\u5b83\u5bf9\u5927\u6570\u7ec4\u7684\u5904\u7406\u901f\u5ea6\u4e0d\u662f\u5f88\u5feb\uff08\u56e0\u4e3a\u6240\u6709\u5de5\u4f5c\u90fd\u662f\u7531\u7eafPython\u5b8c\u6210\u7684\uff09\u3002\u7b2c\u4e8c\uff0c\u65e0\u6cd5\u7528\u4e8e\u591a\u7ef4\u6570\u7ec4\u3002\u82e5\u4f7f\u7528np.where\uff0c\u5219\u53ef\u4ee5\u5c06\u8be5\u529f\u80fd\u5199\u5f97\u975e\u5e38\u7b80\u6d01\uff1a In [170]: result = np.where(cond, xarr, yarr) In [171]: result Out[171]: array([ 1.1, 2.2, 1.3, 1.4, 2.5]) np.where\u7684\u7b2c\u4e8c\u4e2a\u548c\u7b2c\u4e09\u4e2a\u53c2\u6570\u4e0d\u5fc5\u662f\u6570\u7ec4\uff0c\u5b83\u4eec\u90fd\u53ef\u4ee5\u662f\u6807\u91cf\u503c\u3002\u5728\u6570\u636e\u5206\u6790\u5de5\u4f5c\u4e2d\uff0cwhere\u901a\u5e38\u7528\u4e8e\u6839\u636e\u53e6\u4e00\u4e2a\u6570\u7ec4\u800c\u4ea7\u751f\u4e00\u4e2a\u65b0\u7684\u6570\u7ec4\u3002\u5047\u8bbe\u6709\u4e00\u4e2a\u7531\u968f\u673a\u6570\u636e\u7ec4\u6210\u7684\u77e9\u9635\uff0c\u4f60\u5e0c\u671b\u5c06\u6240\u6709\u6b63\u503c\u66ff\u6362\u4e3a2\uff0c\u5c06\u6240\u6709\u8d1f\u503c\u66ff\u6362\u4e3a\uff0d2\u3002\u82e5\u5229\u7528np.where\uff0c\u5219\u4f1a\u975e\u5e38\u7b80\u5355\uff1a In [172]: arr = np.random.randn(4, 4) In [173]: arr Out[173]: array([[-0.5031, -0.6223, -0.9212, -0.7262], [ 0.2229, 0.0513, -1.1577, 0.8167], [ 0.4336, 1.0107, 1.8249, -0.9975], [ 0.8506, -0.1316, 0.9124, 0.1882]]) In [174]: arr > 0 Out[174]: array([[False, False, False, False], [ True, True, False, True], [ True, True, True, False], [ True, False, True, True]], dtype=bool) In [175]: np.where(arr > 0, 2, -2) Out[175]: array([[-2, -2, -2, -2], [ 2, 2, -2, 2], [ 2, 2, 2, -2], [ 2, -2, 2, 2]]) \u4f7f\u7528np.where\uff0c\u53ef\u4ee5\u5c06\u6807\u91cf\u548c\u6570\u7ec4\u7ed3\u5408\u8d77\u6765\u3002\u4f8b\u5982\uff0c\u6211\u53ef\u7528\u5e38\u65702\u66ff\u6362arr\u4e2d\u6240\u6709\u6b63\u7684\u503c\uff1a In [176]: np.where(arr > 0, 2, arr) # set only positive values to 2 Out[176]: array([[-0.5031, -0.6223, -0.9212, -0.7262], [ 2. , 2. , -1.1577, 2. ], [ 2. , 2. , 2. , -0.9975], [ 2. , -0.1316, 2. , 2. ]]) \u4f20\u9012\u7ed9where\u7684\u6570\u7ec4\u5927\u5c0f\u53ef\u4ee5\u4e0d\u76f8\u7b49\uff0c\u751a\u81f3\u53ef\u4ee5\u662f\u6807\u91cf\u503c\u3002","title":"\u5c06\u6761\u4ef6\u903b\u8f91\u8868\u8ff0\u4e3a\u6570\u7ec4\u8fd0\u7b97"},{"location":"NumPy_Basics/#_9","text":"\u53ef\u4ee5\u901a\u8fc7\u6570\u7ec4\u4e0a\u7684\u4e00\u7ec4\u6570\u5b66\u51fd\u6570\u5bf9\u6574\u4e2a\u6570\u7ec4\u6216\u67d0\u4e2a\u8f74\u5411\u7684\u6570\u636e\u8fdb\u884c\u7edf\u8ba1\u8ba1\u7b97\u3002sum\u3001mean\u4ee5\u53ca\u6807\u51c6\u5deestd\u7b49\u805a\u5408\u8ba1\u7b97\uff08aggregation\uff0c\u901a\u5e38\u53eb\u505a\u7ea6\u7b80\uff08reduction\uff09\uff09\u65e2\u53ef\u4ee5\u5f53\u505a\u6570\u7ec4\u7684\u5b9e\u4f8b\u65b9\u6cd5\u8c03\u7528\uff0c\u4e5f\u53ef\u4ee5\u5f53\u505a\u9876\u7ea7NumPy\u51fd\u6570\u4f7f\u7528\u3002 \u8fd9\u91cc\uff0c\u6211\u751f\u6210\u4e86\u4e00\u4e9b\u6b63\u6001\u5206\u5e03\u968f\u673a\u6570\u636e\uff0c\u7136\u540e\u505a\u4e86\u805a\u7c7b\u7edf\u8ba1\uff1a In [177]: arr = np.random.randn(5, 4) In [178]: arr Out[178]: array([[ 2.1695, -0.1149, 2.0037, 0.0296], [ 0.7953, 0.1181, -0.7485, 0.585 ], [ 0.1527, -1.5657, -0.5625, -0.0327], [-0.929 , -0.4826, -0.0363, 1.0954], [ 0.9809, -0.5895, 1.5817, -0.5287]]) In [179]: arr.mean() Out[179]: 0.19607051119998253 In [180]: np.mean(arr) Out[180]: 0.19607051119998253 In [181]: arr.sum() Out[181]: 3.9214102239996507 mean\u548csum\u8fd9\u7c7b\u7684\u51fd\u6570\u53ef\u4ee5\u63a5\u53d7\u4e00\u4e2aaxis\u9009\u9879\u53c2\u6570\uff0c\u7528\u4e8e\u8ba1\u7b97\u8be5\u8f74\u5411\u4e0a\u7684\u7edf\u8ba1\u503c\uff0c\u6700\u7ec8\u7ed3\u679c\u662f\u4e00\u4e2a\u5c11\u4e00\u7ef4\u7684\u6570\u7ec4\uff1a In [182]: arr.mean(axis=1) Out[182]: array([ 1.022 , 0.1875, -0.502 , -0.0881, 0.3611]) In [183]: arr.sum(axis=0) Out[183]: array([ 3.1693, -2.6345, 2.2381, 1.1486]) \u8fd9\u91cc\uff0carr.mean(1)\u662f\u201c\u8ba1\u7b97\u884c\u7684\u5e73\u5747\u503c\u201d\uff0carr.sum(0)\u662f\u201c\u8ba1\u7b97\u6bcf\u5217\u7684\u548c\u201d\u3002 \u5176\u4ed6\u5982cumsum\u548ccumprod\u4e4b\u7c7b\u7684\u65b9\u6cd5\u5219\u4e0d\u805a\u5408\uff0c\u800c\u662f\u4ea7\u751f\u4e00\u4e2a\u7531\u4e2d\u95f4\u7ed3\u679c\u7ec4\u6210\u7684\u6570\u7ec4\uff1a In [184]: arr = np.array([0, 1, 2, 3, 4, 5, 6, 7]) In [185]: arr.cumsum() Out[185]: array([ 0, 1, 3, 6, 10, 15, 21, 28]) \u5728\u591a\u7ef4\u6570\u7ec4\u4e2d\uff0c\u7d2f\u52a0\u51fd\u6570\uff08\u5982cumsum\uff09\u8fd4\u56de\u7684\u662f\u540c\u6837\u5927\u5c0f\u7684\u6570\u7ec4\uff0c\u4f46\u662f\u4f1a\u6839\u636e\u6bcf\u4e2a\u4f4e\u7ef4\u7684\u5207\u7247\u6cbf\u7740\u6807\u8bb0\u8f74\u8ba1\u7b97\u90e8\u5206\u805a\u7c7b\uff1a In [186]: arr = np.array([[0, 1, 2], [3, 4, 5], [6, 7, 8]]) In [187]: arr Out[187]: array([[0, 1, 2], [3, 4, 5], [6, 7, 8]]) In [188]: arr.cumsum(axis=0) Out[188]: array([[ 0, 1, 2], [ 3, 5, 7], [ 9, 12, 15]]) In [189]: arr.cumprod(axis=1) Out[189]: array([[ 0, 0, 0], [ 3, 12, 60], [ 6, 42, 336]]) \u88684-5\u5217\u51fa\u4e86\u5168\u90e8\u7684\u57fa\u672c\u6570\u7ec4\u7edf\u8ba1\u65b9\u6cd5\u3002\u540e\u7eed\u7ae0\u8282\u4e2d\u6709\u5f88\u591a\u4f8b\u5b50\u90fd\u4f1a\u7528\u5230\u8fd9\u4e9b\u65b9\u6cd5\u3002","title":"\u6570\u5b66\u548c\u7edf\u8ba1\u65b9\u6cd5"},{"location":"NumPy_Basics/#_10","text":"\u5728\u4e0a\u9762\u8fd9\u4e9b\u65b9\u6cd5\u4e2d\uff0c\u5e03\u5c14\u503c\u4f1a\u88ab\u5f3a\u5236\u8f6c\u6362\u4e3a1\uff08True\uff09\u548c0\uff08False\uff09\u3002\u56e0\u6b64\uff0csum\u7ecf\u5e38\u88ab\u7528\u6765\u5bf9\u5e03\u5c14\u578b\u6570\u7ec4\u4e2d\u7684True\u503c\u8ba1\u6570\uff1a In [190]: arr = np.random.randn(100) In [191]: (arr > 0).sum() # Number of positive values Out[191]: 42 \u53e6\u5916\u8fd8\u6709\u4e24\u4e2a\u65b9\u6cd5any\u548call\uff0c\u5b83\u4eec\u5bf9\u5e03\u5c14\u578b\u6570\u7ec4\u975e\u5e38\u6709\u7528\u3002any\u7528\u4e8e\u6d4b\u8bd5\u6570\u7ec4\u4e2d\u662f\u5426\u5b58\u5728\u4e00\u4e2a\u6216\u591a\u4e2aTrue\uff0c\u800call\u5219\u68c0\u67e5\u6570\u7ec4\u4e2d\u6240\u6709\u503c\u662f\u5426\u90fd\u662fTrue\uff1a In [192]: bools = np.array([False, False, True, False]) In [193]: bools.any() Out[193]: True In [194]: bools.all() Out[194]: False \u8fd9\u4e24\u4e2a\u65b9\u6cd5\u4e5f\u80fd\u7528\u4e8e\u975e\u5e03\u5c14\u578b\u6570\u7ec4\uff0c\u6240\u6709\u975e0\u5143\u7d20\u5c06\u4f1a\u88ab\u5f53\u505aTrue\u3002","title":"\u7528\u4e8e\u5e03\u5c14\u578b\u6570\u7ec4\u7684\u65b9\u6cd5"},{"location":"NumPy_Basics/#_11","text":"\u8ddfPython\u5185\u7f6e\u7684\u5217\u8868\u7c7b\u578b\u4e00\u6837\uff0cNumPy\u6570\u7ec4\u4e5f\u53ef\u4ee5\u901a\u8fc7sort\u65b9\u6cd5\u5c31\u5730\u6392\u5e8f\uff1a In [195]: arr = np.random.randn(6) In [196]: arr Out[196]: array([ 0.6095, -0.4938, 1.24 , -0.1357, 1.43 , -0.8469]) In [197]: arr.sort() In [198]: arr Out[198]: array([-0.8469, -0.4938, -0.1357, 0.6095, 1.24 , 1.43 ]) \u591a\u7ef4\u6570\u7ec4\u53ef\u4ee5\u5728\u4efb\u4f55\u4e00\u4e2a\u8f74\u5411\u4e0a\u8fdb\u884c\u6392\u5e8f\uff0c\u53ea\u9700\u5c06\u8f74\u7f16\u53f7\u4f20\u7ed9sort\u5373\u53ef\uff1a In [199]: arr = np.random.randn(5, 3) In [200]: arr Out[200]: array([[ 0.6033, 1.2636, -0.2555], [-0.4457, 0.4684, -0.9616], [-1.8245, 0.6254, 1.0229], [ 1.1074, 0.0909, -0.3501], [ 0.218 , -0.8948, -1.7415]]) In [201]: arr.sort(1) In [202]: arr Out[202]: array([[-0.2555, 0.6033, 1.2636], [-0.9616, -0.4457, 0.4684], [-1.8245, 0.6254, 1.0229], [-0.3501, 0.0909, 1.1074], [-1.7415, -0.8948, 0.218 ]]) \u9876\u7ea7\u65b9\u6cd5np.sort\u8fd4\u56de\u7684\u662f\u6570\u7ec4\u7684\u5df2\u6392\u5e8f\u526f\u672c\uff0c\u800c\u5c31\u5730\u6392\u5e8f\u5219\u4f1a\u4fee\u6539\u6570\u7ec4\u672c\u8eab\u3002\u8ba1\u7b97\u6570\u7ec4\u5206\u4f4d\u6570\u6700\u7b80\u5355\u7684\u529e\u6cd5\u662f\u5bf9\u5176\u8fdb\u884c\u6392\u5e8f\uff0c\u7136\u540e\u9009\u53d6\u7279\u5b9a\u4f4d\u7f6e\u7684\u503c\uff1a In [203]: large_arr = np.random.randn(1000) In [204]: large_arr.sort() In [205]: large_arr[int(0.05 * len(large_arr))] # 5% quantile Out[205]: -1.5311513550102103 \u66f4\u591a\u5173\u4e8eNumPy\u6392\u5e8f\u65b9\u6cd5\u4ee5\u53ca\u8bf8\u5982\u95f4\u63a5\u6392\u5e8f\u4e4b\u7c7b\u7684\u9ad8\u7ea7\u6280\u672f\uff0c\u8bf7\u53c2\u9605\u9644\u5f55A\u3002\u5728pandas\u4e2d\u8fd8\u53ef\u4ee5\u627e\u5230\u4e00\u4e9b\u5176\u4ed6\u8ddf\u6392\u5e8f\u6709\u5173\u7684\u6570\u636e\u64cd\u4f5c\uff08\u6bd4\u5982\u6839\u636e\u4e00\u5217\u6216\u591a\u5217\u5bf9\u8868\u683c\u578b\u6570\u636e\u8fdb\u884c\u6392\u5e8f\uff09\u3002","title":"\u6392\u5e8f"},{"location":"NumPy_Basics/#_12","text":"NumPy\u63d0\u4f9b\u4e86\u4e00\u4e9b\u9488\u5bf9\u4e00\u7ef4ndarray\u7684\u57fa\u672c\u96c6\u5408\u8fd0\u7b97\u3002\u6700\u5e38\u7528\u7684\u53ef\u80fd\u8981\u6570np.unique\u4e86\uff0c\u5b83\u7528\u4e8e\u627e\u51fa\u6570\u7ec4\u4e2d\u7684\u552f\u4e00\u503c\u5e76\u8fd4\u56de\u5df2\u6392\u5e8f\u7684\u7ed3\u679c\uff1a In [206]: names = np.array(['Bob', 'Joe', 'Will', 'Bob', 'Will', 'Joe', 'Joe']) In [207]: np.unique(names) Out[207]: array(['Bob', 'Joe', 'Will'], dtype='<U4') In [208]: ints = np.array([3, 3, 3, 2, 2, 1, 1, 4, 4]) In [209]: np.unique(ints) Out[209]: array([1, 2, 3, 4]) \u62ff\u8ddfnp.unique\u7b49\u4ef7\u7684\u7eafPython\u4ee3\u7801\u6765\u5bf9\u6bd4\u4e00\u4e0b\uff1a In [210]: sorted(set(names)) Out[210]: ['Bob', 'Joe', 'Will'] \u53e6\u4e00\u4e2a\u51fd\u6570np.in1d\u7528\u4e8e\u6d4b\u8bd5\u4e00\u4e2a\u6570\u7ec4\u4e2d\u7684\u503c\u5728\u53e6\u4e00\u4e2a\u6570\u7ec4\u4e2d\u7684\u6210\u5458\u8d44\u683c\uff0c\u8fd4\u56de\u4e00\u4e2a\u5e03\u5c14\u578b\u6570\u7ec4\uff1a In [211]: values = np.array([6, 0, 0, 3, 2, 5, 6]) In [212]: np.in1d(values, [2, 3, 6]) Out[212]: array([ True, False, False, True, True, False, True], dtype=bool) NumPy\u4e2d\u7684\u96c6\u5408\u51fd\u6570\u8bf7\u53c2\u89c1\u88684-6\u3002","title":"\u552f\u4e00\u5316\u4ee5\u53ca\u5176\u5b83\u7684\u96c6\u5408\u903b\u8f91"},{"location":"NumPy_Basics/#_13","text":"NumPy\u80fd\u591f\u8bfb\u5199\u78c1\u76d8\u4e0a\u7684\u6587\u672c\u6570\u636e\u6216\u4e8c\u8fdb\u5236\u6570\u636e\u3002\u8fd9\u4e00\u5c0f\u8282\u53ea\u8ba8\u8bbaNumPy\u7684\u5185\u7f6e\u4e8c\u8fdb\u5236\u683c\u5f0f\uff0c\u56e0\u4e3a\u66f4\u591a\u7684\u7528\u6237\u4f1a\u4f7f\u7528pandas\u6216\u5176\u5b83\u5de5\u5177\u52a0\u8f7d\u6587\u672c\u6216\u8868\u683c\u6570\u636e\uff08\u89c1\u7b2c6\u7ae0\uff09\u3002 np.save\u548cnp.load\u662f\u8bfb\u5199\u78c1\u76d8\u6570\u7ec4\u6570\u636e\u7684\u4e24\u4e2a\u4e3b\u8981\u51fd\u6570\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6570\u7ec4\u662f\u4ee5\u672a\u538b\u7f29\u7684\u539f\u59cb\u4e8c\u8fdb\u5236\u683c\u5f0f\u4fdd\u5b58\u5728\u6269\u5c55\u540d\u4e3a.npy\u7684\u6587\u4ef6\u4e2d\u7684\uff1a In [213]: arr = np.arange(10) In [214]: np.save('some_array', arr) \u5982\u679c\u6587\u4ef6\u8def\u5f84\u672b\u5c3e\u6ca1\u6709\u6269\u5c55\u540d.npy\uff0c\u5219\u8be5\u6269\u5c55\u540d\u4f1a\u88ab\u81ea\u52a8\u52a0\u4e0a\u3002\u7136\u540e\u5c31\u53ef\u4ee5\u901a\u8fc7np.load\u8bfb\u53d6\u78c1\u76d8\u4e0a\u7684\u6570\u7ec4\uff1a In [215]: np.load('some_array.npy') Out[215]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) \u901a\u8fc7np.savez\u53ef\u4ee5\u5c06\u591a\u4e2a\u6570\u7ec4\u4fdd\u5b58\u5230\u4e00\u4e2a\u672a\u538b\u7f29\u6587\u4ef6\u4e2d\uff0c\u5c06\u6570\u7ec4\u4ee5\u5173\u952e\u5b57\u53c2\u6570\u7684\u5f62\u5f0f\u4f20\u5165\u5373\u53ef\uff1a In [216]: np.savez('array_archive.npz', a=arr, b=arr) \u52a0\u8f7d.npz\u6587\u4ef6\u65f6\uff0c\u4f60\u4f1a\u5f97\u5230\u4e00\u4e2a\u7c7b\u4f3c\u5b57\u5178\u7684\u5bf9\u8c61\uff0c\u8be5\u5bf9\u8c61\u4f1a\u5bf9\u5404\u4e2a\u6570\u7ec4\u8fdb\u884c\u5ef6\u8fdf\u52a0\u8f7d\uff1a In [217]: arch = np.load('array_archive.npz') In [218]: arch['b'] Out[218]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) \u5982\u679c\u8981\u5c06\u6570\u636e\u538b\u7f29\uff0c\u53ef\u4ee5\u4f7f\u7528numpy.savez_compressed\uff1a In [219]: np.savez_compressed('arrays_compressed.npz', a=arr, b=arr)","title":"\u7528\u4e8e\u6570\u7ec4\u7684\u6587\u4ef6\u8f93\u5165\u8f93\u51fa"},{"location":"NumPy_Basics/#_14","text":"\u7ebf\u6027\u4ee3\u6570\uff08\u5982\u77e9\u9635\u4e58\u6cd5\u3001\u77e9\u9635\u5206\u89e3\u3001\u884c\u5217\u5f0f\u4ee5\u53ca\u5176\u4ed6\u65b9\u9635\u6570\u5b66\u7b49\uff09\u662f\u4efb\u4f55\u6570\u7ec4\u5e93\u7684\u91cd\u8981\u7ec4\u6210\u90e8\u5206\u3002\u4e0d\u50cf\u67d0\u4e9b\u8bed\u8a00\uff08\u5982MATLAB\uff09\uff0c\u901a\u8fc7*\u5bf9\u4e24\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u76f8\u4e58\u5f97\u5230\u7684\u662f\u4e00\u4e2a\u5143\u7d20\u7ea7\u7684\u79ef\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u77e9\u9635\u70b9\u79ef\u3002\u56e0\u6b64\uff0cNumPy\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7528\u4e8e\u77e9\u9635\u4e58\u6cd5\u7684dot\u51fd\u6570\uff08\u65e2\u662f\u4e00\u4e2a\u6570\u7ec4\u65b9\u6cd5\u4e5f\u662fnumpy\u547d\u540d\u7a7a\u95f4\u4e2d\u7684\u4e00\u4e2a\u51fd\u6570\uff09\uff1a In [223]: x = np.array([[1., 2., 3.], [4., 5., 6.]]) In [224]: y = np.array([[6., 23.], [-1, 7], [8, 9]]) In [225]: x Out[225]: array([[ 1., 2., 3.], [ 4., 5., 6.]]) In [226]: y Out[226]: array([[ 6., 23.], [ -1., 7.], [ 8., 9.]]) In [227]: x.dot(y) Out[227]: array([[ 28., 64.], [ 67., 181.]]) x.dot(y)\u7b49\u4ef7\u4e8enp.dot(x, y)\uff1a In [228]: np.dot(x, y) Out[228]: array([[ 28., 64.], [ 67., 181.]]) \u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u8ddf\u4e00\u4e2a\u5927\u5c0f\u5408\u9002\u7684\u4e00\u7ef4\u6570\u7ec4\u7684\u77e9\u9635\u70b9\u79ef\u8fd0\u7b97\u4e4b\u540e\u5c06\u4f1a\u5f97\u5230\u4e00\u4e2a\u4e00\u7ef4\u6570\u7ec4\uff1a In [229]: np.dot(x, np.ones(3)) Out[229]: array([ 6., 15.]) @\u7b26\uff08\u7c7b\u4f3cPython 3.5\uff09\u4e5f\u53ef\u4ee5\u7528\u4f5c\u4e2d\u7f00\u8fd0\u7b97\u7b26\uff0c\u8fdb\u884c\u77e9\u9635\u4e58\u6cd5\uff1a In [230]: x @ np.ones(3) Out[230]: array([ 6., 15.]) numpy.linalg\u4e2d\u6709\u4e00\u7ec4\u6807\u51c6\u7684\u77e9\u9635\u5206\u89e3\u8fd0\u7b97\u4ee5\u53ca\u8bf8\u5982\u6c42\u9006\u548c\u884c\u5217\u5f0f\u4e4b\u7c7b\u7684\u4e1c\u897f\u3002\u5b83\u4eec\u8ddfMATLAB\u548cR\u7b49\u8bed\u8a00\u6240\u4f7f\u7528\u7684\u662f\u76f8\u540c\u7684\u884c\u4e1a\u6807\u51c6\u7ebf\u6027\u4ee3\u6570\u5e93\uff0c\u5982BLAS\u3001LAPACK\u3001Intel MKL\uff08Math Kernel Library\uff0c\u53ef\u80fd\u6709\uff0c\u53d6\u51b3\u4e8e\u4f60\u7684NumPy\u7248\u672c\uff09\u7b49\uff1a In [231]: from numpy.linalg import inv, qr In [232]: X = np.random.randn(5, 5) In [233]: mat = X.T.dot(X) In [234]: inv(mat) Out[234]: array([[ 933.1189, 871.8258, -1417.6902, -1460.4005, 1782.1391], [ 871.8258, 815.3929, -1325.9965, -1365.9242, 1666.9347], [-1417.6902, -1325.9965, 2158.4424, 2222.0191, -2711.6822], [-1460.4005, -1365.9242, 2222.0191, 2289.0575, -2793.422 ], [ 1782.1391, 1666.9347, -2711.6822, -2793.422 , 3409.5128]]) In [235]: mat.dot(inv(mat)) Out[235]: array([[ 1., 0., -0., -0., -0.], [-0., 1., 0., 0., 0.], [ 0., 0., 1., 0., 0.], [-0., 0., 0., 1., -0.], [-0., 0., 0., 0., 1.]]) In [236]: q, r = qr(mat) In [237]: r Out[237]: array([[-1.6914, 4.38 , 0.1757, 0.4075, -0.7838], [ 0. , -2.6436, 0.1939, -3.072 , -1.0702], [ 0. , 0. , -0.8138, 1.5414, 0.6155], [ 0. , 0. , 0. , -2.6445, -2.1669], [ 0. , 0. , 0. , 0. , 0.0002]]) \u8868\u8fbe\u5f0fX.T.dot(X)\u8ba1\u7b97X\u548c\u5b83\u7684\u8f6c\u7f6eX.T\u7684\u70b9\u79ef\u3002 \u88684-7\u4e2d\u5217\u51fa\u4e86\u4e00\u4e9b\u6700\u5e38\u7528\u7684\u7ebf\u6027\u4ee3\u6570\u51fd\u6570\u3002","title":"\u7ebf\u6027\u4ee3\u6570"},{"location":"NumPy_Basics/#_15","text":"numpy.random\u6a21\u5757\u5bf9Python\u5185\u7f6e\u7684random\u8fdb\u884c\u4e86\u8865\u5145\uff0c\u589e\u52a0\u4e86\u4e00\u4e9b\u7528\u4e8e\u9ad8\u6548\u751f\u6210\u591a\u79cd\u6982\u7387\u5206\u5e03\u7684\u6837\u672c\u503c\u7684\u51fd\u6570\u3002\u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u7528normal\u6765\u5f97\u5230\u4e00\u4e2a\u6807\u51c6\u6b63\u6001\u5206\u5e03\u76844\u00d74\u6837\u672c\u6570\u7ec4\uff1a In [238]: samples = np.random.normal(size=(4, 4)) In [239]: samples Out[239]: array([[ 0.5732, 0.1933, 0.4429, 1.2796], [ 0.575 , 0.4339, -0.7658, -1.237 ], [-0.5367, 1.8545, -0.92 , -0.1082], [ 0.1525, 0.9435, -1.0953, -0.144 ]]) \u800cPython\u5185\u7f6e\u7684random\u6a21\u5757\u5219\u53ea\u80fd\u4e00\u6b21\u751f\u6210\u4e00\u4e2a\u6837\u672c\u503c\u3002\u4ece\u4e0b\u9762\u7684\u6d4b\u8bd5\u7ed3\u679c\u4e2d\u53ef\u4ee5\u770b\u51fa\uff0c\u5982\u679c\u9700\u8981\u4ea7\u751f\u5927\u91cf\u6837\u672c\u503c\uff0cnumpy.random\u5feb\u4e86\u4e0d\u6b62\u4e00\u4e2a\u6570\u91cf\u7ea7\uff1a In [240]: from random import normalvariate In [241]: N = 1000000 In [242]: %timeit samples = [normalvariate(0, 1) for _ in range(N)] 1.77 s +- 126 ms per loop (mean +- std. dev. of 7 runs, 1 loop each) In [243]: %timeit np.random.normal(size=N) 61.7 ms +- 1.32 ms per loop (mean +- std. dev. of 7 runs, 10 loops each) \u6211\u4eec\u8bf4\u8fd9\u4e9b\u90fd\u662f\u4f2a\u968f\u673a\u6570\uff0c\u662f\u56e0\u4e3a\u5b83\u4eec\u90fd\u662f\u901a\u8fc7\u7b97\u6cd5\u57fa\u4e8e\u968f\u673a\u6570\u751f\u6210\u5668\u79cd\u5b50\uff0c\u5728\u786e\u5b9a\u6027\u7684\u6761\u4ef6\u4e0b\u751f\u6210\u7684\u3002\u4f60\u53ef\u4ee5\u7528NumPy\u7684np.random.seed\u66f4\u6539\u968f\u673a\u6570\u751f\u6210\u79cd\u5b50\uff1a In [244]: np.random.seed(1234) numpy.random\u7684\u6570\u636e\u751f\u6210\u51fd\u6570\u4f7f\u7528\u4e86\u5168\u5c40\u7684\u968f\u673a\u79cd\u5b50\u3002\u8981\u907f\u514d\u5168\u5c40\u72b6\u6001\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528numpy.random.RandomState\uff0c\u521b\u5efa\u4e00\u4e2a\u4e0e\u5176\u5b83\u9694\u79bb\u7684\u968f\u673a\u6570\u751f\u6210\u5668\uff1a In [245]: rng = np.random.RandomState(1234) In [246]: rng.randn(10) Out[246]: array([ 0.4714, -1.191 , 1.4327, -0.3127, -0.7206, 0.8872, 0.8596, -0.6365, 0.0157, -2.2427]) \u88684-8\u5217\u51fa\u4e86numpy.random\u4e2d\u7684\u90e8\u5206\u51fd\u6570\u3002\u5728\u4e0b\u4e00\u8282\u4e2d\uff0c\u6211\u5c06\u7ed9\u51fa\u4e00\u4e9b\u5229\u7528\u8fd9\u4e9b\u51fd\u6570\u4e00\u6b21\u6027\u751f\u6210\u5927\u91cf\u6837\u672c\u503c\u7684\u8303\u4f8b\u3002","title":"\u4f2a\u968f\u673a\u6570\u751f\u6210"},{"location":"NumPy_Basics/#_16","text":"\u6211\u4eec\u901a\u8fc7\u6a21\u62df\u968f\u673a\u6f2b\u6b65\u6765\u8bf4\u660e\u5982\u4f55\u8fd0\u7528\u6570\u7ec4\u8fd0\u7b97\u3002\u5148\u6765\u770b\u4e00\u4e2a\u7b80\u5355\u7684\u968f\u673a\u6f2b\u6b65\u7684\u4f8b\u5b50\uff1a\u4ece0\u5f00\u59cb\uff0c\u6b65\u957f1\u548c\uff0d1\u51fa\u73b0\u7684\u6982\u7387\u76f8\u7b49\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u901a\u8fc7\u5185\u7f6e\u7684random\u6a21\u5757\u4ee5\u7eafPython\u7684\u65b9\u5f0f\u5b9e\u73b01000\u6b65\u7684\u968f\u673a\u6f2b\u6b65\uff1a In [247]: import random .....: position = 0 .....: walk = [position] .....: steps = 1000 .....: for i in range(steps): .....: step = 1 if random.randint(0, 1) else -1 .....: position += step .....: walk.append(position) .....: \u56fe4-4\u662f\u6839\u636e\u524d100\u4e2a\u968f\u673a\u6f2b\u6b65\u503c\u751f\u6210\u7684\u6298\u7ebf\u56fe\uff1a In [249]: plt.plot(walk[:100]) \u4e0d\u96be\u770b\u51fa\uff0c\u8fd9\u5176\u5b9e\u5c31\u662f\u968f\u673a\u6f2b\u6b65\u4e2d\u5404\u6b65\u7684\u7d2f\u8ba1\u548c\uff0c\u53ef\u4ee5\u7528\u4e00\u4e2a\u6570\u7ec4\u8fd0\u7b97\u6765\u5b9e\u73b0\u3002\u56e0\u6b64\uff0c\u6211\u7528np.random\u6a21\u5757\u4e00\u6b21\u6027\u968f\u673a\u4ea7\u751f1000\u4e2a\u201c\u63b7\u786c\u5e01\u201d\u7ed3\u679c\uff08\u5373\u4e24\u4e2a\u6570\u4e2d\u4efb\u9009\u4e00\u4e2a\uff09\uff0c\u5c06\u5176\u5206\u522b\u8bbe\u7f6e\u4e3a1\u6216\uff0d1\uff0c\u7136\u540e\u8ba1\u7b97\u7d2f\u8ba1\u548c\uff1a In [251]: nsteps = 1000 In [252]: draws = np.random.randint(0, 2, size=nsteps) In [253]: steps = np.where(draws > 0, 1, -1) In [254]: walk = steps.cumsum() \u6709\u4e86\u8fd9\u4e9b\u6570\u636e\u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u6cbf\u7740\u6f2b\u6b65\u8def\u5f84\u505a\u4e00\u4e9b\u7edf\u8ba1\u5de5\u4f5c\u4e86\uff0c\u6bd4\u5982\u6c42\u53d6\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\uff1a In [255]: walk.min() Out[255]: -3 In [256]: walk.max() Out[256]: 31 \u73b0\u5728\u6765\u770b\u4e00\u4e2a\u590d\u6742\u70b9\u7684\u7edf\u8ba1\u4efb\u52a1\u2014\u2014\u9996\u6b21\u7a7f\u8d8a\u65f6\u95f4\uff0c\u5373\u968f\u673a\u6f2b\u6b65\u8fc7\u7a0b\u4e2d\u7b2c\u4e00\u6b21\u5230\u8fbe\u67d0\u4e2a\u7279\u5b9a\u503c\u7684\u65f6\u95f4\u3002\u5047\u8bbe\u6211\u4eec\u60f3\u8981\u77e5\u9053\u672c\u6b21\u968f\u673a\u6f2b\u6b65\u9700\u8981\u591a\u4e45\u624d\u80fd\u8ddd\u79bb\u521d\u59cb0\u70b9\u81f3\u5c1110\u6b65\u8fdc\uff08\u4efb\u4e00\u65b9\u5411\u5747\u53ef\uff09\u3002np.abs(walk)>=10\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u5e03\u5c14\u578b\u6570\u7ec4\uff0c\u5b83\u8868\u793a\u7684\u662f\u8ddd\u79bb\u662f\u5426\u8fbe\u5230\u6216\u8d85\u8fc710\uff0c\u800c\u6211\u4eec\u60f3\u8981\u77e5\u9053\u7684\u662f\u7b2c\u4e00\u4e2a10\u6216\uff0d10\u7684\u7d22\u5f15\u3002\u53ef\u4ee5\u7528argmax\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u5b83\u8fd4\u56de\u7684\u662f\u8be5\u5e03\u5c14\u578b\u6570\u7ec4\u7b2c\u4e00\u4e2a\u6700\u5927\u503c\u7684\u7d22\u5f15\uff08True\u5c31\u662f\u6700\u5927\u503c\uff09\uff1a In [257]: (np.abs(walk) >= 10).argmax() Out[257]: 37 \u6ce8\u610f\uff0c\u8fd9\u91cc\u4f7f\u7528argmax\u5e76\u4e0d\u662f\u5f88\u9ad8\u6548\uff0c\u56e0\u4e3a\u5b83\u65e0\u8bba\u5982\u4f55\u90fd\u4f1a\u5bf9\u6570\u7ec4\u8fdb\u884c\u5b8c\u5168\u626b\u63cf\u3002\u5728\u672c\u4f8b\u4e2d\uff0c\u53ea\u8981\u53d1\u73b0\u4e86\u4e00\u4e2aTrue\uff0c\u90a3\u6211\u4eec\u5c31\u77e5\u9053\u5b83\u662f\u4e2a\u6700\u5927\u503c\u4e86\u3002","title":"\u793a\u4f8b\uff1a\u968f\u673a\u6f2b\u6b65"},{"location":"NumPy_Basics/#_17","text":"\u5982\u679c\u4f60\u5e0c\u671b\u6a21\u62df\u591a\u4e2a\u968f\u673a\u6f2b\u6b65\u8fc7\u7a0b\uff08\u6bd4\u59825000\u4e2a\uff09\uff0c\u53ea\u9700\u5bf9\u4e0a\u9762\u7684\u4ee3\u7801\u505a\u4e00\u70b9\u70b9\u4fee\u6539\u5373\u53ef\u751f\u6210\u6240\u6709\u7684\u968f\u673a\u6f2b\u6b65\u8fc7\u7a0b\u3002\u53ea\u8981\u7ed9numpy.random\u7684\u51fd\u6570\u4f20\u5165\u4e00\u4e2a\u4e8c\u5143\u5143\u7ec4\u5c31\u53ef\u4ee5\u4ea7\u751f\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\uff0c\u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u4e00\u6b21\u6027\u8ba1\u7b975000\u4e2a\u968f\u673a\u6f2b\u6b65\u8fc7\u7a0b\uff08\u4e00\u884c\u4e00\u4e2a\uff09\u7684\u7d2f\u8ba1\u548c\u4e86\uff1a In [258]: nwalks = 5000 In [259]: nsteps = 1000 In [260]: draws = np.random.randint(0, 2, size=(nwalks, nsteps)) # 0 or 1 In [261]: steps = np.where(draws > 0, 1, -1) In [262]: walks = steps.cumsum(1) In [263]: walks Out[263]: array([[ 1, 0, 1, ..., 8, 7, 8], [ 1, 0, -1, ..., 34, 33, 32], [ 1, 0, -1, ..., 4, 5, 4], ..., [ 1, 2, 1, ..., 24, 25, 26], [ 1, 2, 3, ..., 14, 13, 14], [ -1, -2, -3, ..., -24, -23, -22]]) \u73b0\u5728\uff0c\u6211\u4eec\u6765\u8ba1\u7b97\u6240\u6709\u968f\u673a\u6f2b\u6b65\u8fc7\u7a0b\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\uff1a In [264]: walks.max() Out[264]: 138 In [265]: walks.min() Out[265]: -133 \u5f97\u5230\u8fd9\u4e9b\u6570\u636e\u4e4b\u540e\uff0c\u6211\u4eec\u6765\u8ba1\u7b9730\u6216\uff0d30\u7684\u6700\u5c0f\u7a7f\u8d8a\u65f6\u95f4\u3002\u8fd9\u91cc\u7a0d\u5fae\u590d\u6742\u4e9b\uff0c\u56e0\u4e3a\u4e0d\u662f5000\u4e2a\u8fc7\u7a0b\u90fd\u5230\u8fbe\u4e8630\u3002\u6211\u4eec\u53ef\u4ee5\u7528any\u65b9\u6cd5\u6765\u5bf9\u6b64\u8fdb\u884c\u68c0\u67e5\uff1a In [266]: hits30 = (np.abs(walks) >= 30).any(1) In [267]: hits30 Out[267]: array([False, True, False, ..., False, True, False], dtype=bool) In [268]: hits30.sum() # Number that hit 30 or -30 Out[268]: 3410 \u7136\u540e\u6211\u4eec\u5229\u7528\u8fd9\u4e2a\u5e03\u5c14\u578b\u6570\u7ec4\u9009\u51fa\u90a3\u4e9b\u7a7f\u8d8a\u4e8630\uff08\u7edd\u5bf9\u503c\uff09\u7684\u968f\u673a\u6f2b\u6b65\uff08\u884c\uff09\uff0c\u5e76\u8c03\u7528argmax\u5728\u8f741\u4e0a\u83b7\u53d6\u7a7f\u8d8a\u65f6\u95f4\uff1a In [269]: crossing_times = (np.abs(walks[hits30]) >= 30).argmax(1) In [270]: crossing_times.mean() Out[270]: 498.88973607038122 \u8bf7\u5c1d\u8bd5\u7528\u5176\u4ed6\u5206\u5e03\u65b9\u5f0f\u5f97\u5230\u6f2b\u6b65\u6570\u636e\u3002\u53ea\u9700\u4f7f\u7528\u4e0d\u540c\u7684\u968f\u673a\u6570\u751f\u6210\u51fd\u6570\u5373\u53ef\uff0c\u5982normal\u7528\u4e8e\u751f\u6210\u6307\u5b9a\u5747\u503c\u548c\u6807\u51c6\u5dee\u7684\u6b63\u6001\u5206\u5e03\u6570\u636e\uff1a In [271]: steps = np.random.normal(loc=0, scale=0.25, .....: size=(nwalks, nsteps))","title":"\u4e00\u6b21\u6a21\u62df\u591a\u4e2a\u968f\u673a\u6f2b\u6b65"},{"location":"Pandas_Basics/","text":"Pandas \u901f\u67e5\u8868 \u5bfc\u5165 Pandas \u4e0e NumPy import pandas as pd import numpy as np \u751f\u6210\u5bf9\u8c61 # \u7528\u503c\u5217\u8868\u751f\u6210 Series \u65f6\uff0cPandas \u9ed8\u8ba4\u81ea\u52a8\u751f\u6210\u6574\u6570\u7d22\u5f15 s = pd.Series([1, 3, 5, np.nan, 6, 8]) s 0 1.0 1 3.0 2 5.0 3 NaN 4 6.0 5 8.0 dtype: float64 # \u7528\u542b\u65e5\u671f\u65f6\u95f4\u7d22\u5f15\u4e0e\u6807\u7b7e\u7684 NumPy \u6570\u7ec4\u751f\u6210 DataFrame df = pd.DataFrame(np.random.randn(6, 4), index=pd.date_range(\"20200901\", periods=6), columns=list(\"ABCD\")) df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D 2020-09-01 0.267854 -1.131221 -0.354760 2.230473 2020-09-02 0.401973 0.552876 -0.484048 0.410471 2020-09-03 -0.526610 0.429193 2.455894 0.366316 2020-09-04 0.996290 1.739588 2.203829 0.032343 2020-09-05 0.046479 0.604200 -1.042130 0.051650 2020-09-06 -0.186728 -1.005533 1.239826 1.058215 # \u7528 Series \u5b57\u5178\u5bf9\u8c61\u751f\u6210 DataFrame df2 = pd.DataFrame({\"A\":1, \"B\":pd.Timestamp(\"20200901\"), \"C\":pd.Series(1, index=list(range(4)), dtype=\"float32\"), \"D\":np.array([3] * 4, dtype=\"int32\"), \"E\":pd.Categorical([\"test\", \"train\", \"test\", \"train\"]), \"F\":\"foo\"}) df2 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D E F 0 1 2020-09-01 1.0 3 test foo 1 1 2020-09-01 1.0 3 train foo 2 1 2020-09-01 1.0 3 test foo 3 1 2020-09-01 1.0 3 train foo # DataFrame\u7684\u5217\u6709\u4e0d\u540c\u6570\u636e\u7c7b\u578b df2.dtypes A int64 B datetime64[ns] C float32 D int32 E category F object dtype: object \u67e5\u770b\u6570\u636e \u67e5\u770b\u5934\u90e8\u548c\u5c3e\u90e8\u6570\u636e # \u67e5\u770b\u5934\u90e8\u6570\u636e df.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D 2020-09-01 0.267854 -1.131221 -0.354760 2.230473 2020-09-02 0.401973 0.552876 -0.484048 0.410471 2020-09-03 -0.526610 0.429193 2.455894 0.366316 2020-09-04 0.996290 1.739588 2.203829 0.032343 2020-09-05 0.046479 0.604200 -1.042130 0.051650 # \u67e5\u770b\u5c3e\u90e8\u6570\u636e df.tail(3) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D 2020-09-04 0.996290 1.739588 2.203829 0.032343 2020-09-05 0.046479 0.604200 -1.042130 0.051650 2020-09-06 -0.186728 -1.005533 1.239826 1.058215 \u663e\u793a\u7d22\u5f15\u4e0e\u5217\u540d # \u663e\u793a\u7d22\u5f15 df.index DatetimeIndex(['2020-09-01', '2020-09-02', '2020-09-03', '2020-09-04', '2020-09-05', '2020-09-06'], dtype='datetime64[ns]', freq='D') # \u663e\u793a\u5217\u540d df.columns Index(['A', 'B', 'C', 'D'], dtype='object') \u67e5\u770b\u6570\u636e\u7edf\u8ba1\u6458\u8981 df.describe() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D count 6.000000 6.000000 6.000000 6.000000 mean 0.166543 0.198184 0.669769 0.691578 std 0.524185 1.089605 1.495333 0.840421 min -0.526610 -1.131221 -1.042130 0.032343 25% -0.128426 -0.646852 -0.451726 0.130316 50% 0.157166 0.491035 0.442533 0.388393 75% 0.368443 0.591369 1.962828 0.896279 max 0.996290 1.739588 2.455894 2.230473 \u8f6c\u7f6e\u6570\u636e df.T .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } 2020-09-01 2020-09-02 2020-09-03 2020-09-04 2020-09-05 2020-09-06 A 0.267854 0.401973 -0.526610 0.996290 0.046479 -0.186728 B -1.131221 0.552876 0.429193 1.739588 0.604200 -1.005533 C -0.354760 -0.484048 2.455894 2.203829 -1.042130 1.239826 D 2.230473 0.410471 0.366316 0.032343 0.051650 1.058215 \u6309\u8f74\u6392\u5e8f df.sort_index(axis=1, ascending=False) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } D C B A 2020-09-01 2.230473 -0.354760 -1.131221 0.267854 2020-09-02 0.410471 -0.484048 0.552876 0.401973 2020-09-03 0.366316 2.455894 0.429193 -0.526610 2020-09-04 0.032343 2.203829 1.739588 0.996290 2020-09-05 0.051650 -1.042130 0.604200 0.046479 2020-09-06 1.058215 1.239826 -1.005533 -0.186728 \u6309\u503c\u6392\u5e8f df.sort_values(by=\"A\", axis=0, ascending=False) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D 2020-09-04 0.996290 1.739588 2.203829 0.032343 2020-09-02 0.401973 0.552876 -0.484048 0.410471 2020-09-01 0.267854 -1.131221 -0.354760 2.230473 2020-09-05 0.046479 0.604200 -1.042130 0.051650 2020-09-06 -0.186728 -1.005533 1.239826 1.058215 2020-09-03 -0.526610 0.429193 2.455894 0.366316 \u9009\u62e9\u6570\u636e \u83b7\u53d6\u6570\u636e df.A 2020-09-01 0.267854 2020-09-02 0.401973 2020-09-03 -0.526610 2020-09-04 0.996290 2020-09-05 0.046479 2020-09-06 -0.186728 Freq: D, Name: A, dtype: float64 # \u9009\u62e9\u5355\u5217\uff0c\u4ea7\u751f Series\uff0c\u4e0e df.A \u7b49\u6548 df[\"A\"] 2020-09-01 0.267854 2020-09-02 0.401973 2020-09-03 -0.526610 2020-09-04 0.996290 2020-09-05 0.046479 2020-09-06 -0.186728 Freq: D, Name: A, dtype: float64 # \u7528 [ ] \u5207\u7247\u884c df[0:3] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D 2020-09-01 0.267854 -1.131221 -0.354760 2.230473 2020-09-02 0.401973 0.552876 -0.484048 0.410471 2020-09-03 -0.526610 0.429193 2.455894 0.366316 \u6309\u6807\u7b7e\u9009\u62e9 # \u7528\u6807\u7b7e\u63d0\u53d6\u4e00\u884c\u6570\u636e df.loc[\"20200901\"] A 0.267854 B -1.131221 C -0.354760 D 2.230473 Name: 2020-09-01 00:00:00, dtype: float64 # \u7528\u6807\u7b7e\u9009\u62e9\u591a\u5217\u6570\u636e df.loc[:, [\"A\",\"B\"]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B 2020-09-01 0.267854 -1.131221 2020-09-02 0.401973 0.552876 2020-09-03 -0.526610 0.429193 2020-09-04 0.996290 1.739588 2020-09-05 0.046479 0.604200 2020-09-06 -0.186728 -1.005533 \u6309\u4f4d\u7f6e\u9009\u62e9 # \u7528\u6574\u6570\u4f4d\u7f6e\u9009\u62e9 df.iloc[3] A 0.996290 B 1.739588 C 2.203829 D 0.032343 Name: 2020-09-04 00:00:00, dtype: float64 # \u7c7b\u4f3c NumPy\u7528\u6574\u6570\u5207\u7247 df.iloc[3:5, 0:2] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B 2020-09-04 0.996290 1.739588 2020-09-05 0.046479 0.604200 \u5e03\u5c14\u7d22\u5f15 # \u7528\u5355\u5217\u7684\u503c\u9009\u62e9\u6570\u636e df[df[\"A\"] > 0] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D 2020-09-01 0.267854 -1.131221 -0.354760 2.230473 2020-09-02 0.401973 0.552876 -0.484048 0.410471 2020-09-04 0.996290 1.739588 2.203829 0.032343 2020-09-05 0.046479 0.604200 -1.042130 0.051650 # \u9009\u62e9 DataFrame\u91cc\u6ee1\u8db3\u6761\u4ef6\u7684\u503c df[df > 0] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D 2020-09-01 0.267854 NaN NaN 2.230473 2020-09-02 0.401973 0.552876 NaN 0.410471 2020-09-03 NaN 0.429193 2.455894 0.366316 2020-09-04 0.996290 1.739588 2.203829 0.032343 2020-09-05 0.046479 0.604200 NaN 0.051650 2020-09-06 NaN NaN 1.239826 1.058215 \u8d4b\u503c # \u7528\u7d22\u5f15\u81ea\u52a8\u5bf9\u9f50\u65b0\u589e\u5217\u7684\u6570\u636e s1 = pd.Series([1, 2, 3, 4, 5, 6], index=pd.date_range(\"20200901\", periods=6)) s1 2020-09-01 1 2020-09-02 2 2020-09-03 3 2020-09-04 4 2020-09-05 5 2020-09-06 6 Freq: D, dtype: int64 df[\"F\"] = s1 df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D F 2020-09-01 0.267854 -1.131221 -0.354760 2.230473 1 2020-09-02 0.401973 0.552876 -0.484048 0.410471 2 2020-09-03 -0.526610 0.429193 2.455894 0.366316 3 2020-09-04 0.996290 1.739588 2.203829 0.032343 4 2020-09-05 0.046479 0.604200 -1.042130 0.051650 5 2020-09-06 -0.186728 -1.005533 1.239826 1.058215 6 \u7f3a\u5931\u503c # \u91cd\u5efa\u7d22\u5f15\uff08reindex\uff09\u53ef\u4ee5\u66f4\u6539\u3001\u6dfb\u52a0\u3001\u5220\u9664\u6307\u5b9a\u8f74\u7684\u7d22\u5f15\uff0c\u5e76\u8fd4\u56de\u6570\u636e\u526f\u672c\uff0c\u5373\u4e0d\u66f4\u6539\u539f\u6570\u636e df1 = df.reindex(index=df.index[0:4], columns=list(df.columns) + [\"E\"]) df1 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D F E 2020-09-01 0.267854 -1.131221 -0.354760 2.230473 1 NaN 2020-09-02 0.401973 0.552876 -0.484048 0.410471 2 NaN 2020-09-03 -0.526610 0.429193 2.455894 0.366316 3 NaN 2020-09-04 0.996290 1.739588 2.203829 0.032343 4 NaN df1.loc[df.index[0]:df.index[1], \"E\"] = 1 df1 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D F E 2020-09-01 0.267854 -1.131221 -0.354760 2.230473 1 1.0 2020-09-02 0.401973 0.552876 -0.484048 0.410471 2 1.0 2020-09-03 -0.526610 0.429193 2.455894 0.366316 3 NaN 2020-09-04 0.996290 1.739588 2.203829 0.032343 4 NaN \u5220\u9664\u7f3a\u5931\u503c df1.dropna() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D F E 2020-09-01 0.267854 -1.131221 -0.354760 2.230473 1 1.0 2020-09-02 0.401973 0.552876 -0.484048 0.410471 2 1.0 \u586b\u5145\u7f3a\u5931\u503c df1.fillna(0) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D F E 2020-09-01 0.267854 -1.131221 -0.354760 2.230473 1 1.0 2020-09-02 0.401973 0.552876 -0.484048 0.410471 2 1.0 2020-09-03 -0.526610 0.429193 2.455894 0.366316 3 0.0 2020-09-04 0.996290 1.739588 2.203829 0.032343 4 0.0 \u8fd0\u7b97 \u7edf\u8ba1 # \u63cf\u8ff0\u6027\u7edf\u8ba1 df.mean() A 0.166543 B 0.198184 C 0.669769 D 0.691578 F 3.500000 dtype: float64 # Apply\u51fd\u6570 df.apply(lambda x: x.max() - x.min()) A 1.522901 B 2.870809 C 3.498024 D 2.198130 F 5.000000 dtype: float64 \u5408\u5e76\uff08Merge\uff09 \u7ed3\u5408\uff08Concat\uff09 df1 = pd.DataFrame({\"A\": [\"A0\", \"A1\", \"A2\", \"A3\"], \"B\": [\"B0\", \"B1\", \"B2\", \"B3\"], \"C\": [\"C0\", \"C1\", \"C2\", \"C3\"], \"D\": [\"D0\", \"D1\", \"D2\", \"D3\"]}, index=[0, 1, 2, 3]) df2 = pd.DataFrame({\"A\": [\"A4\", \"A5\", \"A6\", \"A7\"], \"B\": [\"B4\", \"B5\", \"B6\", \"B7\"], \"C\": [\"C4\", \"C5\", \"C6\", \"C7\"], \"D\": [\"D4\", \"D5\", \"D6\", \"D7\"]}, index=[4, 5, 6, 7]) df3 = pd.DataFrame({\"A\": [\"A8\", \"A9\", \"A10\", \"A11\"], \"B\": [\"B8\", \"B9\", \"B10\", \"B11\"], \"C\": [\"C8\", \"C9\", \"C10\", \"C11\"], \"D\": [\"D8\", \"D9\", \"D10\", \"D11\"]}, index=[8, 9, 10, 11]) frame = pd.concat([df1, df2, df3]) frame .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D 0 A0 B0 C0 D0 1 A1 B1 C1 D1 2 A2 B2 C2 D2 3 A3 B3 C3 D3 4 A4 B4 C4 D4 5 A5 B5 C5 D5 6 A6 B6 C6 D6 7 A7 B7 C7 D7 8 A8 B8 C8 D8 9 A9 B9 C9 D9 10 A10 B10 C10 D10 11 A11 B11 C11 D11 \u8fde\u63a5\uff08Join\uff09 left = pd.DataFrame({\"key\": [\"foo\", \"foo\"], \"lval\": [1, 2]}) right = pd.DataFrame({\"key\": [\"foo\", \"foo\"], \"rval\": [4, 5]}) left .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } key lval 0 foo 1 1 foo 2 right .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } key rval 0 foo 4 1 foo 5 pd.merge(left, right, on=\"key\") .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } key lval rval 0 foo 1 4 1 foo 1 5 2 foo 2 4 3 foo 2 5 \u8ffd\u52a0\uff08Append\uff09 df = pd.DataFrame(np.random.randn(8, 4), columns=['A', 'B', 'C', 'D']) df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D 0 -0.926318 -1.110969 0.217602 -0.094516 1 1.349012 1.385598 -0.172996 -0.790864 2 -0.417921 -0.004624 -0.509224 -1.550437 3 -0.491223 -0.642262 0.175682 0.721095 4 -0.058397 0.283183 -0.497554 0.739755 5 -0.712672 0.628955 -0.472966 0.318093 6 -0.279831 0.074890 -1.236430 0.592133 7 0.132221 -0.676778 -0.701541 -1.210815 s = df.loc[3] s A -0.491223 B -0.642262 C 0.175682 D 0.721095 Name: 3, dtype: float64 df.append(s, ignore_index=True) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D 0 -0.926318 -1.110969 0.217602 -0.094516 1 1.349012 1.385598 -0.172996 -0.790864 2 -0.417921 -0.004624 -0.509224 -1.550437 3 -0.491223 -0.642262 0.175682 0.721095 4 -0.058397 0.283183 -0.497554 0.739755 5 -0.712672 0.628955 -0.472966 0.318093 6 -0.279831 0.074890 -1.236430 0.592133 7 0.132221 -0.676778 -0.701541 -1.210815 8 -0.491223 -0.642262 0.175682 0.721095 \u5206\u7ec4\uff08Group by\uff09 df = pd.DataFrame([(\"bird\", \"Falconiformes\", 389.0), (\"bird\", \"Psittaciformes\", 24.0), (\"mammal\", \"Carnivora\", 80.2), (\"mammal\", \"Primates\", np.nan), (\"mammal\", \"Carnivora\", 58)], index=[\"falcon\", \"parrot\", \"lion\", \"monkey\", \"leopard\"], columns=(\"class\", \"order\", \"max_speed\")) df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } class order max_speed falcon bird Falconiformes 389.0 parrot bird Psittaciformes 24.0 lion mammal Carnivora 80.2 monkey mammal Primates NaN leopard mammal Carnivora 58.0 df.groupby(by=[\"class\", \"order\"]).sum() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } max_speed class order bird Falconiformes 389.0 Psittaciformes 24.0 mammal Carnivora 138.2 Primates 0.0 \u91cd\u5851\uff08Reshaping\uff09 \u5806\u53e0\uff08Stack\uff09 tuples = list(zip(*[[\"bar\", \"bar\", \"baz\", \"baz\", \"foo\", \"foo\", \"qux\", \"qux\"], [\"one\", \"two\", \"one\", \"two\", \"one\", \"two\", \"one\", \"two\"]])) index = pd.MultiIndex.from_tuples(tuples, names=[\"first\", \"second\"]) df = pd.DataFrame(np.random.randn(8, 2), index=index, columns=[\"A\", \"B\"]) df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B first second bar one 1.457984 0.864189 two 1.808289 1.558983 baz one 1.388420 -0.746224 two 0.215613 1.050263 foo one -0.536742 0.383083 two 0.751930 -1.717304 qux one 0.929121 -1.075260 two 0.238485 -1.581831 df2 = df[:4] df2 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B first second bar one 1.457984 0.864189 two 1.808289 1.558983 baz one 1.388420 -0.746224 two 0.215613 1.050263 stacked = df2.stack() stacked first second bar one A 1.457984 B 0.864189 two A 1.808289 B 1.558983 baz one A 1.388420 B -0.746224 two A 0.215613 B 1.050263 dtype: float64 stacked.unstack() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B first second bar one 1.457984 0.864189 two 1.808289 1.558983 baz one 1.388420 -0.746224 two 0.215613 1.050263 \u6570\u636e\u900f\u89c6\u8868\uff08Pivot Tables\uff09 import datetime df = pd.DataFrame({\"A\": [\"one\", \"one\", \"two\", \"three\"] * 3, \"B\": [\"A\", \"B\", \"C\"] * 4, \"C\": [\"foo\", \"foo\", \"foo\", \"bar\", \"bar\", \"bar\"] * 2, \"D\": np.random.randn(12), \"E\": np.random.randn(12), \"F\":[datetime.datetime(2020, i, 1) for i in range(1, 7)] + [datetime.datetime(2020, i, 15) for i in range(1, 7)]}) df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D E F 0 one A foo 0.613701 0.145033 2020-01-01 1 one B foo -1.501934 -2.349162 2020-02-01 2 two C foo -0.626282 1.619653 2020-03-01 3 three A bar 0.281824 -0.355017 2020-04-01 4 one B bar 0.777277 0.141533 2020-05-01 5 one C bar 0.788832 1.354495 2020-06-01 6 two A foo -0.182135 -0.177494 2020-01-15 7 three B foo 1.635379 -0.504184 2020-02-15 8 one C foo 1.287765 0.642662 2020-03-15 9 one A bar 1.534828 0.089097 2020-04-15 10 two B bar 0.109630 0.508206 2020-05-15 11 three C bar -0.543666 -0.779394 2020-06-15 pd.pivot_table(df, values=\"D\", index=[\"A\", \"B\"], columns=[\"C\"]) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } C bar foo A B one A 1.534828 0.613701 B 0.777277 -1.501934 C 0.788832 1.287765 three A 0.281824 NaN B NaN 1.635379 C -0.543666 NaN two A NaN -0.182135 B 0.109630 NaN C NaN -0.626282 \u65f6\u95f4\u5e8f\u5217\uff08TimeSeries\uff09 rng = pd.date_range(\"1/1/2020\", periods=10, freq=\"M\") rng DatetimeIndex(['2020-01-31', '2020-02-29', '2020-03-31', '2020-04-30', '2020-05-31', '2020-06-30', '2020-07-31', '2020-08-31', '2020-09-30', '2020-10-31'], dtype='datetime64[ns]', freq='M') \u7c7b\u522b\u578b\uff08Categoricals\uff09 df = pd.DataFrame({\"A\": [\"a\", \"b\", \"c\", \"a\"]}) df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A 0 a 1 b 2 c 3 a df[\"B\"] = df[\"A\"].astype(\"category\") df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B 0 a a 1 b b 2 c c 3 a a","title":"3.4 Pandas Basics"},{"location":"Pandas_Basics/#pandas","text":"","title":"Pandas \u901f\u67e5\u8868"},{"location":"Pandas_Basics/#pandas-numpy","text":"import pandas as pd import numpy as np","title":"\u5bfc\u5165 Pandas \u4e0e NumPy"},{"location":"Pandas_Basics/#_1","text":"# \u7528\u503c\u5217\u8868\u751f\u6210 Series \u65f6\uff0cPandas \u9ed8\u8ba4\u81ea\u52a8\u751f\u6210\u6574\u6570\u7d22\u5f15 s = pd.Series([1, 3, 5, np.nan, 6, 8]) s 0 1.0 1 3.0 2 5.0 3 NaN 4 6.0 5 8.0 dtype: float64 # \u7528\u542b\u65e5\u671f\u65f6\u95f4\u7d22\u5f15\u4e0e\u6807\u7b7e\u7684 NumPy \u6570\u7ec4\u751f\u6210 DataFrame df = pd.DataFrame(np.random.randn(6, 4), index=pd.date_range(\"20200901\", periods=6), columns=list(\"ABCD\")) df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D 2020-09-01 0.267854 -1.131221 -0.354760 2.230473 2020-09-02 0.401973 0.552876 -0.484048 0.410471 2020-09-03 -0.526610 0.429193 2.455894 0.366316 2020-09-04 0.996290 1.739588 2.203829 0.032343 2020-09-05 0.046479 0.604200 -1.042130 0.051650 2020-09-06 -0.186728 -1.005533 1.239826 1.058215 # \u7528 Series \u5b57\u5178\u5bf9\u8c61\u751f\u6210 DataFrame df2 = pd.DataFrame({\"A\":1, \"B\":pd.Timestamp(\"20200901\"), \"C\":pd.Series(1, index=list(range(4)), dtype=\"float32\"), \"D\":np.array([3] * 4, dtype=\"int32\"), \"E\":pd.Categorical([\"test\", \"train\", \"test\", \"train\"]), \"F\":\"foo\"}) df2 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D E F 0 1 2020-09-01 1.0 3 test foo 1 1 2020-09-01 1.0 3 train foo 2 1 2020-09-01 1.0 3 test foo 3 1 2020-09-01 1.0 3 train foo # DataFrame\u7684\u5217\u6709\u4e0d\u540c\u6570\u636e\u7c7b\u578b df2.dtypes A int64 B datetime64[ns] C float32 D int32 E category F object dtype: object","title":"\u751f\u6210\u5bf9\u8c61"},{"location":"Pandas_Basics/#_2","text":"","title":"\u67e5\u770b\u6570\u636e"},{"location":"Pandas_Basics/#_3","text":"# \u67e5\u770b\u5934\u90e8\u6570\u636e df.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D 2020-09-01 0.267854 -1.131221 -0.354760 2.230473 2020-09-02 0.401973 0.552876 -0.484048 0.410471 2020-09-03 -0.526610 0.429193 2.455894 0.366316 2020-09-04 0.996290 1.739588 2.203829 0.032343 2020-09-05 0.046479 0.604200 -1.042130 0.051650 # \u67e5\u770b\u5c3e\u90e8\u6570\u636e df.tail(3) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D 2020-09-04 0.996290 1.739588 2.203829 0.032343 2020-09-05 0.046479 0.604200 -1.042130 0.051650 2020-09-06 -0.186728 -1.005533 1.239826 1.058215","title":"\u67e5\u770b\u5934\u90e8\u548c\u5c3e\u90e8\u6570\u636e"},{"location":"Pandas_Basics/#_4","text":"# \u663e\u793a\u7d22\u5f15 df.index DatetimeIndex(['2020-09-01', '2020-09-02', '2020-09-03', '2020-09-04', '2020-09-05', '2020-09-06'], dtype='datetime64[ns]', freq='D') # \u663e\u793a\u5217\u540d df.columns Index(['A', 'B', 'C', 'D'], dtype='object')","title":"\u663e\u793a\u7d22\u5f15\u4e0e\u5217\u540d"},{"location":"Pandas_Basics/#_5","text":"df.describe() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D count 6.000000 6.000000 6.000000 6.000000 mean 0.166543 0.198184 0.669769 0.691578 std 0.524185 1.089605 1.495333 0.840421 min -0.526610 -1.131221 -1.042130 0.032343 25% -0.128426 -0.646852 -0.451726 0.130316 50% 0.157166 0.491035 0.442533 0.388393 75% 0.368443 0.591369 1.962828 0.896279 max 0.996290 1.739588 2.455894 2.230473","title":"\u67e5\u770b\u6570\u636e\u7edf\u8ba1\u6458\u8981"},{"location":"Pandas_Basics/#_6","text":"df.T .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } 2020-09-01 2020-09-02 2020-09-03 2020-09-04 2020-09-05 2020-09-06 A 0.267854 0.401973 -0.526610 0.996290 0.046479 -0.186728 B -1.131221 0.552876 0.429193 1.739588 0.604200 -1.005533 C -0.354760 -0.484048 2.455894 2.203829 -1.042130 1.239826 D 2.230473 0.410471 0.366316 0.032343 0.051650 1.058215","title":"\u8f6c\u7f6e\u6570\u636e"},{"location":"Pandas_Basics/#_7","text":"df.sort_index(axis=1, ascending=False) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } D C B A 2020-09-01 2.230473 -0.354760 -1.131221 0.267854 2020-09-02 0.410471 -0.484048 0.552876 0.401973 2020-09-03 0.366316 2.455894 0.429193 -0.526610 2020-09-04 0.032343 2.203829 1.739588 0.996290 2020-09-05 0.051650 -1.042130 0.604200 0.046479 2020-09-06 1.058215 1.239826 -1.005533 -0.186728","title":"\u6309\u8f74\u6392\u5e8f"},{"location":"Pandas_Basics/#_8","text":"df.sort_values(by=\"A\", axis=0, ascending=False) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D 2020-09-04 0.996290 1.739588 2.203829 0.032343 2020-09-02 0.401973 0.552876 -0.484048 0.410471 2020-09-01 0.267854 -1.131221 -0.354760 2.230473 2020-09-05 0.046479 0.604200 -1.042130 0.051650 2020-09-06 -0.186728 -1.005533 1.239826 1.058215 2020-09-03 -0.526610 0.429193 2.455894 0.366316","title":"\u6309\u503c\u6392\u5e8f"},{"location":"Pandas_Basics/#_9","text":"","title":"\u9009\u62e9\u6570\u636e"},{"location":"Pandas_Basics/#_10","text":"df.A 2020-09-01 0.267854 2020-09-02 0.401973 2020-09-03 -0.526610 2020-09-04 0.996290 2020-09-05 0.046479 2020-09-06 -0.186728 Freq: D, Name: A, dtype: float64 # \u9009\u62e9\u5355\u5217\uff0c\u4ea7\u751f Series\uff0c\u4e0e df.A \u7b49\u6548 df[\"A\"] 2020-09-01 0.267854 2020-09-02 0.401973 2020-09-03 -0.526610 2020-09-04 0.996290 2020-09-05 0.046479 2020-09-06 -0.186728 Freq: D, Name: A, dtype: float64 # \u7528 [ ] \u5207\u7247\u884c df[0:3] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D 2020-09-01 0.267854 -1.131221 -0.354760 2.230473 2020-09-02 0.401973 0.552876 -0.484048 0.410471 2020-09-03 -0.526610 0.429193 2.455894 0.366316","title":"\u83b7\u53d6\u6570\u636e"},{"location":"Pandas_Basics/#_11","text":"# \u7528\u6807\u7b7e\u63d0\u53d6\u4e00\u884c\u6570\u636e df.loc[\"20200901\"] A 0.267854 B -1.131221 C -0.354760 D 2.230473 Name: 2020-09-01 00:00:00, dtype: float64 # \u7528\u6807\u7b7e\u9009\u62e9\u591a\u5217\u6570\u636e df.loc[:, [\"A\",\"B\"]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B 2020-09-01 0.267854 -1.131221 2020-09-02 0.401973 0.552876 2020-09-03 -0.526610 0.429193 2020-09-04 0.996290 1.739588 2020-09-05 0.046479 0.604200 2020-09-06 -0.186728 -1.005533","title":"\u6309\u6807\u7b7e\u9009\u62e9"},{"location":"Pandas_Basics/#_12","text":"# \u7528\u6574\u6570\u4f4d\u7f6e\u9009\u62e9 df.iloc[3] A 0.996290 B 1.739588 C 2.203829 D 0.032343 Name: 2020-09-04 00:00:00, dtype: float64 # \u7c7b\u4f3c NumPy\u7528\u6574\u6570\u5207\u7247 df.iloc[3:5, 0:2] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B 2020-09-04 0.996290 1.739588 2020-09-05 0.046479 0.604200","title":"\u6309\u4f4d\u7f6e\u9009\u62e9"},{"location":"Pandas_Basics/#_13","text":"# \u7528\u5355\u5217\u7684\u503c\u9009\u62e9\u6570\u636e df[df[\"A\"] > 0] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D 2020-09-01 0.267854 -1.131221 -0.354760 2.230473 2020-09-02 0.401973 0.552876 -0.484048 0.410471 2020-09-04 0.996290 1.739588 2.203829 0.032343 2020-09-05 0.046479 0.604200 -1.042130 0.051650 # \u9009\u62e9 DataFrame\u91cc\u6ee1\u8db3\u6761\u4ef6\u7684\u503c df[df > 0] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D 2020-09-01 0.267854 NaN NaN 2.230473 2020-09-02 0.401973 0.552876 NaN 0.410471 2020-09-03 NaN 0.429193 2.455894 0.366316 2020-09-04 0.996290 1.739588 2.203829 0.032343 2020-09-05 0.046479 0.604200 NaN 0.051650 2020-09-06 NaN NaN 1.239826 1.058215","title":"\u5e03\u5c14\u7d22\u5f15"},{"location":"Pandas_Basics/#_14","text":"# \u7528\u7d22\u5f15\u81ea\u52a8\u5bf9\u9f50\u65b0\u589e\u5217\u7684\u6570\u636e s1 = pd.Series([1, 2, 3, 4, 5, 6], index=pd.date_range(\"20200901\", periods=6)) s1 2020-09-01 1 2020-09-02 2 2020-09-03 3 2020-09-04 4 2020-09-05 5 2020-09-06 6 Freq: D, dtype: int64 df[\"F\"] = s1 df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D F 2020-09-01 0.267854 -1.131221 -0.354760 2.230473 1 2020-09-02 0.401973 0.552876 -0.484048 0.410471 2 2020-09-03 -0.526610 0.429193 2.455894 0.366316 3 2020-09-04 0.996290 1.739588 2.203829 0.032343 4 2020-09-05 0.046479 0.604200 -1.042130 0.051650 5 2020-09-06 -0.186728 -1.005533 1.239826 1.058215 6","title":"\u8d4b\u503c"},{"location":"Pandas_Basics/#_15","text":"# \u91cd\u5efa\u7d22\u5f15\uff08reindex\uff09\u53ef\u4ee5\u66f4\u6539\u3001\u6dfb\u52a0\u3001\u5220\u9664\u6307\u5b9a\u8f74\u7684\u7d22\u5f15\uff0c\u5e76\u8fd4\u56de\u6570\u636e\u526f\u672c\uff0c\u5373\u4e0d\u66f4\u6539\u539f\u6570\u636e df1 = df.reindex(index=df.index[0:4], columns=list(df.columns) + [\"E\"]) df1 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D F E 2020-09-01 0.267854 -1.131221 -0.354760 2.230473 1 NaN 2020-09-02 0.401973 0.552876 -0.484048 0.410471 2 NaN 2020-09-03 -0.526610 0.429193 2.455894 0.366316 3 NaN 2020-09-04 0.996290 1.739588 2.203829 0.032343 4 NaN df1.loc[df.index[0]:df.index[1], \"E\"] = 1 df1 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D F E 2020-09-01 0.267854 -1.131221 -0.354760 2.230473 1 1.0 2020-09-02 0.401973 0.552876 -0.484048 0.410471 2 1.0 2020-09-03 -0.526610 0.429193 2.455894 0.366316 3 NaN 2020-09-04 0.996290 1.739588 2.203829 0.032343 4 NaN","title":"\u7f3a\u5931\u503c"},{"location":"Pandas_Basics/#_16","text":"df1.dropna() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D F E 2020-09-01 0.267854 -1.131221 -0.354760 2.230473 1 1.0 2020-09-02 0.401973 0.552876 -0.484048 0.410471 2 1.0","title":"\u5220\u9664\u7f3a\u5931\u503c"},{"location":"Pandas_Basics/#_17","text":"df1.fillna(0) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D F E 2020-09-01 0.267854 -1.131221 -0.354760 2.230473 1 1.0 2020-09-02 0.401973 0.552876 -0.484048 0.410471 2 1.0 2020-09-03 -0.526610 0.429193 2.455894 0.366316 3 0.0 2020-09-04 0.996290 1.739588 2.203829 0.032343 4 0.0","title":"\u586b\u5145\u7f3a\u5931\u503c"},{"location":"Pandas_Basics/#_18","text":"","title":"\u8fd0\u7b97"},{"location":"Pandas_Basics/#_19","text":"# \u63cf\u8ff0\u6027\u7edf\u8ba1 df.mean() A 0.166543 B 0.198184 C 0.669769 D 0.691578 F 3.500000 dtype: float64 # Apply\u51fd\u6570 df.apply(lambda x: x.max() - x.min()) A 1.522901 B 2.870809 C 3.498024 D 2.198130 F 5.000000 dtype: float64","title":"\u7edf\u8ba1"},{"location":"Pandas_Basics/#merge","text":"","title":"\u5408\u5e76\uff08Merge\uff09"},{"location":"Pandas_Basics/#concat","text":"df1 = pd.DataFrame({\"A\": [\"A0\", \"A1\", \"A2\", \"A3\"], \"B\": [\"B0\", \"B1\", \"B2\", \"B3\"], \"C\": [\"C0\", \"C1\", \"C2\", \"C3\"], \"D\": [\"D0\", \"D1\", \"D2\", \"D3\"]}, index=[0, 1, 2, 3]) df2 = pd.DataFrame({\"A\": [\"A4\", \"A5\", \"A6\", \"A7\"], \"B\": [\"B4\", \"B5\", \"B6\", \"B7\"], \"C\": [\"C4\", \"C5\", \"C6\", \"C7\"], \"D\": [\"D4\", \"D5\", \"D6\", \"D7\"]}, index=[4, 5, 6, 7]) df3 = pd.DataFrame({\"A\": [\"A8\", \"A9\", \"A10\", \"A11\"], \"B\": [\"B8\", \"B9\", \"B10\", \"B11\"], \"C\": [\"C8\", \"C9\", \"C10\", \"C11\"], \"D\": [\"D8\", \"D9\", \"D10\", \"D11\"]}, index=[8, 9, 10, 11]) frame = pd.concat([df1, df2, df3]) frame .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D 0 A0 B0 C0 D0 1 A1 B1 C1 D1 2 A2 B2 C2 D2 3 A3 B3 C3 D3 4 A4 B4 C4 D4 5 A5 B5 C5 D5 6 A6 B6 C6 D6 7 A7 B7 C7 D7 8 A8 B8 C8 D8 9 A9 B9 C9 D9 10 A10 B10 C10 D10 11 A11 B11 C11 D11","title":"\u7ed3\u5408\uff08Concat\uff09"},{"location":"Pandas_Basics/#join","text":"left = pd.DataFrame({\"key\": [\"foo\", \"foo\"], \"lval\": [1, 2]}) right = pd.DataFrame({\"key\": [\"foo\", \"foo\"], \"rval\": [4, 5]}) left .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } key lval 0 foo 1 1 foo 2 right .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } key rval 0 foo 4 1 foo 5 pd.merge(left, right, on=\"key\") .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } key lval rval 0 foo 1 4 1 foo 1 5 2 foo 2 4 3 foo 2 5","title":"\u8fde\u63a5\uff08Join\uff09"},{"location":"Pandas_Basics/#append","text":"df = pd.DataFrame(np.random.randn(8, 4), columns=['A', 'B', 'C', 'D']) df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D 0 -0.926318 -1.110969 0.217602 -0.094516 1 1.349012 1.385598 -0.172996 -0.790864 2 -0.417921 -0.004624 -0.509224 -1.550437 3 -0.491223 -0.642262 0.175682 0.721095 4 -0.058397 0.283183 -0.497554 0.739755 5 -0.712672 0.628955 -0.472966 0.318093 6 -0.279831 0.074890 -1.236430 0.592133 7 0.132221 -0.676778 -0.701541 -1.210815 s = df.loc[3] s A -0.491223 B -0.642262 C 0.175682 D 0.721095 Name: 3, dtype: float64 df.append(s, ignore_index=True) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D 0 -0.926318 -1.110969 0.217602 -0.094516 1 1.349012 1.385598 -0.172996 -0.790864 2 -0.417921 -0.004624 -0.509224 -1.550437 3 -0.491223 -0.642262 0.175682 0.721095 4 -0.058397 0.283183 -0.497554 0.739755 5 -0.712672 0.628955 -0.472966 0.318093 6 -0.279831 0.074890 -1.236430 0.592133 7 0.132221 -0.676778 -0.701541 -1.210815 8 -0.491223 -0.642262 0.175682 0.721095","title":"\u8ffd\u52a0\uff08Append\uff09"},{"location":"Pandas_Basics/#group-by","text":"df = pd.DataFrame([(\"bird\", \"Falconiformes\", 389.0), (\"bird\", \"Psittaciformes\", 24.0), (\"mammal\", \"Carnivora\", 80.2), (\"mammal\", \"Primates\", np.nan), (\"mammal\", \"Carnivora\", 58)], index=[\"falcon\", \"parrot\", \"lion\", \"monkey\", \"leopard\"], columns=(\"class\", \"order\", \"max_speed\")) df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } class order max_speed falcon bird Falconiformes 389.0 parrot bird Psittaciformes 24.0 lion mammal Carnivora 80.2 monkey mammal Primates NaN leopard mammal Carnivora 58.0 df.groupby(by=[\"class\", \"order\"]).sum() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } max_speed class order bird Falconiformes 389.0 Psittaciformes 24.0 mammal Carnivora 138.2 Primates 0.0","title":"\u5206\u7ec4\uff08Group by\uff09"},{"location":"Pandas_Basics/#reshaping","text":"","title":"\u91cd\u5851\uff08Reshaping\uff09"},{"location":"Pandas_Basics/#stack","text":"tuples = list(zip(*[[\"bar\", \"bar\", \"baz\", \"baz\", \"foo\", \"foo\", \"qux\", \"qux\"], [\"one\", \"two\", \"one\", \"two\", \"one\", \"two\", \"one\", \"two\"]])) index = pd.MultiIndex.from_tuples(tuples, names=[\"first\", \"second\"]) df = pd.DataFrame(np.random.randn(8, 2), index=index, columns=[\"A\", \"B\"]) df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B first second bar one 1.457984 0.864189 two 1.808289 1.558983 baz one 1.388420 -0.746224 two 0.215613 1.050263 foo one -0.536742 0.383083 two 0.751930 -1.717304 qux one 0.929121 -1.075260 two 0.238485 -1.581831 df2 = df[:4] df2 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B first second bar one 1.457984 0.864189 two 1.808289 1.558983 baz one 1.388420 -0.746224 two 0.215613 1.050263 stacked = df2.stack() stacked first second bar one A 1.457984 B 0.864189 two A 1.808289 B 1.558983 baz one A 1.388420 B -0.746224 two A 0.215613 B 1.050263 dtype: float64 stacked.unstack() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B first second bar one 1.457984 0.864189 two 1.808289 1.558983 baz one 1.388420 -0.746224 two 0.215613 1.050263","title":"\u5806\u53e0\uff08Stack\uff09"},{"location":"Pandas_Basics/#pivot-tables","text":"import datetime df = pd.DataFrame({\"A\": [\"one\", \"one\", \"two\", \"three\"] * 3, \"B\": [\"A\", \"B\", \"C\"] * 4, \"C\": [\"foo\", \"foo\", \"foo\", \"bar\", \"bar\", \"bar\"] * 2, \"D\": np.random.randn(12), \"E\": np.random.randn(12), \"F\":[datetime.datetime(2020, i, 1) for i in range(1, 7)] + [datetime.datetime(2020, i, 15) for i in range(1, 7)]}) df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D E F 0 one A foo 0.613701 0.145033 2020-01-01 1 one B foo -1.501934 -2.349162 2020-02-01 2 two C foo -0.626282 1.619653 2020-03-01 3 three A bar 0.281824 -0.355017 2020-04-01 4 one B bar 0.777277 0.141533 2020-05-01 5 one C bar 0.788832 1.354495 2020-06-01 6 two A foo -0.182135 -0.177494 2020-01-15 7 three B foo 1.635379 -0.504184 2020-02-15 8 one C foo 1.287765 0.642662 2020-03-15 9 one A bar 1.534828 0.089097 2020-04-15 10 two B bar 0.109630 0.508206 2020-05-15 11 three C bar -0.543666 -0.779394 2020-06-15 pd.pivot_table(df, values=\"D\", index=[\"A\", \"B\"], columns=[\"C\"]) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } C bar foo A B one A 1.534828 0.613701 B 0.777277 -1.501934 C 0.788832 1.287765 three A 0.281824 NaN B NaN 1.635379 C -0.543666 NaN two A NaN -0.182135 B 0.109630 NaN C NaN -0.626282","title":"\u6570\u636e\u900f\u89c6\u8868\uff08Pivot Tables\uff09"},{"location":"Pandas_Basics/#timeseries","text":"rng = pd.date_range(\"1/1/2020\", periods=10, freq=\"M\") rng DatetimeIndex(['2020-01-31', '2020-02-29', '2020-03-31', '2020-04-30', '2020-05-31', '2020-06-30', '2020-07-31', '2020-08-31', '2020-09-30', '2020-10-31'], dtype='datetime64[ns]', freq='M')","title":"\u65f6\u95f4\u5e8f\u5217\uff08TimeSeries\uff09"},{"location":"Pandas_Basics/#categoricals","text":"df = pd.DataFrame({\"A\": [\"a\", \"b\", \"c\", \"a\"]}) df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A 0 a 1 b 2 c 3 a df[\"B\"] = df[\"A\"].astype(\"category\") df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B 0 a a 1 b b 2 c c 3 a a","title":"\u7c7b\u522b\u578b\uff08Categoricals\uff09"},{"location":"Python_Basics/","text":"Python \u901f\u67e5\u8868 \u6570\u636e\u7ed3\u6784 Python3 \u7684\u516d\u4e2a\u6807\u51c6\u6570\u636e\u7c7b\u578b\u4e2d\uff1a \u4e0d\u53ef\u53d8\u6570\u636e\uff083 \u4e2a\uff09\uff1a Number\uff08\u6570\u5b57\uff09\u3001String\uff08\u5b57\u7b26\u4e32\uff09\u3001Tuple\uff08\u5143\u7ec4\uff09 \u53ef\u53d8\u6570\u636e\uff083 \u4e2a\uff09\uff1a List\uff08\u5217\u8868\uff09\u3001Dictionary\uff08\u5b57\u5178\uff09\u3001Set\uff08\u96c6\u5408\uff09 \u5b57\u7b26\u4e32 s1 = 'hello, world!' s2 = \"hello, world!\" # \u4ee5\u4e09\u4e2a\u53cc\u5f15\u53f7\u6216\u5355\u5f15\u53f7\u5f00\u5934\u7684\u5b57\u7b26\u4e32\u53ef\u4ee5\u6362\u884c s3 = \"\"\" hello, world! \"\"\" print(s1, s2, s3, end='') \u5b57\u7b26\u4e32\u8f6c\u4e49 \u5728\u5b57\u7b26\u4e32\u4e2d\u4f7f\u7528 \\ \uff08\u53cd\u659c\u6760\uff09\u6765\u8868\u793a\u8f6c\u4e49 \\n \u8868\u793a\u6362\u884c\uff0c \\t \u8868\u793a\u5236\u8868\u7b26 \u5982\u679c\u60f3\u5728\u5b57\u7b26\u4e32\u4e2d\u8868\u793a ' \u8981\u5199\u6210 \\' \uff0c\u540c\u7406\u60f3\u8868\u793a \\ \u8981\u5199\u6210 \\\\ s1 = '\\'hello, world!\\'' s2 = '\\n\\\\hello, world!\\\\\\n' print(s1, s2, end='') \u5728 \\ \u540e\u9762\u8fd8\u53ef\u4ee5\u8ddf\u4e00\u4e2a\u516b\u8fdb\u5236\u6216\u8005\u5341\u516d\u8fdb\u5236\u6570\u6765\u8868\u793a\u5b57\u7b26 \u4f8b\u5982 \\141 \u548c \\x61 \u90fd\u4ee3\u8868\u5c0f\u5199\u5b57\u6bcd a \uff0c\u524d\u8005\u662f\u516b\u8fdb\u5236\uff0c\u540e\u8005\u662f\u5341\u516d\u8fdb\u5236 \u4e5f\u53ef\u4ee5\u5728 \\ \u540e\u9762\u8ddfUnicode\u5b57\u7b26\u7f16\u7801\u6765\u8868\u793a\u5b57\u7b26\uff0c\u4f8b\u5982 \\u83dc\\u9e1f \u4ee3\u8868\u7684\u662f\u4e2d\u6587\u201c\u83dc\u9e1f\u201d s1 = '\\141\\142\\143\\x61\\x62\\x63' s2 = '\\u83dc\\u9e1f' print(s1, s2) \u5982\u679c\u4e0d\u5e0c\u671b\u5b57\u7b26\u4e32\u4e2d\u7684 \\ \u8868\u793a\u8f6c\u4e49\uff0c\u901a\u8fc7\u5728\u5b57\u7b26\u4e32\u7684\u6700\u524d\u9762\u52a0\u4e0a\u5b57\u6bcd r \u52a0\u4ee5\u8bf4\u660e s1 = r'\\'hello, world!\\'' s2 = r'\\n\\\\hello, world!\\\\\\n' print(s1, s2, end='') \u5b57\u7b26\u4e32\u8fd0\u7b97\u7b26 + \u8fd0\u7b97\u7b26\u5b9e\u73b0\u5b57\u7b26\u4e32\u7684\u62fc\u63a5 * \u8fd0\u7b97\u7b26\u91cd\u590d\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u5185\u5bb9 in \u548c not in \u5224\u65ad\u4e00\u4e2a\u5b57\u7b26\u4e32\u662f\u5426\u5305\u542b\u53e6\u5916\u4e00\u4e2a\u5b57\u7b26\u4e32\uff08\u6210\u5458\u8fd0\u7b97\uff09 [] \u548c [:] \u8fd0\u7b97\u7b26\u4ece\u5b57\u7b26\u4e32\u53d6\u51fa\u67d0\u4e2a\u5b57\u7b26\u6216\u67d0\u4e9b\u5b57\u7b26\uff08\u5207\u7247\u8fd0\u7b97\uff09 s1 = 'hello ' * 3 print(s1) # hello hello hello s2 = 'world' s1 += s2 print(s1) # hello hello hello world print('ll' in s1) # True print('good' in s1) # False str2 = 'abc123456' # \u4ece\u5b57\u7b26\u4e32\u4e2d\u53d6\u51fa\u6307\u5b9a\u4f4d\u7f6e\u7684\u5b57\u7b26(\u7d22\u5f15) print(str2[2]) # c # \u5b57\u7b26\u4e32\u5207\u7247(\u4ece\u6307\u5b9a\u7684\u5f00\u59cb\u7d22\u5f15\u5230\u6307\u5b9a\u7684\u7ed3\u675f\u7d22\u5f15) print(str2[2:5]) # c12 print(str2[2:]) # c123456 print(str2[2::2]) # c246 print(str2[::2]) # ac246 print(str2[::-1]) # 654321cba print(str2[-3:-1]) # 45 \u5b57\u7b26\u4e32\u65b9\u6cd5 str1 = 'hello, world!' # \u901a\u8fc7\u5185\u7f6e\u51fd\u6570len\u8ba1\u7b97\u5b57\u7b26\u4e32\u7684\u957f\u5ea6 print(len(str1)) # 13 # \u83b7\u5f97\u5b57\u7b26\u4e32\u9996\u5b57\u6bcd\u5927\u5199\u7684\u62f7\u8d1d print(str1.capitalize()) # Hello, world! # \u83b7\u5f97\u5b57\u7b26\u4e32\u6bcf\u4e2a\u5355\u8bcd\u9996\u5b57\u6bcd\u5927\u5199\u7684\u62f7\u8d1d print(str1.title()) # Hello, World! # \u83b7\u5f97\u5b57\u7b26\u4e32\u53d8\u5927\u5199\u540e\u7684\u62f7\u8d1d print(str1.upper()) # HELLO, WORLD! # \u4ece\u5b57\u7b26\u4e32\u4e2d\u67e5\u627e\u5b50\u4e32\u6240\u5728\u4f4d\u7f6e print(str1.find('or')) # 8 print(str1.find('shit')) # -1 # \u4e0efind\u7c7b\u4f3c\u4f46\u627e\u4e0d\u5230\u5b50\u4e32\u65f6\u4f1a\u5f15\u53d1\u5f02\u5e38 # print(str1.index('or')) # print(str1.index('shit')) # \u68c0\u67e5\u5b57\u7b26\u4e32\u662f\u5426\u4ee5\u6307\u5b9a\u7684\u5b57\u7b26\u4e32\u5f00\u5934 print(str1.startswith('He')) # False print(str1.startswith('hel')) # True # \u68c0\u67e5\u5b57\u7b26\u4e32\u662f\u5426\u4ee5\u6307\u5b9a\u7684\u5b57\u7b26\u4e32\u7ed3\u5c3e print(str1.endswith('!')) # True # \u5c06\u5b57\u7b26\u4e32\u4ee5\u6307\u5b9a\u7684\u5bbd\u5ea6\u5c45\u4e2d\u5e76\u5728\u4e24\u4fa7\u586b\u5145\u6307\u5b9a\u7684\u5b57\u7b26 print(str1.center(50, '*')) # \u5c06\u5b57\u7b26\u4e32\u4ee5\u6307\u5b9a\u7684\u5bbd\u5ea6\u9760\u53f3\u653e\u7f6e\u5de6\u4fa7\u586b\u5145\u6307\u5b9a\u7684\u5b57\u7b26 print(str1.rjust(50, ' ')) str2 = 'abc123456' # \u68c0\u67e5\u5b57\u7b26\u4e32\u662f\u5426\u7531\u6570\u5b57\u6784\u6210 print(str2.isdigit()) # False # \u68c0\u67e5\u5b57\u7b26\u4e32\u662f\u5426\u4ee5\u5b57\u6bcd\u6784\u6210 print(str2.isalpha()) # False # \u68c0\u67e5\u5b57\u7b26\u4e32\u662f\u5426\u4ee5\u6570\u5b57\u548c\u5b57\u6bcd\u6784\u6210 print(str2.isalnum()) # True str3 = ' jackfrued@126.com ' print(str3) # \u83b7\u5f97\u5b57\u7b26\u4e32\u4fee\u526a\u5de6\u53f3\u4e24\u4fa7\u7a7a\u683c\u4e4b\u540e\u7684\u62f7\u8d1d print(str3.strip()) \u5b57\u7b26\u4e32\u683c\u5f0f\u5316 \u53ef\u4ee5\u7528\u4e0b\u9762\u7684\u65b9\u5f0f\u6765\u683c\u5f0f\u5316\u8f93\u51fa\u5b57\u7b26\u4e32 a, b = 5, 10 print('%d * %d = %d' % (a, b, a * b)) \u53ef\u4ee5\u7528\u5b57\u7b26\u4e32\u63d0\u4f9b\u7684\u65b9\u6cd5\u6765\u5b8c\u6210\u5b57\u7b26\u4e32\u7684\u683c\u5f0f a, b = 5, 10 print('{0} * {1} = {2}'.format(a, b, a * b)) Python 3.6 \u4ee5\u540e\uff0c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u8fd8\u6709\u66f4\u4e3a\u7b80\u6d01\u7684\u4e66\u5199\u65b9\u5f0f\uff0c\u5c31\u662f\u5728\u5b57\u7b26\u4e32\u524d\u52a0\u4e0a\u5b57\u6bcd f \uff0c\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u7684\u8bed\u6cd5\u7cd6\u6765\u7b80\u5316\u4e0a\u9762\u7684\u4ee3\u7801 a, b = 5, 10 print(f'{a} * {b} = {a * b}') \u5217\u8868 \u6ce8\u610f\uff1a \u5b57\u7b26\u4e32\u7c7b\u578b\uff08str\uff09\u548c\u6570\u503c\u7c7b\u578b\uff08int\u548cfloat\uff09\u7684\u533a\u522b \u6570\u503c\u7c7b\u578b\u662f\u6807\u91cf\u7c7b\u578b\uff0c\u8fd9\u79cd\u7c7b\u578b\u7684\u5bf9\u8c61\u6ca1\u6709\u53ef\u4ee5\u8bbf\u95ee\u7684\u5185\u90e8\u7ed3\u6784 \u5b57\u7b26\u4e32\u7c7b\u578b\u662f\u4e00\u79cd\u7ed3\u6784\u5316\u7684\u3001\u975e\u6807\u91cf\u7c7b\u578b\uff0c\u6240\u4ee5\u624d\u4f1a\u6709\u4e00\u7cfb\u5217\u7684\u5c5e\u6027\u548c\u65b9\u6cd5 \u5217\u8868\uff08 list \uff09\uff0c\u4e5f\u662f\u4e00\u79cd\u7ed3\u6784\u5316\u7684\u3001\u975e\u6807\u91cf\u7c7b\u578b\uff0c\u5b83\u662f\u503c\u7684\u6709\u5e8f\u5e8f\u5217\uff0c\u6bcf\u4e2a\u503c\u90fd\u53ef\u4ee5\u901a\u8fc7\u7d22\u5f15\u8fdb\u884c\u6807\u8bc6 \u5b9a\u4e49\u5217\u8868\u53ef\u4ee5\u5c06\u5217\u8868\u7684\u5143\u7d20\u653e\u5728 [] \u4e2d\uff0c\u591a\u4e2a\u5143\u7d20\u7528 , \u8fdb\u884c\u5206\u9694 \u4f7f\u7528 for \u5faa\u73af\u5bf9\u5217\u8868\u5143\u7d20\u8fdb\u884c\u904d\u5386 \u4f7f\u7528 [] \u6216 [:] \u8fd0\u7b97\u7b26\u53d6\u51fa\u5217\u8868\u4e2d\u7684\u4e00\u4e2a\u6216\u591a\u4e2a\u5143\u7d20 \u521b\u5efa\u5217\u8868\u3001\u904d\u5386\u5217\u8868\u4ee5\u53ca\u5217\u8868\u7d22\u5f15 list1 = [1, 3, 5, 7, 100] print(list1) # [1, 3, 5, 7, 100] # \u4e58\u53f7\u8868\u793a\u5217\u8868\u5143\u7d20\u7684\u91cd\u590d list2 = ['hello'] * 3 print(list2) # ['hello', 'hello', 'hello'] # \u8ba1\u7b97\u5217\u8868\u957f\u5ea6(\u5143\u7d20\u4e2a\u6570) print(len(list1)) # 5 # \u4e0b\u6807(\u7d22\u5f15)\u8fd0\u7b97 print(list1[0]) # 1 print(list1[4]) # 100 # print(list1[5]) # IndexError: list index out of range print(list1[-1]) # 100 print(list1[-3]) # 5 list1[2] = 300 print(list1) # [1, 3, 300, 7, 100] # \u901a\u8fc7\u5faa\u73af\u7528\u4e0b\u6807\u904d\u5386\u5217\u8868\u5143\u7d20 for index in range(len(list1)): print(list1[index]) # \u901a\u8fc7for\u5faa\u73af\u904d\u5386\u5217\u8868\u5143\u7d20 for elem in list1: print(elem) # \u901a\u8fc7enumerate\u51fd\u6570\u5904\u7406\u5217\u8868\u4e4b\u540e\u518d\u904d\u5386\u53ef\u4ee5\u540c\u65f6\u83b7\u5f97\u5143\u7d20\u7d22\u5f15\u548c\u503c for index, elem in enumerate(list1): print(index, elem) \u5217\u8868\u6dfb\u52a0\u5143\u7d20\u3001\u79fb\u9664\u5143\u7d20 list1 = [1, 3, 5, 7, 100] # \u6dfb\u52a0\u5143\u7d20 list1.append(200) list1.insert(1, 400) # \u5408\u5e76\u4e24\u4e2a\u5217\u8868 # list1.extend([1000, 2000]) list1 += [1000, 2000] print(list1) # [1, 400, 3, 5, 7, 100, 200, 1000, 2000] print(len(list1)) # 9 # \u5148\u901a\u8fc7\u6210\u5458\u8fd0\u7b97\u5224\u65ad\u5143\u7d20\u662f\u5426\u5728\u5217\u8868\u4e2d\uff0c\u5982\u679c\u5b58\u5728\u5c31\u5220\u9664\u8be5\u5143\u7d20 if 3 in list1: list1.remove(3) if 1234 in list1: list1.remove(1234) print(list1) # [1, 400, 5, 7, 100, 200, 1000, 2000] # \u4ece\u6307\u5b9a\u7684\u4f4d\u7f6e\u5220\u9664\u5143\u7d20 list1.pop(0) list1.pop(len(list1) - 1) print(list1) # [400, 5, 7, 100, 200, 1000] # \u6e05\u7a7a\u5217\u8868\u5143\u7d20 list1.clear() print(list1) # [] \u5217\u8868\u7684\u5207\u7247 fruits = ['grape', 'apple', 'strawberry', 'waxberry'] fruits += ['pitaya', 'pear', 'mango'] # \u5217\u8868\u5207\u7247 fruits2 = fruits[1:4] print(fruits2) # apple strawberry waxberry # \u53ef\u4ee5\u901a\u8fc7\u5b8c\u6574\u5207\u7247\u64cd\u4f5c\u6765\u590d\u5236\u5217\u8868 fruits3 = fruits[:] print(fruits3) # ['grape', 'apple', 'strawberry', 'waxberry', 'pitaya', 'pear', 'mango'] fruits4 = fruits[-3:-1] print(fruits4) # ['pitaya', 'pear'] # \u53ef\u4ee5\u901a\u8fc7\u53cd\u5411\u5207\u7247\u64cd\u4f5c\u6765\u83b7\u5f97\u5012\u8f6c\u540e\u7684\u5217\u8868\u7684\u62f7\u8d1d fruits5 = fruits[::-1] print(fruits5) # ['mango', 'pear', 'pitaya', 'waxberry', 'strawberry', 'apple', 'grape'] \u5217\u8868\u7684\u6392\u5e8f list1 = ['orange', 'apple', 'zoo', 'internationalization', 'blueberry'] list2 = sorted(list1) # sorted\u51fd\u6570\u8fd4\u56de\u5217\u8868\u6392\u5e8f\u540e\u7684\u62f7\u8d1d\u4e0d\u4f1a\u4fee\u6539\u4f20\u5165\u7684\u5217\u8868 # \u51fd\u6570\u7684\u8bbe\u8ba1\u5c31\u5e94\u8be5\u50cfsorted\u51fd\u6570\u4e00\u6837\u5c3d\u53ef\u80fd\u4e0d\u4ea7\u751f\u526f\u4f5c\u7528 list3 = sorted(list1, reverse=True) # \u901a\u8fc7key\u5173\u952e\u5b57\u53c2\u6570\u6307\u5b9a\u6839\u636e\u5b57\u7b26\u4e32\u957f\u5ea6\u8fdb\u884c\u6392\u5e8f\u800c\u4e0d\u662f\u9ed8\u8ba4\u7684\u5b57\u6bcd\u8868\u987a\u5e8f list4 = sorted(list1, key=len) print(list1) print(list2) print(list3) print(list4) # \u7ed9\u5217\u8868\u5bf9\u8c61\u53d1\u51fa\u6392\u5e8f\u6d88\u606f\u76f4\u63a5\u5728\u5217\u8868\u5bf9\u8c61\u4e0a\u8fdb\u884c\u6392\u5e8f list1.sort(reverse=True) print(list1) \u5217\u8868\u63a8\u5bfc\u5f0f f = [x for x in range(1, 10)] print(f) f = [x + y for x in 'ABCDE' for y in '1234567'] print(f) # \u7528\u5217\u8868\u63a8\u5bfc\u5f0f\u521b\u5efa\u5217\u8868\u5bb9\u5668 # \u7528\u8fd9\u79cd\u8bed\u6cd5\u521b\u5efa\u5217\u8868\u4e4b\u540e\u5143\u7d20\u5df2\u7ecf\u51c6\u5907\u5c31\u7eea\u6240\u4ee5\u9700\u8981\u8017\u8d39\u8f83\u591a\u7684\u5185\u5b58\u7a7a\u95f4 f = [x ** 2 for x in range(1, 1000)] print(sys.getsizeof(f)) # \u67e5\u770b\u5bf9\u8c61\u5360\u7528\u5185\u5b58\u7684\u5b57\u8282\u6570 print(f) # \u8bf7\u6ce8\u610f\u4e0b\u9762\u7684\u4ee3\u7801\u521b\u5efa\u7684\u4e0d\u662f\u4e00\u4e2a\u5217\u8868\u800c\u662f\u4e00\u4e2a\u751f\u6210\u5668\u5bf9\u8c61 # \u901a\u8fc7\u751f\u6210\u5668\u53ef\u4ee5\u83b7\u53d6\u5230\u6570\u636e\u4f46\u5b83\u4e0d\u5360\u7528\u989d\u5916\u7684\u7a7a\u95f4\u5b58\u50a8\u6570\u636e # \u6bcf\u6b21\u9700\u8981\u6570\u636e\u7684\u65f6\u5019\u5c31\u901a\u8fc7\u5185\u90e8\u7684\u8fd0\u7b97\u5f97\u5230\u6570\u636e(\u9700\u8981\u82b1\u8d39\u989d\u5916\u7684\u65f6\u95f4) f = (x ** 2 for x in range(1, 1000)) print(sys.getsizeof(f)) # \u76f8\u6bd4\u751f\u6210\u5f0f\u751f\u6210\u5668\u4e0d\u5360\u7528\u5b58\u50a8\u6570\u636e\u7684\u7a7a\u95f4 print(f) for val in f: print(val) \u5143\u7ec4 \u5143\u7ec4\u4e0e\u5217\u8868\u7c7b\u4f3c\uff0c\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\u5143\u7ec4\u7684\u5143\u7d20\u4e0d\u80fd\u4fee\u6539 # \u5b9a\u4e49\u5143\u7ec4 t = ('\u83dc\u9e1f', 18, True, '\u56db\u5ddd\u6210\u90fd') print(t) # \u83b7\u53d6\u5143\u7ec4\u4e2d\u7684\u5143\u7d20 print(t[0]) print(t[3]) # \u904d\u5386\u5143\u7ec4\u4e2d\u7684\u503c for member in t: print(member) # \u91cd\u65b0\u7ed9\u5143\u7ec4\u8d4b\u503c # t[0] = '\u738b\u5927\u9524' # TypeError # \u53d8\u91cft\u91cd\u65b0\u5f15\u7528\u4e86\u65b0\u7684\u5143\u7ec4\u539f\u6765\u7684\u5143\u7ec4\u5c06\u88ab\u5783\u573e\u56de\u6536 t = ('\u738b\u5927\u9524', 20, True, '\u4e91\u5357\u6606\u660e') print(t) # \u5c06\u5143\u7ec4\u8f6c\u6362\u6210\u5217\u8868 person = list(t) print(person) # \u5217\u8868\u662f\u53ef\u4ee5\u4fee\u6539\u5b83\u7684\u5143\u7d20\u7684 person[0] = '\u674e\u5c0f\u9f99' person[1] = 25 print(person) # \u5c06\u5217\u8868\u8f6c\u6362\u6210\u5143\u7ec4 fruits_list = ['apple', 'banana', 'orange'] fruits_tuple = tuple(fruits_list) print(fruits_tuple) \u7591\u95ee\uff1a\u6211\u4eec\u5df2\u7ecf\u6709\u4e86\u5217\u8868\u8fd9\u79cd\u6570\u636e\u7ed3\u6784\uff0c\u4e3a\u4ec0\u4e48\u8fd8\u9700\u8981\u5143\u7ec4\u5462\uff1f \u5143\u7ec4\u4e2d\u7684\u5143\u7d20\u662f\u65e0\u6cd5\u4fee\u6539\u7684\uff0c\u5728\u9879\u76ee\u4e2d\u5c24\u5176\u662f\u591a\u7ebf\u7a0b\u73af\u5883\u4e2d\u53ef\u80fd\u66f4\u559c\u6b22\u4f7f\u7528\u7684\u662f\u90a3\u4e9b\u4e0d\u53d8\u5bf9\u8c61\uff08\u4e00\u65b9\u9762\u56e0\u4e3a\u5bf9\u8c61\u72b6\u6001\u4e0d\u80fd\u4fee\u6539\uff0c\u6240\u4ee5\u53ef\u4ee5\u907f\u514d\u7531\u6b64\u5f15\u8d77\u7684\u4e0d\u5fc5\u8981\u7684\u7a0b\u5e8f\u9519\u8bef\uff0c\u7b80\u5355\u7684\u8bf4\u5c31\u662f\u4e00\u4e2a\u4e0d\u53d8\u7684\u5bf9\u8c61\u8981\u6bd4\u53ef\u53d8\u7684\u5bf9\u8c61\u66f4\u52a0\u5bb9\u6613\u7ef4\u62a4\uff1b\u53e6\u4e00\u65b9\u9762\u56e0\u4e3a\u6ca1\u6709\u4efb\u4f55\u4e00\u4e2a\u7ebf\u7a0b\u80fd\u591f\u4fee\u6539\u4e0d\u53d8\u5bf9\u8c61\u7684\u5185\u90e8\u72b6\u6001\uff0c\u4e00\u4e2a\u4e0d\u53d8\u5bf9\u8c61\u81ea\u52a8\u5c31\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u7701\u6389\u5904\u7406\u540c\u6b65\u5316\u7684\u5f00\u9500\u3002\u4e00\u4e2a\u4e0d\u53d8\u5bf9\u8c61\u53ef\u4ee5\u65b9\u4fbf\u7684\u88ab\u5171\u4eab\u8bbf\u95ee\uff09\u3002\u6240\u4ee5\u7ed3\u8bba\u5c31\u662f\uff1a\u5982\u679c\u4e0d\u9700\u8981\u5bf9\u5143\u7d20\u8fdb\u884c\u6dfb\u52a0\u3001\u5220\u9664\u3001\u4fee\u6539\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u5143\u7ec4\uff0c\u5f53\u7136\u5982\u679c\u4e00\u4e2a\u65b9\u6cd5\u8981\u8fd4\u56de\u591a\u4e2a\u503c\uff0c\u4f7f\u7528\u5143\u7ec4\u4e5f\u662f\u4e0d\u9519\u7684\u9009\u62e9 \u5143\u7ec4\u5728\u521b\u5efa\u65f6\u95f4\u548c\u5360\u7528\u7684\u7a7a\u95f4\u4e0a\u9762\u90fd\u4f18\u4e8e\u5217\u8868 \u96c6\u5408 \u8ddf\u6570\u5b66\u4e0a\u7684\u96c6\u5408\u662f\u4e00\u81f4\u7684\uff0c\u4e0d\u5141\u8bb8\u6709\u91cd\u590d\u5143\u7d20\uff0c\u53ef\u4ee5\u8fdb\u884c\u4ea4\u96c6\u3001\u5e76\u96c6\u3001\u5dee\u96c6\u7b49\u8fd0\u7b97 \u521b\u5efa\u96c6\u5408 # \u521b\u5efa\u96c6\u5408\u7684\u5b57\u9762\u91cf\u8bed\u6cd5 set1 = {1, 2, 3, 3, 3, 2} print(set1) print('Length =', len(set1)) # \u521b\u5efa\u96c6\u5408\u7684\u6784\u9020\u5668\u8bed\u6cd5 set2 = set(range(1, 10)) set3 = set((1, 2, 3, 3, 2, 1)) print(set2, set3) # \u521b\u5efa\u96c6\u5408\u7684\u63a8\u5bfc\u5f0f\u8bed\u6cd5(\u63a8\u5bfc\u5f0f\u4e5f\u53ef\u4ee5\u7528\u4e8e\u63a8\u5bfc\u96c6\u5408) set4 = {num for num in range(1, 100) if num % 3 == 0 or num % 5 == 0} print(set4) \u96c6\u5408\u6dfb\u52a0\u5143\u7d20\u3001\u5220\u9664\u5143\u7d20 set1.add(4) set1.add(5) set2.update([11, 12]) set2.discard(5) if 4 in set2: set2.remove(4) print(set1, set2) print(set3.pop()) print(set3) \u96c6\u5408\u7684\u6210\u5458\u3001\u4ea4\u96c6\u3001\u5e76\u96c6\u3001\u5dee\u96c6\u7b49\u8fd0\u7b97 # \u96c6\u5408\u7684\u4ea4\u96c6\u3001\u5e76\u96c6\u3001\u5dee\u96c6\u3001\u5bf9\u79f0\u5dee\u8fd0\u7b97 print(set1 & set2) # print(set1.intersection(set2)) print(set1 | set2) # print(set1.union(set2)) print(set1 - set2) # print(set1.difference(set2)) print(set1 ^ set2) # print(set1.symmetric_difference(set2)) # \u5224\u65ad\u5b50\u96c6\u548c\u8d85\u96c6 print(set2 <= set1) # print(set2.issubset(set1)) print(set3 <= set1) # print(set3.issubset(set1)) print(set1 >= set2) # print(set1.issuperset(set2)) print(set1 >= set3) # print(set1.issuperset(set3)) \u8bf4\u660e\uff1a \u96c6\u5408\u8fdb\u884c\u8fd0\u7b97\u7684\u65f6\u5019\u53ef\u4ee5\u8c03\u7528\u96c6\u5408\u5bf9\u8c61\u7684\u65b9\u6cd5\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u5bf9\u5e94\u7684\u8fd0\u7b97\u7b26\uff0c\u4f8b\u5982 & \u8fd0\u7b97\u7b26\u8ddfintersection\u65b9\u6cd5\u7684\u4f5c\u7528\u662f\u4e00\u6837\u7684\uff0c\u4f46\u662f\u4f7f\u7528\u8fd0\u7b97\u7b26\u8ba9\u4ee3\u7801\u66f4\u52a0\u76f4\u89c2 \u5b57\u5178 \u5b57\u5178\u53ef\u4ee5\u5b58\u50a8\u4efb\u610f\u7c7b\u578b\u5bf9\u8c61\uff0c\u5b83\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u7531\u4e00\u4e2a\u952e\u548c\u4e00\u4e2a\u503c\u7ec4\u6210\u7684\u201c\u952e\u503c\u5bf9\u201d # \u521b\u5efa\u5b57\u5178\u7684\u5b57\u9762\u91cf\u8bed\u6cd5 scores = {'\u83dc\u9e1f': 95, '\u767d\u5143\u82b3': 78, '\u72c4\u4ec1\u6770': 82} print(scores) # \u521b\u5efa\u5b57\u5178\u7684\u6784\u9020\u5668\u8bed\u6cd5 items1 = dict(one=1, two=2, three=3, four=4) # \u901a\u8fc7zip\u51fd\u6570\u5c06\u4e24\u4e2a\u5e8f\u5217\u538b\u6210\u5b57\u5178 items2 = dict(zip(['a', 'b', 'c'], '123')) # \u521b\u5efa\u5b57\u5178\u7684\u63a8\u5bfc\u5f0f\u8bed\u6cd5 items3 = {num: num ** 2 for num in range(1, 10)} print(items1, items2, items3) # \u901a\u8fc7\u952e\u53ef\u4ee5\u83b7\u53d6\u5b57\u5178\u4e2d\u5bf9\u5e94\u7684\u503c print(scores['\u83dc\u9e1f']) print(scores['\u72c4\u4ec1\u6770']) # \u5bf9\u5b57\u5178\u4e2d\u6240\u6709\u952e\u503c\u5bf9\u8fdb\u884c\u904d\u5386 for key in scores: print(f'{key}: {scores[key]}') # \u66f4\u65b0\u5b57\u5178\u4e2d\u7684\u5143\u7d20 scores['\u767d\u5143\u82b3'] = 65 scores['\u8bf8\u845b\u738b\u6717'] = 71 scores.update(\u51b7\u9762=67, \u65b9\u542f\u9e64=85) print(scores) if '\u6b66\u5219\u5929' in scores: print(scores['\u6b66\u5219\u5929']) print(scores.get('\u6b66\u5219\u5929')) # get\u65b9\u6cd5\u4e5f\u662f\u901a\u8fc7\u952e\u83b7\u53d6\u5bf9\u5e94\u7684\u503c\u4f46\u662f\u53ef\u4ee5\u8bbe\u7f6e\u9ed8\u8ba4\u503c print(scores.get('\u6b66\u5219\u5929', 60)) # \u5220\u9664\u5b57\u5178\u4e2d\u7684\u5143\u7d20 print(scores.popitem()) print(scores.popitem()) print(scores.pop('\u83dc\u9e1f', 100)) # \u6e05\u7a7a\u5b57\u5178 scores.clear() print(scores) \u6761\u4ef6\u63a7\u5236 if \u8bed\u53e5 if condition_1: statement_block_1 elif condition_2: statement_block_2 else: statement_block_3 if \u5d4c\u5957 num = int(input(\"\u8f93\u5165\u4e00\u4e2a\u6570\u5b57\uff1a\")) if num % 2 == 0: if num % 3 == 0: print (\"\u4f60\u8f93\u5165\u7684\u6570\u5b57\u53ef\u4ee5\u6574\u9664 2 \u548c 3\") else: print (\"\u4f60\u8f93\u5165\u7684\u6570\u5b57\u53ef\u4ee5\u6574\u9664 2\uff0c\u4f46\u4e0d\u80fd\u6574\u9664 3\") else: if num % 3 == 0: print (\"\u4f60\u8f93\u5165\u7684\u6570\u5b57\u53ef\u4ee5\u6574\u9664 3\uff0c\u4f46\u4e0d\u80fd\u6574\u9664 2\") else: print (\"\u4f60\u8f93\u5165\u7684\u6570\u5b57\u4e0d\u80fd\u6574\u9664 2 \u548c 3\") \u5faa\u73af\u8bed\u53e5 \u5728Python\u4e2d\u6784\u9020\u5faa\u73af\u7ed3\u6784\u6709\u4e24\u79cd\u65b9\u6cd5\uff0c\u4e00\u79cd\u662f while \u5faa\u73af\uff0c\u4e00\u79cd\u662f for-in \u5faa\u73af while \u5faa\u73af # \u731c\u6570\u5b57\u6e38\u620f import random answer = random.randint(1, 100) counter = 0 while True: counter += 1 number = int(input('\u8bf7\u8f93\u5165: ')) if number < answer: print('\u5927\u4e00\u70b9') elif number > answer: print('\u5c0f\u4e00\u70b9') else: print('\u606d\u559c\u4f60\u731c\u5bf9\u4e86!') break print(\"f \u4f60\u603b\u5171\u731c\u4e86 {counter} \u6b21\") if counter > 7: print('\u4f60\u7684\u667a\u5546\u4f59\u989d\u660e\u663e\u4e0d\u8db3') for-in \u5faa\u73af # \u7528for\u5faa\u73af\u5b9e\u73b01~100\u4e4b\u95f4\u7684\u5076\u6570\u6c42\u548c sum = 0 for x in range(2, 101, 2): sum += x print(sum) # for\u5faa\u73af\u7684\u5d4c\u5957 for i in range(1, 6): for j in range(1, i + 1): print(\"*\", end=\"\") print(\"\\r\") * ** *** **** ***** # \u4f7f\u7528\u5185\u7f6eenumerate\u51fd\u6570\u8fdb\u884c\u904d\u5386 for index, item in enumerate(sequence): process(index, item) sequence = [12, 34, 34, 23, 45, 76, 89] for i, j in enumerate(sequence): print(i, j) 0 12 1 34 2 34 3 23 4 45 5 76 6 89 \u8fed\u4ee3\u5668\u4e0e\u751f\u6210\u5668 \u8fed\u4ee3\u5668\u662f\u5b9e\u73b0\u4e86\u8fed\u4ee3\u5668\u534f\u8bae\u7684\u5bf9\u8c61\u3002 Python\u4e2d\u6ca1\u6709\u50cf protocol \u6216 interface \u8fd9\u6837\u7684\u5b9a\u4e49\u534f\u8bae\u7684\u5173\u952e\u5b57\u3002 Python\u4e2d\u7528\u9b54\u672f\u65b9\u6cd5\u8868\u793a\u534f\u8bae\u3002 __iter__ \u548c __next__ \u9b54\u672f\u65b9\u6cd5\u5c31\u662f\u8fed\u4ee3\u5668\u534f\u8bae \u751f\u6210\u5668\u662f\u8bed\u6cd5\u7b80\u5316\u7248\u7684\u8fed\u4ee3\u5668\u3002 \u751f\u6210\u5668\u8fdb\u5316\u4e3a\u534f\u7a0b\u3002 \u751f\u6210\u5668\u5bf9\u8c61\u53ef\u4ee5\u4f7f\u7528 send() \u65b9\u6cd5\u53d1\u9001\u6570\u636e\uff0c\u53d1\u9001\u7684\u6570\u636e\u4f1a\u6210\u4e3a\u751f\u6210\u5668\u51fd\u6570\u4e2d\u901a\u8fc7 yield \u8868\u8fbe\u5f0f\u83b7\u5f97\u7684\u503c\u3002\u8fd9\u6837\uff0c\u751f\u6210\u5668\u5c31\u53ef\u4ee5\u4f5c\u4e3a\u534f\u7a0b\u4f7f\u7528\uff0c\u534f\u7a0b\u7b80\u5355\u7684\u8bf4\u5c31\u662f\u53ef\u4ee5\u76f8\u4e92\u534f\u4f5c\u7684\u5b50\u7a0b\u5e8f\u3002 class Fib(object): \"\"\"\u8fed\u4ee3\u5668\"\"\" def __init__(self, num): self.num = num self.a, self.b = 0, 1 self.idx = 0 def __iter__(self): return self def __next__(self): if self.idx < self.num: self.a, self.b = self.b, self.a + self.b self.idx += 1 return self.a raise StopIteration() def fib(num): \"\"\"\u751f\u6210\u5668\"\"\" a, b = 0, 1 for _ in range(num): a, b = b, a + b yield a def calc_avg(): \"\"\"\u6d41\u5f0f\u8ba1\u7b97\u5e73\u5747\u503c\"\"\" total, counter = 0, 0 avg_value = None while True: value = yield avg_value total, counter = total + value, counter + 1 avg_value = total / counter gen = calc_avg() next(gen) print(gen.send(10)) print(gen.send(20)) print(gen.send(30)) \u51fd\u6570\u548c\u6a21\u5757 \u5148\u6765\u7814\u7a76\u4e00\u9053\u6570\u5b66\u9898\uff0c\u8bf7\u8bf4\u51fa\u4e0b\u9762\u7684\u65b9\u7a0b\u6709\u591a\u5c11\u7ec4\u6b63\u6574\u6570\u89e3 $$ x1 + x2 + x3 + x4 = 8 $$ \u4e0a\u9762\u7684\u95ee\u9898\u7b49\u540c\u4e8e\u5c068\u4e2a\u82f9\u679c\u5206\u6210\u56db\u7ec4\uff0c\u6bcf\u7ec4\u81f3\u5c11\u4e00\u4e2a\u82f9\u679c\u6709\u591a\u5c11\u79cd\u65b9\u6848 \"\"\" \u8f93\u5165M\u548cN\u8ba1\u7b97C(M,N) \"\"\" m = int(input('m = ')) n = int(input('n = ')) fm = 1 for num in range(1, m + 1): fm *= num fn = 1 for num in range(1, n + 1): fn *= num fm_n = 1 for num in range(1, m - n + 1): fm_n *= num print(fm // fn // fm_n) \u51fd\u6570\u7684\u4f5c\u7528 Martin Fowler \u66fe\u7ecf\u8bf4\u8fc7\uff1a\u201c \u4ee3\u7801\u6709\u5f88\u591a\u79cd\u574f\u5473\u9053\uff0c\u91cd\u590d\u662f\u6700\u574f\u7684\u4e00\u79cd\uff01 \u201d\uff0c\u8981\u5199\u51fa\u9ad8\u8d28\u91cf\u7684\u4ee3\u7801\u9996\u5148\u8981\u89e3\u51b3\u7684\u5c31\u662f\u91cd\u590d\u4ee3\u7801\u7684\u95ee\u9898 \u51fd\u6570\u662f\u7ec4\u7ec7\u597d\u7684\uff0c\u53ef\u91cd\u590d\u4f7f\u7528\u7684\uff0c\u7528\u6765\u5b9e\u73b0\u5355\u4e00\uff0c\u6216\u76f8\u5173\u8054\u529f\u80fd\u7684\u4ee3\u7801\u6bb5 \u51fd\u6570\u80fd\u63d0\u9ad8\u5e94\u7528\u7684\u6a21\u5757\u6027\uff0c\u548c\u4ee3\u7801\u7684\u91cd\u590d\u5229\u7528\u7387 \u5b9a\u4e49\u51fd\u6570 \u4f7f\u7528 def \u5173\u952e\u5b57\u6765\u5b9a\u4e49\u51fd\u6570\uff0c\u5728\u51fd\u6570\u540d\u540e\u9762\u7684\u62ec\u53f7\u4e2d\u53ef\u4ee5\u653e\u7f6e\u4f20\u9012\u7ed9\u51fd\u6570\u7684\u53c2\u6570\uff0c\u548c\u6570\u5b66\u4e0a\u7684\u51fd\u6570\u975e\u5e38\u76f8\u4f3c \u7a0b\u5e8f\u4e2d\u51fd\u6570\u7684\u53c2\u6570\u5c31\u76f8\u5f53\u4e8e\u662f\u6570\u5b66\u4e0a\u51fd\u6570\u7684\u81ea\u53d8\u91cf \u51fd\u6570\u6267\u884c\u5b8c\u6210\u540e\u901a\u8fc7 return \u5173\u952e\u5b57\u6765\u8fd4\u56de\u4e00\u4e2a\u503c\uff0c\u76f8\u5f53\u4e8e\u6570\u5b66\u4e0a\u51fd\u6570\u7684\u56e0\u53d8\u91cf \u5bf9\u4e0a\u9762\u7684\u4ee3\u7801\u8fdb\u884c\u91cd\u6784 \"\"\" \u8f93\u5165M\u548cN\u8ba1\u7b97C(M,N) \"\"\" def fac(num): \"\"\"\u6c42\u9636\u4e58\"\"\" result = 1 for n in range(1, num + 1): result *= n return result m = int(input('m = ')) n = int(input('n = ')) # \u5f53\u9700\u8981\u8ba1\u7b97\u9636\u4e58\u7684\u65f6\u5019\u4e0d\u7528\u518d\u5199\u5faa\u73af\u6c42\u9636\u4e58\u800c\u662f\u76f4\u63a5\u8c03\u7528\u5df2\u7ecf\u5b9a\u4e49\u597d\u7684\u51fd\u6570 print(fac(m) // fac(n) // fac(m - n)) \u8bf4\u660e\uff1a Python\u7684 math \u6a21\u5757\u4e2d\u5176\u5b9e\u5df2\u7ecf\u6709\u4e00\u4e2a\u540d\u4e3a factorial \u51fd\u6570\u5b9e\u73b0\u4e86\u9636\u4e58\u8fd0\u7b97\uff0c\u4e8b\u5b9e\u4e0a\u6c42\u9636\u4e58\u5e76\u4e0d\u7528\u81ea\u5df1\u5b9a\u4e49\u51fd\u6570\u3002 \u5b9e\u9645\u5f00\u53d1\u4e2d\u5e76\u4e0d\u5efa\u8bae\u505a\u8fd9\u79cd\u4f4e\u7ea7\u7684\u91cd\u590d\u52b3\u52a8 \u51fd\u6570\u53c2\u6570 \u5728Python\u4e2d\uff0c\u51fd\u6570\u7684\u53c2\u6570\u53ef\u4ee5\u6709\u9ed8\u8ba4\u503c\uff0c\u4e5f\u652f\u6301\u4f7f\u7528\u53ef\u53d8\u53c2\u6570 from random import randint def roll_dice(n=2): \"\"\"\u6447\u8272\u5b50\"\"\" total = 0 for _ in range(n): total += randint(1, 6) return total def add(a=0, b=0, c=0): \"\"\"\u4e09\u4e2a\u6570\u76f8\u52a0\"\"\" return a + b + c # \u5982\u679c\u6ca1\u6709\u6307\u5b9a\u53c2\u6570\u90a3\u4e48\u4f7f\u7528\u9ed8\u8ba4\u503c\u6447\u4e24\u9897\u8272\u5b50 print(roll_dice()) # \u6447\u4e09\u9897\u8272\u5b50 print(roll_dice(3)) print(add()) print(add(1)) print(add(1, 2)) print(add(1, 2, 3)) # \u4f20\u9012\u53c2\u6570\u65f6\u53ef\u4ee5\u4e0d\u6309\u7167\u8bbe\u5b9a\u7684\u987a\u5e8f\u8fdb\u884c\u4f20\u9012 print(add(c=50, a=100, b=200)) \u6211\u4eec\u7ed9\u4e0a\u9762\u4e24\u4e2a\u51fd\u6570\u7684\u53c2\u6570\u90fd\u8bbe\u5b9a\u4e86\u9ed8\u8ba4\u503c\uff0c\u8fd9\u4e5f\u5c31\u610f\u5473\u7740\u5982\u679c\u5728\u8c03\u7528\u51fd\u6570\u7684\u65f6\u5019\u5982\u679c\u6ca1\u6709\u4f20\u5165\u5bf9\u5e94\u53c2\u6570\u7684\u503c\u65f6\u5c06\u4f7f\u7528\u8be5\u53c2\u6570\u7684\u9ed8\u8ba4\u503c\uff0c\u6240\u4ee5\u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\u6211\u4eec\u53ef\u4ee5\u7528\u5404\u79cd\u4e0d\u540c\u7684\u65b9\u5f0f\u53bb\u8c03\u7528 add \u51fd\u6570\uff0c\u8fd9\u8ddf\u5176\u4ed6\u5f88\u591a\u8bed\u8a00\u4e2d\u51fd\u6570\u91cd\u8f7d\u7684\u6548\u679c\u662f\u4e00\u81f4\u7684\u3002 \u5176\u5b9e\u4e0a\u9762\u7684 add \u51fd\u6570\u8fd8\u6709\u66f4\u597d\u7684\u5b9e\u73b0\u65b9\u6848\uff0c\u56e0\u4e3a\u6211\u4eec\u53ef\u80fd\u4f1a\u5bf90\u4e2a\u6216\u591a\u4e2a\u53c2\u6570\u8fdb\u884c\u52a0\u6cd5\u8fd0\u7b97\uff0c\u800c\u5177\u4f53\u6709\u591a\u5c11\u4e2a\u53c2\u6570\u662f\u7531\u8c03\u7528\u8005\u6765\u51b3\u5b9a\uff0c\u6211\u4eec\u4f5c\u4e3a\u51fd\u6570\u7684\u8bbe\u8ba1\u8005\u5bf9\u8fd9\u4e00\u70b9\u662f\u4e00\u65e0\u6240\u77e5\u7684\uff0c\u56e0\u6b64\u5728\u4e0d\u786e\u5b9a\u53c2\u6570\u4e2a\u6570\u7684\u65f6\u5019\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u53ef\u53d8\u53c2\u6570\uff0c\u4ee3\u7801\u5982\u4e0b\u6240\u793a\u3002 # \u5728\u53c2\u6570\u540d\u524d\u9762\u7684*\u8868\u793aargs\u662f\u4e00\u4e2a\u53ef\u53d8\u53c2\u6570 def add(*args): total = 0 for val in args: total += val return total # \u5728\u8c03\u7528add\u51fd\u6570\u65f6\u53ef\u4ee5\u4f20\u51650\u4e2a\u6216\u591a\u4e2a\u53c2\u6570 print(add()) print(add(1)) print(add(1, 2)) print(add(1, 2, 3)) print(add(1, 3, 5, 7, 9)) \u7528\u6a21\u5757\u7ba1\u7406\u51fd\u6570 \u4ece Python \u89e3\u91ca\u5668\u9000\u51fa\u518d\u8fdb\u5165\uff0c\u5b9a\u4e49\u7684\u6240\u6709\u7684\u65b9\u6cd5\u548c\u53d8\u91cf\u5c31\u90fd\u6d88\u5931\u4e86 \u4e3a\u6b64 Python \u63d0\u4f9b\u4e86\u4e00\u4e2a\u529e\u6cd5\uff0c\u628a\u8fd9\u4e9b\u5b9a\u4e49\u5b58\u653e\u5728\u6587\u4ef6\u4e2d\uff0c\u4e3a\u4e00\u4e9b\u811a\u672c\u6216\u8005\u4ea4\u4e92\u5f0f\u7684\u89e3\u91ca\u5668\u5b9e\u4f8b\u4f7f\u7528\uff0c\u8fd9\u4e2a\u6587\u4ef6\u88ab\u79f0\u4e3a\u6a21\u5757 \u6a21\u5757\u662f\u4e00\u4e2a\u5305\u542b\u6240\u6709\u4f60\u5b9a\u4e49\u7684\u51fd\u6570\u548c\u53d8\u91cf\u7684\u6587\u4ef6\uff0c\u5176\u540e\u7f00\u540d\u662f.py \u6a21\u5757\u53ef\u4ee5\u88ab\u522b\u7684\u7a0b\u5e8f\u5f15\u5165\uff0c\u4ee5\u4f7f\u7528\u8be5\u6a21\u5757\u4e2d\u7684\u51fd\u6570\u7b49\u529f\u80fd\uff0c\u8fd9\u4e5f\u662f\u4f7f\u7528 python \u6807\u51c6\u5e93\u7684\u65b9\u6cd5 \u533f\u540d\u51fd\u6570 python\u4f7f\u7528lambda\u6765\u521b\u5efa\u533f\u540d\u51fd\u6570 lambda\u53ea\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u51fd\u6570\u4f53\u6bd4def\u7b80\u5355\u5f88\u591a lambda\u7684\u4e3b\u4f53\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u4ee3\u7801\u5757 lambda\u51fd\u6570\u62e5\u6709\u81ea\u5df1\u7684\u547d\u540d\u7a7a\u95f4\uff0c\u4e14\u4e0d\u80fd\u8bbf\u95ee\u81ea\u5df1\u53c2\u6570\u5217\u8868\u4e4b\u5916\u6216\u5168\u5c40\u547d\u540d\u7a7a\u95f4\u91cc\u7684\u53c2\u6570 \u867d\u7136lambda\u51fd\u6570\u770b\u8d77\u6765\u53ea\u80fd\u5199\u4e00\u884c\uff0c\u5374\u4e0d\u7b49\u540c\u4e8eC\u6216C++\u7684\u5185\u8054\u51fd\u6570\uff0c\u540e\u8005\u7684\u76ee\u7684\u662f\u8c03\u7528\u5c0f\u51fd\u6570\u65f6\u4e0d\u5360\u7528\u6808\u5185\u5b58\u4ece\u800c\u589e\u52a0\u8fd0\u884c\u6548\u7387 \u9519\u8bef\u548c\u5f02\u5e38 \u9762\u5411\u5bf9\u8c61 \u7c7b(Class): \u7528\u6765\u63cf\u8ff0\u5177\u6709\u76f8\u540c\u7684\u5c5e\u6027\u548c\u65b9\u6cd5\u7684\u5bf9\u8c61\u7684\u96c6\u5408\u3002\u5b83\u5b9a\u4e49\u4e86\u8be5\u96c6\u5408\u4e2d\u6bcf\u4e2a\u5bf9\u8c61\u6240\u5171\u6709\u7684\u5c5e\u6027\u548c\u65b9\u6cd5\u3002\u5bf9\u8c61\u662f\u7c7b\u7684\u5b9e\u4f8b\u3002 \u65b9\u6cd5\uff1a \u7c7b\u4e2d\u5b9a\u4e49\u7684\u51fd\u6570\u3002 \u7c7b\u53d8\u91cf\uff1a \u7c7b\u53d8\u91cf\u5728\u6574\u4e2a\u5b9e\u4f8b\u5316\u7684\u5bf9\u8c61\u4e2d\u662f\u516c\u7528\u7684\u3002\u7c7b\u53d8\u91cf\u5b9a\u4e49\u5728\u7c7b\u4e2d\u4e14\u5728\u51fd\u6570\u4f53\u4e4b\u5916\u3002\u7c7b\u53d8\u91cf\u901a\u5e38\u4e0d\u4f5c\u4e3a\u5b9e\u4f8b\u53d8\u91cf\u4f7f\u7528\u3002 \u6570\u636e\u6210\u5458\uff1a \u7c7b\u53d8\u91cf\u6216\u8005\u5b9e\u4f8b\u53d8\u91cf\u7528\u4e8e\u5904\u7406\u7c7b\u53ca\u5176\u5b9e\u4f8b\u5bf9\u8c61\u7684\u76f8\u5173\u7684\u6570\u636e\u3002 \u65b9\u6cd5\u91cd\u5199\uff1a \u5982\u679c\u4ece\u7236\u7c7b\u7ee7\u627f\u7684\u65b9\u6cd5\u4e0d\u80fd\u6ee1\u8db3\u5b50\u7c7b\u7684\u9700\u6c42\uff0c\u53ef\u4ee5\u5bf9\u5176\u8fdb\u884c\u6539\u5199\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u53eb\u65b9\u6cd5\u7684\u8986\u76d6\uff08override\uff09\uff0c\u4e5f\u79f0\u4e3a\u65b9\u6cd5\u7684\u91cd\u5199\u3002 \u5c40\u90e8\u53d8\u91cf\uff1a \u5b9a\u4e49\u5728\u65b9\u6cd5\u4e2d\u7684\u53d8\u91cf\uff0c\u53ea\u4f5c\u7528\u4e8e\u5f53\u524d\u5b9e\u4f8b\u7684\u7c7b\u3002 \u5b9e\u4f8b\u53d8\u91cf\uff1a \u5728\u7c7b\u7684\u58f0\u660e\u4e2d\uff0c\u5c5e\u6027\u662f\u7528\u53d8\u91cf\u6765\u8868\u793a\u7684\uff0c\u8fd9\u79cd\u53d8\u91cf\u5c31\u79f0\u4e3a\u5b9e\u4f8b\u53d8\u91cf\uff0c\u5b9e\u4f8b\u53d8\u91cf\u5c31\u662f\u4e00\u4e2a\u7528 self \u4fee\u9970\u7684\u53d8\u91cf\u3002 \u7ee7\u627f\uff1a \u5373\u4e00\u4e2a\u6d3e\u751f\u7c7b\uff08derived class\uff09\u7ee7\u627f\u57fa\u7c7b\uff08base class\uff09\u7684\u5b57\u6bb5\u548c\u65b9\u6cd5\u3002\u7ee7\u627f\u4e5f\u5141\u8bb8\u628a\u4e00\u4e2a\u6d3e\u751f\u7c7b\u7684\u5bf9\u8c61\u4f5c\u4e3a\u4e00\u4e2a\u57fa\u7c7b\u5bf9\u8c61\u5bf9\u5f85\u3002\u4f8b\u5982\uff0c\u6709\u8fd9\u6837\u4e00\u4e2a\u8bbe\u8ba1\uff1a\u4e00\u4e2aDog\u7c7b\u578b\u7684\u5bf9\u8c61\u6d3e\u751f\u81eaAnimal\u7c7b\uff0c\u8fd9\u662f\u6a21\u62df\"\u662f\u4e00\u4e2a\uff08is-a\uff09\"\u5173\u7cfb\uff08\u4f8b\u56fe\uff0cDog\u662f\u4e00\u4e2aAnimal\uff09\u3002 \u5b9e\u4f8b\u5316\uff1a \u521b\u5efa\u4e00\u4e2a\u7c7b\u7684\u5b9e\u4f8b\uff0c\u7c7b\u7684\u5177\u4f53\u5bf9\u8c61\u3002 \u5bf9\u8c61\uff1a \u901a\u8fc7\u7c7b\u5b9a\u4e49\u7684\u6570\u636e\u7ed3\u6784\u5b9e\u4f8b\u3002\u5bf9\u8c61\u5305\u62ec\u4e24\u4e2a\u6570\u636e\u6210\u5458\uff08\u7c7b\u53d8\u91cf\u548c\u5b9e\u4f8b\u53d8\u91cf\uff09\u548c\u65b9\u6cd5\u3002 \u547d\u540d\u7a7a\u95f4 \u4e00\u822c\u6709\u4e09\u79cd\u547d\u540d\u7a7a\u95f4\uff1a \u5185\u7f6e\u540d\u79f0\uff08built-in names \uff09\uff0c Python \u8bed\u8a00\u5185\u7f6e\u7684\u540d\u79f0\uff0c\u6bd4\u5982\u51fd\u6570\u540d abs\u3001char \u548c\u5f02\u5e38\u540d\u79f0 BaseException\u3001Exception \u7b49\u7b49\u3002 \u5168\u5c40\u540d\u79f0\uff08global names\uff09 \uff0c\u6a21\u5757\u4e2d\u5b9a\u4e49\u7684\u540d\u79f0\uff0c\u8bb0\u5f55\u4e86\u6a21\u5757\u7684\u53d8\u91cf\uff0c\u5305\u62ec\u51fd\u6570\u3001\u7c7b\u3001\u5176\u5b83\u5bfc\u5165\u7684\u6a21\u5757\u3001\u6a21\u5757\u7ea7\u7684\u53d8\u91cf\u548c\u5e38\u91cf\u3002 \u5c40\u90e8\u540d\u79f0\uff08local names\uff09 \uff0c\u51fd\u6570\u4e2d\u5b9a\u4e49\u7684\u540d\u79f0\uff0c\u8bb0\u5f55\u4e86\u51fd\u6570\u7684\u53d8\u91cf\uff0c\u5305\u62ec\u51fd\u6570\u7684\u53c2\u6570\u548c\u5c40\u90e8\u5b9a\u4e49\u7684\u53d8\u91cf\u3002\uff08\u7c7b\u4e2d\u5b9a\u4e49\u7684\u4e5f\u662f\uff09 \u547d\u540d\u7a7a\u95f4\u67e5\u627e\u987a\u5e8f: \u5c40\u90e8\u7684\u547d\u540d\u7a7a\u95f4 -> \u5168\u5c40\u547d\u540d\u7a7a\u95f4 -> \u5185\u7f6e\u547d\u540d\u7a7a\u95f4","title":"3.2 Python Basics"},{"location":"Python_Basics/#python","text":"","title":"Python \u901f\u67e5\u8868"},{"location":"Python_Basics/#_1","text":"Python3 \u7684\u516d\u4e2a\u6807\u51c6\u6570\u636e\u7c7b\u578b\u4e2d\uff1a \u4e0d\u53ef\u53d8\u6570\u636e\uff083 \u4e2a\uff09\uff1a Number\uff08\u6570\u5b57\uff09\u3001String\uff08\u5b57\u7b26\u4e32\uff09\u3001Tuple\uff08\u5143\u7ec4\uff09 \u53ef\u53d8\u6570\u636e\uff083 \u4e2a\uff09\uff1a List\uff08\u5217\u8868\uff09\u3001Dictionary\uff08\u5b57\u5178\uff09\u3001Set\uff08\u96c6\u5408\uff09","title":"\u6570\u636e\u7ed3\u6784"},{"location":"Python_Basics/#_2","text":"s1 = 'hello, world!' s2 = \"hello, world!\" # \u4ee5\u4e09\u4e2a\u53cc\u5f15\u53f7\u6216\u5355\u5f15\u53f7\u5f00\u5934\u7684\u5b57\u7b26\u4e32\u53ef\u4ee5\u6362\u884c s3 = \"\"\" hello, world! \"\"\" print(s1, s2, s3, end='')","title":"\u5b57\u7b26\u4e32"},{"location":"Python_Basics/#_3","text":"\u5728\u5b57\u7b26\u4e32\u4e2d\u4f7f\u7528 \\ \uff08\u53cd\u659c\u6760\uff09\u6765\u8868\u793a\u8f6c\u4e49 \\n \u8868\u793a\u6362\u884c\uff0c \\t \u8868\u793a\u5236\u8868\u7b26 \u5982\u679c\u60f3\u5728\u5b57\u7b26\u4e32\u4e2d\u8868\u793a ' \u8981\u5199\u6210 \\' \uff0c\u540c\u7406\u60f3\u8868\u793a \\ \u8981\u5199\u6210 \\\\ s1 = '\\'hello, world!\\'' s2 = '\\n\\\\hello, world!\\\\\\n' print(s1, s2, end='') \u5728 \\ \u540e\u9762\u8fd8\u53ef\u4ee5\u8ddf\u4e00\u4e2a\u516b\u8fdb\u5236\u6216\u8005\u5341\u516d\u8fdb\u5236\u6570\u6765\u8868\u793a\u5b57\u7b26 \u4f8b\u5982 \\141 \u548c \\x61 \u90fd\u4ee3\u8868\u5c0f\u5199\u5b57\u6bcd a \uff0c\u524d\u8005\u662f\u516b\u8fdb\u5236\uff0c\u540e\u8005\u662f\u5341\u516d\u8fdb\u5236 \u4e5f\u53ef\u4ee5\u5728 \\ \u540e\u9762\u8ddfUnicode\u5b57\u7b26\u7f16\u7801\u6765\u8868\u793a\u5b57\u7b26\uff0c\u4f8b\u5982 \\u83dc\\u9e1f \u4ee3\u8868\u7684\u662f\u4e2d\u6587\u201c\u83dc\u9e1f\u201d s1 = '\\141\\142\\143\\x61\\x62\\x63' s2 = '\\u83dc\\u9e1f' print(s1, s2) \u5982\u679c\u4e0d\u5e0c\u671b\u5b57\u7b26\u4e32\u4e2d\u7684 \\ \u8868\u793a\u8f6c\u4e49\uff0c\u901a\u8fc7\u5728\u5b57\u7b26\u4e32\u7684\u6700\u524d\u9762\u52a0\u4e0a\u5b57\u6bcd r \u52a0\u4ee5\u8bf4\u660e s1 = r'\\'hello, world!\\'' s2 = r'\\n\\\\hello, world!\\\\\\n' print(s1, s2, end='')","title":"\u5b57\u7b26\u4e32\u8f6c\u4e49"},{"location":"Python_Basics/#_4","text":"+ \u8fd0\u7b97\u7b26\u5b9e\u73b0\u5b57\u7b26\u4e32\u7684\u62fc\u63a5 * \u8fd0\u7b97\u7b26\u91cd\u590d\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u5185\u5bb9 in \u548c not in \u5224\u65ad\u4e00\u4e2a\u5b57\u7b26\u4e32\u662f\u5426\u5305\u542b\u53e6\u5916\u4e00\u4e2a\u5b57\u7b26\u4e32\uff08\u6210\u5458\u8fd0\u7b97\uff09 [] \u548c [:] \u8fd0\u7b97\u7b26\u4ece\u5b57\u7b26\u4e32\u53d6\u51fa\u67d0\u4e2a\u5b57\u7b26\u6216\u67d0\u4e9b\u5b57\u7b26\uff08\u5207\u7247\u8fd0\u7b97\uff09 s1 = 'hello ' * 3 print(s1) # hello hello hello s2 = 'world' s1 += s2 print(s1) # hello hello hello world print('ll' in s1) # True print('good' in s1) # False str2 = 'abc123456' # \u4ece\u5b57\u7b26\u4e32\u4e2d\u53d6\u51fa\u6307\u5b9a\u4f4d\u7f6e\u7684\u5b57\u7b26(\u7d22\u5f15) print(str2[2]) # c # \u5b57\u7b26\u4e32\u5207\u7247(\u4ece\u6307\u5b9a\u7684\u5f00\u59cb\u7d22\u5f15\u5230\u6307\u5b9a\u7684\u7ed3\u675f\u7d22\u5f15) print(str2[2:5]) # c12 print(str2[2:]) # c123456 print(str2[2::2]) # c246 print(str2[::2]) # ac246 print(str2[::-1]) # 654321cba print(str2[-3:-1]) # 45","title":"\u5b57\u7b26\u4e32\u8fd0\u7b97\u7b26"},{"location":"Python_Basics/#_5","text":"str1 = 'hello, world!' # \u901a\u8fc7\u5185\u7f6e\u51fd\u6570len\u8ba1\u7b97\u5b57\u7b26\u4e32\u7684\u957f\u5ea6 print(len(str1)) # 13 # \u83b7\u5f97\u5b57\u7b26\u4e32\u9996\u5b57\u6bcd\u5927\u5199\u7684\u62f7\u8d1d print(str1.capitalize()) # Hello, world! # \u83b7\u5f97\u5b57\u7b26\u4e32\u6bcf\u4e2a\u5355\u8bcd\u9996\u5b57\u6bcd\u5927\u5199\u7684\u62f7\u8d1d print(str1.title()) # Hello, World! # \u83b7\u5f97\u5b57\u7b26\u4e32\u53d8\u5927\u5199\u540e\u7684\u62f7\u8d1d print(str1.upper()) # HELLO, WORLD! # \u4ece\u5b57\u7b26\u4e32\u4e2d\u67e5\u627e\u5b50\u4e32\u6240\u5728\u4f4d\u7f6e print(str1.find('or')) # 8 print(str1.find('shit')) # -1 # \u4e0efind\u7c7b\u4f3c\u4f46\u627e\u4e0d\u5230\u5b50\u4e32\u65f6\u4f1a\u5f15\u53d1\u5f02\u5e38 # print(str1.index('or')) # print(str1.index('shit')) # \u68c0\u67e5\u5b57\u7b26\u4e32\u662f\u5426\u4ee5\u6307\u5b9a\u7684\u5b57\u7b26\u4e32\u5f00\u5934 print(str1.startswith('He')) # False print(str1.startswith('hel')) # True # \u68c0\u67e5\u5b57\u7b26\u4e32\u662f\u5426\u4ee5\u6307\u5b9a\u7684\u5b57\u7b26\u4e32\u7ed3\u5c3e print(str1.endswith('!')) # True # \u5c06\u5b57\u7b26\u4e32\u4ee5\u6307\u5b9a\u7684\u5bbd\u5ea6\u5c45\u4e2d\u5e76\u5728\u4e24\u4fa7\u586b\u5145\u6307\u5b9a\u7684\u5b57\u7b26 print(str1.center(50, '*')) # \u5c06\u5b57\u7b26\u4e32\u4ee5\u6307\u5b9a\u7684\u5bbd\u5ea6\u9760\u53f3\u653e\u7f6e\u5de6\u4fa7\u586b\u5145\u6307\u5b9a\u7684\u5b57\u7b26 print(str1.rjust(50, ' ')) str2 = 'abc123456' # \u68c0\u67e5\u5b57\u7b26\u4e32\u662f\u5426\u7531\u6570\u5b57\u6784\u6210 print(str2.isdigit()) # False # \u68c0\u67e5\u5b57\u7b26\u4e32\u662f\u5426\u4ee5\u5b57\u6bcd\u6784\u6210 print(str2.isalpha()) # False # \u68c0\u67e5\u5b57\u7b26\u4e32\u662f\u5426\u4ee5\u6570\u5b57\u548c\u5b57\u6bcd\u6784\u6210 print(str2.isalnum()) # True str3 = ' jackfrued@126.com ' print(str3) # \u83b7\u5f97\u5b57\u7b26\u4e32\u4fee\u526a\u5de6\u53f3\u4e24\u4fa7\u7a7a\u683c\u4e4b\u540e\u7684\u62f7\u8d1d print(str3.strip())","title":"\u5b57\u7b26\u4e32\u65b9\u6cd5"},{"location":"Python_Basics/#_6","text":"\u53ef\u4ee5\u7528\u4e0b\u9762\u7684\u65b9\u5f0f\u6765\u683c\u5f0f\u5316\u8f93\u51fa\u5b57\u7b26\u4e32 a, b = 5, 10 print('%d * %d = %d' % (a, b, a * b)) \u53ef\u4ee5\u7528\u5b57\u7b26\u4e32\u63d0\u4f9b\u7684\u65b9\u6cd5\u6765\u5b8c\u6210\u5b57\u7b26\u4e32\u7684\u683c\u5f0f a, b = 5, 10 print('{0} * {1} = {2}'.format(a, b, a * b)) Python 3.6 \u4ee5\u540e\uff0c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u8fd8\u6709\u66f4\u4e3a\u7b80\u6d01\u7684\u4e66\u5199\u65b9\u5f0f\uff0c\u5c31\u662f\u5728\u5b57\u7b26\u4e32\u524d\u52a0\u4e0a\u5b57\u6bcd f \uff0c\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u7684\u8bed\u6cd5\u7cd6\u6765\u7b80\u5316\u4e0a\u9762\u7684\u4ee3\u7801 a, b = 5, 10 print(f'{a} * {b} = {a * b}')","title":"\u5b57\u7b26\u4e32\u683c\u5f0f\u5316"},{"location":"Python_Basics/#_7","text":"\u6ce8\u610f\uff1a \u5b57\u7b26\u4e32\u7c7b\u578b\uff08str\uff09\u548c\u6570\u503c\u7c7b\u578b\uff08int\u548cfloat\uff09\u7684\u533a\u522b \u6570\u503c\u7c7b\u578b\u662f\u6807\u91cf\u7c7b\u578b\uff0c\u8fd9\u79cd\u7c7b\u578b\u7684\u5bf9\u8c61\u6ca1\u6709\u53ef\u4ee5\u8bbf\u95ee\u7684\u5185\u90e8\u7ed3\u6784 \u5b57\u7b26\u4e32\u7c7b\u578b\u662f\u4e00\u79cd\u7ed3\u6784\u5316\u7684\u3001\u975e\u6807\u91cf\u7c7b\u578b\uff0c\u6240\u4ee5\u624d\u4f1a\u6709\u4e00\u7cfb\u5217\u7684\u5c5e\u6027\u548c\u65b9\u6cd5 \u5217\u8868\uff08 list \uff09\uff0c\u4e5f\u662f\u4e00\u79cd\u7ed3\u6784\u5316\u7684\u3001\u975e\u6807\u91cf\u7c7b\u578b\uff0c\u5b83\u662f\u503c\u7684\u6709\u5e8f\u5e8f\u5217\uff0c\u6bcf\u4e2a\u503c\u90fd\u53ef\u4ee5\u901a\u8fc7\u7d22\u5f15\u8fdb\u884c\u6807\u8bc6 \u5b9a\u4e49\u5217\u8868\u53ef\u4ee5\u5c06\u5217\u8868\u7684\u5143\u7d20\u653e\u5728 [] \u4e2d\uff0c\u591a\u4e2a\u5143\u7d20\u7528 , \u8fdb\u884c\u5206\u9694 \u4f7f\u7528 for \u5faa\u73af\u5bf9\u5217\u8868\u5143\u7d20\u8fdb\u884c\u904d\u5386 \u4f7f\u7528 [] \u6216 [:] \u8fd0\u7b97\u7b26\u53d6\u51fa\u5217\u8868\u4e2d\u7684\u4e00\u4e2a\u6216\u591a\u4e2a\u5143\u7d20","title":"\u5217\u8868"},{"location":"Python_Basics/#_8","text":"list1 = [1, 3, 5, 7, 100] print(list1) # [1, 3, 5, 7, 100] # \u4e58\u53f7\u8868\u793a\u5217\u8868\u5143\u7d20\u7684\u91cd\u590d list2 = ['hello'] * 3 print(list2) # ['hello', 'hello', 'hello'] # \u8ba1\u7b97\u5217\u8868\u957f\u5ea6(\u5143\u7d20\u4e2a\u6570) print(len(list1)) # 5 # \u4e0b\u6807(\u7d22\u5f15)\u8fd0\u7b97 print(list1[0]) # 1 print(list1[4]) # 100 # print(list1[5]) # IndexError: list index out of range print(list1[-1]) # 100 print(list1[-3]) # 5 list1[2] = 300 print(list1) # [1, 3, 300, 7, 100] # \u901a\u8fc7\u5faa\u73af\u7528\u4e0b\u6807\u904d\u5386\u5217\u8868\u5143\u7d20 for index in range(len(list1)): print(list1[index]) # \u901a\u8fc7for\u5faa\u73af\u904d\u5386\u5217\u8868\u5143\u7d20 for elem in list1: print(elem) # \u901a\u8fc7enumerate\u51fd\u6570\u5904\u7406\u5217\u8868\u4e4b\u540e\u518d\u904d\u5386\u53ef\u4ee5\u540c\u65f6\u83b7\u5f97\u5143\u7d20\u7d22\u5f15\u548c\u503c for index, elem in enumerate(list1): print(index, elem)","title":"\u521b\u5efa\u5217\u8868\u3001\u904d\u5386\u5217\u8868\u4ee5\u53ca\u5217\u8868\u7d22\u5f15"},{"location":"Python_Basics/#_9","text":"list1 = [1, 3, 5, 7, 100] # \u6dfb\u52a0\u5143\u7d20 list1.append(200) list1.insert(1, 400) # \u5408\u5e76\u4e24\u4e2a\u5217\u8868 # list1.extend([1000, 2000]) list1 += [1000, 2000] print(list1) # [1, 400, 3, 5, 7, 100, 200, 1000, 2000] print(len(list1)) # 9 # \u5148\u901a\u8fc7\u6210\u5458\u8fd0\u7b97\u5224\u65ad\u5143\u7d20\u662f\u5426\u5728\u5217\u8868\u4e2d\uff0c\u5982\u679c\u5b58\u5728\u5c31\u5220\u9664\u8be5\u5143\u7d20 if 3 in list1: list1.remove(3) if 1234 in list1: list1.remove(1234) print(list1) # [1, 400, 5, 7, 100, 200, 1000, 2000] # \u4ece\u6307\u5b9a\u7684\u4f4d\u7f6e\u5220\u9664\u5143\u7d20 list1.pop(0) list1.pop(len(list1) - 1) print(list1) # [400, 5, 7, 100, 200, 1000] # \u6e05\u7a7a\u5217\u8868\u5143\u7d20 list1.clear() print(list1) # []","title":"\u5217\u8868\u6dfb\u52a0\u5143\u7d20\u3001\u79fb\u9664\u5143\u7d20"},{"location":"Python_Basics/#_10","text":"fruits = ['grape', 'apple', 'strawberry', 'waxberry'] fruits += ['pitaya', 'pear', 'mango'] # \u5217\u8868\u5207\u7247 fruits2 = fruits[1:4] print(fruits2) # apple strawberry waxberry # \u53ef\u4ee5\u901a\u8fc7\u5b8c\u6574\u5207\u7247\u64cd\u4f5c\u6765\u590d\u5236\u5217\u8868 fruits3 = fruits[:] print(fruits3) # ['grape', 'apple', 'strawberry', 'waxberry', 'pitaya', 'pear', 'mango'] fruits4 = fruits[-3:-1] print(fruits4) # ['pitaya', 'pear'] # \u53ef\u4ee5\u901a\u8fc7\u53cd\u5411\u5207\u7247\u64cd\u4f5c\u6765\u83b7\u5f97\u5012\u8f6c\u540e\u7684\u5217\u8868\u7684\u62f7\u8d1d fruits5 = fruits[::-1] print(fruits5) # ['mango', 'pear', 'pitaya', 'waxberry', 'strawberry', 'apple', 'grape']","title":"\u5217\u8868\u7684\u5207\u7247"},{"location":"Python_Basics/#_11","text":"list1 = ['orange', 'apple', 'zoo', 'internationalization', 'blueberry'] list2 = sorted(list1) # sorted\u51fd\u6570\u8fd4\u56de\u5217\u8868\u6392\u5e8f\u540e\u7684\u62f7\u8d1d\u4e0d\u4f1a\u4fee\u6539\u4f20\u5165\u7684\u5217\u8868 # \u51fd\u6570\u7684\u8bbe\u8ba1\u5c31\u5e94\u8be5\u50cfsorted\u51fd\u6570\u4e00\u6837\u5c3d\u53ef\u80fd\u4e0d\u4ea7\u751f\u526f\u4f5c\u7528 list3 = sorted(list1, reverse=True) # \u901a\u8fc7key\u5173\u952e\u5b57\u53c2\u6570\u6307\u5b9a\u6839\u636e\u5b57\u7b26\u4e32\u957f\u5ea6\u8fdb\u884c\u6392\u5e8f\u800c\u4e0d\u662f\u9ed8\u8ba4\u7684\u5b57\u6bcd\u8868\u987a\u5e8f list4 = sorted(list1, key=len) print(list1) print(list2) print(list3) print(list4) # \u7ed9\u5217\u8868\u5bf9\u8c61\u53d1\u51fa\u6392\u5e8f\u6d88\u606f\u76f4\u63a5\u5728\u5217\u8868\u5bf9\u8c61\u4e0a\u8fdb\u884c\u6392\u5e8f list1.sort(reverse=True) print(list1)","title":"\u5217\u8868\u7684\u6392\u5e8f"},{"location":"Python_Basics/#_12","text":"f = [x for x in range(1, 10)] print(f) f = [x + y for x in 'ABCDE' for y in '1234567'] print(f) # \u7528\u5217\u8868\u63a8\u5bfc\u5f0f\u521b\u5efa\u5217\u8868\u5bb9\u5668 # \u7528\u8fd9\u79cd\u8bed\u6cd5\u521b\u5efa\u5217\u8868\u4e4b\u540e\u5143\u7d20\u5df2\u7ecf\u51c6\u5907\u5c31\u7eea\u6240\u4ee5\u9700\u8981\u8017\u8d39\u8f83\u591a\u7684\u5185\u5b58\u7a7a\u95f4 f = [x ** 2 for x in range(1, 1000)] print(sys.getsizeof(f)) # \u67e5\u770b\u5bf9\u8c61\u5360\u7528\u5185\u5b58\u7684\u5b57\u8282\u6570 print(f) # \u8bf7\u6ce8\u610f\u4e0b\u9762\u7684\u4ee3\u7801\u521b\u5efa\u7684\u4e0d\u662f\u4e00\u4e2a\u5217\u8868\u800c\u662f\u4e00\u4e2a\u751f\u6210\u5668\u5bf9\u8c61 # \u901a\u8fc7\u751f\u6210\u5668\u53ef\u4ee5\u83b7\u53d6\u5230\u6570\u636e\u4f46\u5b83\u4e0d\u5360\u7528\u989d\u5916\u7684\u7a7a\u95f4\u5b58\u50a8\u6570\u636e # \u6bcf\u6b21\u9700\u8981\u6570\u636e\u7684\u65f6\u5019\u5c31\u901a\u8fc7\u5185\u90e8\u7684\u8fd0\u7b97\u5f97\u5230\u6570\u636e(\u9700\u8981\u82b1\u8d39\u989d\u5916\u7684\u65f6\u95f4) f = (x ** 2 for x in range(1, 1000)) print(sys.getsizeof(f)) # \u76f8\u6bd4\u751f\u6210\u5f0f\u751f\u6210\u5668\u4e0d\u5360\u7528\u5b58\u50a8\u6570\u636e\u7684\u7a7a\u95f4 print(f) for val in f: print(val)","title":"\u5217\u8868\u63a8\u5bfc\u5f0f"},{"location":"Python_Basics/#_13","text":"\u5143\u7ec4\u4e0e\u5217\u8868\u7c7b\u4f3c\uff0c\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\u5143\u7ec4\u7684\u5143\u7d20\u4e0d\u80fd\u4fee\u6539 # \u5b9a\u4e49\u5143\u7ec4 t = ('\u83dc\u9e1f', 18, True, '\u56db\u5ddd\u6210\u90fd') print(t) # \u83b7\u53d6\u5143\u7ec4\u4e2d\u7684\u5143\u7d20 print(t[0]) print(t[3]) # \u904d\u5386\u5143\u7ec4\u4e2d\u7684\u503c for member in t: print(member) # \u91cd\u65b0\u7ed9\u5143\u7ec4\u8d4b\u503c # t[0] = '\u738b\u5927\u9524' # TypeError # \u53d8\u91cft\u91cd\u65b0\u5f15\u7528\u4e86\u65b0\u7684\u5143\u7ec4\u539f\u6765\u7684\u5143\u7ec4\u5c06\u88ab\u5783\u573e\u56de\u6536 t = ('\u738b\u5927\u9524', 20, True, '\u4e91\u5357\u6606\u660e') print(t) # \u5c06\u5143\u7ec4\u8f6c\u6362\u6210\u5217\u8868 person = list(t) print(person) # \u5217\u8868\u662f\u53ef\u4ee5\u4fee\u6539\u5b83\u7684\u5143\u7d20\u7684 person[0] = '\u674e\u5c0f\u9f99' person[1] = 25 print(person) # \u5c06\u5217\u8868\u8f6c\u6362\u6210\u5143\u7ec4 fruits_list = ['apple', 'banana', 'orange'] fruits_tuple = tuple(fruits_list) print(fruits_tuple) \u7591\u95ee\uff1a\u6211\u4eec\u5df2\u7ecf\u6709\u4e86\u5217\u8868\u8fd9\u79cd\u6570\u636e\u7ed3\u6784\uff0c\u4e3a\u4ec0\u4e48\u8fd8\u9700\u8981\u5143\u7ec4\u5462\uff1f \u5143\u7ec4\u4e2d\u7684\u5143\u7d20\u662f\u65e0\u6cd5\u4fee\u6539\u7684\uff0c\u5728\u9879\u76ee\u4e2d\u5c24\u5176\u662f\u591a\u7ebf\u7a0b\u73af\u5883\u4e2d\u53ef\u80fd\u66f4\u559c\u6b22\u4f7f\u7528\u7684\u662f\u90a3\u4e9b\u4e0d\u53d8\u5bf9\u8c61\uff08\u4e00\u65b9\u9762\u56e0\u4e3a\u5bf9\u8c61\u72b6\u6001\u4e0d\u80fd\u4fee\u6539\uff0c\u6240\u4ee5\u53ef\u4ee5\u907f\u514d\u7531\u6b64\u5f15\u8d77\u7684\u4e0d\u5fc5\u8981\u7684\u7a0b\u5e8f\u9519\u8bef\uff0c\u7b80\u5355\u7684\u8bf4\u5c31\u662f\u4e00\u4e2a\u4e0d\u53d8\u7684\u5bf9\u8c61\u8981\u6bd4\u53ef\u53d8\u7684\u5bf9\u8c61\u66f4\u52a0\u5bb9\u6613\u7ef4\u62a4\uff1b\u53e6\u4e00\u65b9\u9762\u56e0\u4e3a\u6ca1\u6709\u4efb\u4f55\u4e00\u4e2a\u7ebf\u7a0b\u80fd\u591f\u4fee\u6539\u4e0d\u53d8\u5bf9\u8c61\u7684\u5185\u90e8\u72b6\u6001\uff0c\u4e00\u4e2a\u4e0d\u53d8\u5bf9\u8c61\u81ea\u52a8\u5c31\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u7701\u6389\u5904\u7406\u540c\u6b65\u5316\u7684\u5f00\u9500\u3002\u4e00\u4e2a\u4e0d\u53d8\u5bf9\u8c61\u53ef\u4ee5\u65b9\u4fbf\u7684\u88ab\u5171\u4eab\u8bbf\u95ee\uff09\u3002\u6240\u4ee5\u7ed3\u8bba\u5c31\u662f\uff1a\u5982\u679c\u4e0d\u9700\u8981\u5bf9\u5143\u7d20\u8fdb\u884c\u6dfb\u52a0\u3001\u5220\u9664\u3001\u4fee\u6539\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u5143\u7ec4\uff0c\u5f53\u7136\u5982\u679c\u4e00\u4e2a\u65b9\u6cd5\u8981\u8fd4\u56de\u591a\u4e2a\u503c\uff0c\u4f7f\u7528\u5143\u7ec4\u4e5f\u662f\u4e0d\u9519\u7684\u9009\u62e9 \u5143\u7ec4\u5728\u521b\u5efa\u65f6\u95f4\u548c\u5360\u7528\u7684\u7a7a\u95f4\u4e0a\u9762\u90fd\u4f18\u4e8e\u5217\u8868","title":"\u5143\u7ec4"},{"location":"Python_Basics/#_14","text":"\u8ddf\u6570\u5b66\u4e0a\u7684\u96c6\u5408\u662f\u4e00\u81f4\u7684\uff0c\u4e0d\u5141\u8bb8\u6709\u91cd\u590d\u5143\u7d20\uff0c\u53ef\u4ee5\u8fdb\u884c\u4ea4\u96c6\u3001\u5e76\u96c6\u3001\u5dee\u96c6\u7b49\u8fd0\u7b97","title":"\u96c6\u5408"},{"location":"Python_Basics/#_15","text":"# \u521b\u5efa\u96c6\u5408\u7684\u5b57\u9762\u91cf\u8bed\u6cd5 set1 = {1, 2, 3, 3, 3, 2} print(set1) print('Length =', len(set1)) # \u521b\u5efa\u96c6\u5408\u7684\u6784\u9020\u5668\u8bed\u6cd5 set2 = set(range(1, 10)) set3 = set((1, 2, 3, 3, 2, 1)) print(set2, set3) # \u521b\u5efa\u96c6\u5408\u7684\u63a8\u5bfc\u5f0f\u8bed\u6cd5(\u63a8\u5bfc\u5f0f\u4e5f\u53ef\u4ee5\u7528\u4e8e\u63a8\u5bfc\u96c6\u5408) set4 = {num for num in range(1, 100) if num % 3 == 0 or num % 5 == 0} print(set4)","title":"\u521b\u5efa\u96c6\u5408"},{"location":"Python_Basics/#_16","text":"set1.add(4) set1.add(5) set2.update([11, 12]) set2.discard(5) if 4 in set2: set2.remove(4) print(set1, set2) print(set3.pop()) print(set3)","title":"\u96c6\u5408\u6dfb\u52a0\u5143\u7d20\u3001\u5220\u9664\u5143\u7d20"},{"location":"Python_Basics/#_17","text":"# \u96c6\u5408\u7684\u4ea4\u96c6\u3001\u5e76\u96c6\u3001\u5dee\u96c6\u3001\u5bf9\u79f0\u5dee\u8fd0\u7b97 print(set1 & set2) # print(set1.intersection(set2)) print(set1 | set2) # print(set1.union(set2)) print(set1 - set2) # print(set1.difference(set2)) print(set1 ^ set2) # print(set1.symmetric_difference(set2)) # \u5224\u65ad\u5b50\u96c6\u548c\u8d85\u96c6 print(set2 <= set1) # print(set2.issubset(set1)) print(set3 <= set1) # print(set3.issubset(set1)) print(set1 >= set2) # print(set1.issuperset(set2)) print(set1 >= set3) # print(set1.issuperset(set3)) \u8bf4\u660e\uff1a \u96c6\u5408\u8fdb\u884c\u8fd0\u7b97\u7684\u65f6\u5019\u53ef\u4ee5\u8c03\u7528\u96c6\u5408\u5bf9\u8c61\u7684\u65b9\u6cd5\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u5bf9\u5e94\u7684\u8fd0\u7b97\u7b26\uff0c\u4f8b\u5982 & \u8fd0\u7b97\u7b26\u8ddfintersection\u65b9\u6cd5\u7684\u4f5c\u7528\u662f\u4e00\u6837\u7684\uff0c\u4f46\u662f\u4f7f\u7528\u8fd0\u7b97\u7b26\u8ba9\u4ee3\u7801\u66f4\u52a0\u76f4\u89c2","title":"\u96c6\u5408\u7684\u6210\u5458\u3001\u4ea4\u96c6\u3001\u5e76\u96c6\u3001\u5dee\u96c6\u7b49\u8fd0\u7b97"},{"location":"Python_Basics/#_18","text":"\u5b57\u5178\u53ef\u4ee5\u5b58\u50a8\u4efb\u610f\u7c7b\u578b\u5bf9\u8c61\uff0c\u5b83\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u7531\u4e00\u4e2a\u952e\u548c\u4e00\u4e2a\u503c\u7ec4\u6210\u7684\u201c\u952e\u503c\u5bf9\u201d # \u521b\u5efa\u5b57\u5178\u7684\u5b57\u9762\u91cf\u8bed\u6cd5 scores = {'\u83dc\u9e1f': 95, '\u767d\u5143\u82b3': 78, '\u72c4\u4ec1\u6770': 82} print(scores) # \u521b\u5efa\u5b57\u5178\u7684\u6784\u9020\u5668\u8bed\u6cd5 items1 = dict(one=1, two=2, three=3, four=4) # \u901a\u8fc7zip\u51fd\u6570\u5c06\u4e24\u4e2a\u5e8f\u5217\u538b\u6210\u5b57\u5178 items2 = dict(zip(['a', 'b', 'c'], '123')) # \u521b\u5efa\u5b57\u5178\u7684\u63a8\u5bfc\u5f0f\u8bed\u6cd5 items3 = {num: num ** 2 for num in range(1, 10)} print(items1, items2, items3) # \u901a\u8fc7\u952e\u53ef\u4ee5\u83b7\u53d6\u5b57\u5178\u4e2d\u5bf9\u5e94\u7684\u503c print(scores['\u83dc\u9e1f']) print(scores['\u72c4\u4ec1\u6770']) # \u5bf9\u5b57\u5178\u4e2d\u6240\u6709\u952e\u503c\u5bf9\u8fdb\u884c\u904d\u5386 for key in scores: print(f'{key}: {scores[key]}') # \u66f4\u65b0\u5b57\u5178\u4e2d\u7684\u5143\u7d20 scores['\u767d\u5143\u82b3'] = 65 scores['\u8bf8\u845b\u738b\u6717'] = 71 scores.update(\u51b7\u9762=67, \u65b9\u542f\u9e64=85) print(scores) if '\u6b66\u5219\u5929' in scores: print(scores['\u6b66\u5219\u5929']) print(scores.get('\u6b66\u5219\u5929')) # get\u65b9\u6cd5\u4e5f\u662f\u901a\u8fc7\u952e\u83b7\u53d6\u5bf9\u5e94\u7684\u503c\u4f46\u662f\u53ef\u4ee5\u8bbe\u7f6e\u9ed8\u8ba4\u503c print(scores.get('\u6b66\u5219\u5929', 60)) # \u5220\u9664\u5b57\u5178\u4e2d\u7684\u5143\u7d20 print(scores.popitem()) print(scores.popitem()) print(scores.pop('\u83dc\u9e1f', 100)) # \u6e05\u7a7a\u5b57\u5178 scores.clear() print(scores)","title":"\u5b57\u5178"},{"location":"Python_Basics/#_19","text":"","title":"\u6761\u4ef6\u63a7\u5236"},{"location":"Python_Basics/#if","text":"if condition_1: statement_block_1 elif condition_2: statement_block_2 else: statement_block_3","title":"if \u8bed\u53e5"},{"location":"Python_Basics/#if_1","text":"num = int(input(\"\u8f93\u5165\u4e00\u4e2a\u6570\u5b57\uff1a\")) if num % 2 == 0: if num % 3 == 0: print (\"\u4f60\u8f93\u5165\u7684\u6570\u5b57\u53ef\u4ee5\u6574\u9664 2 \u548c 3\") else: print (\"\u4f60\u8f93\u5165\u7684\u6570\u5b57\u53ef\u4ee5\u6574\u9664 2\uff0c\u4f46\u4e0d\u80fd\u6574\u9664 3\") else: if num % 3 == 0: print (\"\u4f60\u8f93\u5165\u7684\u6570\u5b57\u53ef\u4ee5\u6574\u9664 3\uff0c\u4f46\u4e0d\u80fd\u6574\u9664 2\") else: print (\"\u4f60\u8f93\u5165\u7684\u6570\u5b57\u4e0d\u80fd\u6574\u9664 2 \u548c 3\")","title":"if \u5d4c\u5957"},{"location":"Python_Basics/#_20","text":"\u5728Python\u4e2d\u6784\u9020\u5faa\u73af\u7ed3\u6784\u6709\u4e24\u79cd\u65b9\u6cd5\uff0c\u4e00\u79cd\u662f while \u5faa\u73af\uff0c\u4e00\u79cd\u662f for-in \u5faa\u73af","title":"\u5faa\u73af\u8bed\u53e5"},{"location":"Python_Basics/#while","text":"# \u731c\u6570\u5b57\u6e38\u620f import random answer = random.randint(1, 100) counter = 0 while True: counter += 1 number = int(input('\u8bf7\u8f93\u5165: ')) if number < answer: print('\u5927\u4e00\u70b9') elif number > answer: print('\u5c0f\u4e00\u70b9') else: print('\u606d\u559c\u4f60\u731c\u5bf9\u4e86!') break print(\"f \u4f60\u603b\u5171\u731c\u4e86 {counter} \u6b21\") if counter > 7: print('\u4f60\u7684\u667a\u5546\u4f59\u989d\u660e\u663e\u4e0d\u8db3')","title":"while \u5faa\u73af"},{"location":"Python_Basics/#for-in","text":"# \u7528for\u5faa\u73af\u5b9e\u73b01~100\u4e4b\u95f4\u7684\u5076\u6570\u6c42\u548c sum = 0 for x in range(2, 101, 2): sum += x print(sum) # for\u5faa\u73af\u7684\u5d4c\u5957 for i in range(1, 6): for j in range(1, i + 1): print(\"*\", end=\"\") print(\"\\r\") * ** *** **** ***** # \u4f7f\u7528\u5185\u7f6eenumerate\u51fd\u6570\u8fdb\u884c\u904d\u5386 for index, item in enumerate(sequence): process(index, item) sequence = [12, 34, 34, 23, 45, 76, 89] for i, j in enumerate(sequence): print(i, j) 0 12 1 34 2 34 3 23 4 45 5 76 6 89","title":"for-in \u5faa\u73af"},{"location":"Python_Basics/#_21","text":"\u8fed\u4ee3\u5668\u662f\u5b9e\u73b0\u4e86\u8fed\u4ee3\u5668\u534f\u8bae\u7684\u5bf9\u8c61\u3002 Python\u4e2d\u6ca1\u6709\u50cf protocol \u6216 interface \u8fd9\u6837\u7684\u5b9a\u4e49\u534f\u8bae\u7684\u5173\u952e\u5b57\u3002 Python\u4e2d\u7528\u9b54\u672f\u65b9\u6cd5\u8868\u793a\u534f\u8bae\u3002 __iter__ \u548c __next__ \u9b54\u672f\u65b9\u6cd5\u5c31\u662f\u8fed\u4ee3\u5668\u534f\u8bae \u751f\u6210\u5668\u662f\u8bed\u6cd5\u7b80\u5316\u7248\u7684\u8fed\u4ee3\u5668\u3002 \u751f\u6210\u5668\u8fdb\u5316\u4e3a\u534f\u7a0b\u3002 \u751f\u6210\u5668\u5bf9\u8c61\u53ef\u4ee5\u4f7f\u7528 send() \u65b9\u6cd5\u53d1\u9001\u6570\u636e\uff0c\u53d1\u9001\u7684\u6570\u636e\u4f1a\u6210\u4e3a\u751f\u6210\u5668\u51fd\u6570\u4e2d\u901a\u8fc7 yield \u8868\u8fbe\u5f0f\u83b7\u5f97\u7684\u503c\u3002\u8fd9\u6837\uff0c\u751f\u6210\u5668\u5c31\u53ef\u4ee5\u4f5c\u4e3a\u534f\u7a0b\u4f7f\u7528\uff0c\u534f\u7a0b\u7b80\u5355\u7684\u8bf4\u5c31\u662f\u53ef\u4ee5\u76f8\u4e92\u534f\u4f5c\u7684\u5b50\u7a0b\u5e8f\u3002 class Fib(object): \"\"\"\u8fed\u4ee3\u5668\"\"\" def __init__(self, num): self.num = num self.a, self.b = 0, 1 self.idx = 0 def __iter__(self): return self def __next__(self): if self.idx < self.num: self.a, self.b = self.b, self.a + self.b self.idx += 1 return self.a raise StopIteration() def fib(num): \"\"\"\u751f\u6210\u5668\"\"\" a, b = 0, 1 for _ in range(num): a, b = b, a + b yield a def calc_avg(): \"\"\"\u6d41\u5f0f\u8ba1\u7b97\u5e73\u5747\u503c\"\"\" total, counter = 0, 0 avg_value = None while True: value = yield avg_value total, counter = total + value, counter + 1 avg_value = total / counter gen = calc_avg() next(gen) print(gen.send(10)) print(gen.send(20)) print(gen.send(30))","title":"\u8fed\u4ee3\u5668\u4e0e\u751f\u6210\u5668"},{"location":"Python_Basics/#_22","text":"\u5148\u6765\u7814\u7a76\u4e00\u9053\u6570\u5b66\u9898\uff0c\u8bf7\u8bf4\u51fa\u4e0b\u9762\u7684\u65b9\u7a0b\u6709\u591a\u5c11\u7ec4\u6b63\u6574\u6570\u89e3 $$ x1 + x2 + x3 + x4 = 8 $$ \u4e0a\u9762\u7684\u95ee\u9898\u7b49\u540c\u4e8e\u5c068\u4e2a\u82f9\u679c\u5206\u6210\u56db\u7ec4\uff0c\u6bcf\u7ec4\u81f3\u5c11\u4e00\u4e2a\u82f9\u679c\u6709\u591a\u5c11\u79cd\u65b9\u6848 \"\"\" \u8f93\u5165M\u548cN\u8ba1\u7b97C(M,N) \"\"\" m = int(input('m = ')) n = int(input('n = ')) fm = 1 for num in range(1, m + 1): fm *= num fn = 1 for num in range(1, n + 1): fn *= num fm_n = 1 for num in range(1, m - n + 1): fm_n *= num print(fm // fn // fm_n)","title":"\u51fd\u6570\u548c\u6a21\u5757"},{"location":"Python_Basics/#_23","text":"Martin Fowler \u66fe\u7ecf\u8bf4\u8fc7\uff1a\u201c \u4ee3\u7801\u6709\u5f88\u591a\u79cd\u574f\u5473\u9053\uff0c\u91cd\u590d\u662f\u6700\u574f\u7684\u4e00\u79cd\uff01 \u201d\uff0c\u8981\u5199\u51fa\u9ad8\u8d28\u91cf\u7684\u4ee3\u7801\u9996\u5148\u8981\u89e3\u51b3\u7684\u5c31\u662f\u91cd\u590d\u4ee3\u7801\u7684\u95ee\u9898 \u51fd\u6570\u662f\u7ec4\u7ec7\u597d\u7684\uff0c\u53ef\u91cd\u590d\u4f7f\u7528\u7684\uff0c\u7528\u6765\u5b9e\u73b0\u5355\u4e00\uff0c\u6216\u76f8\u5173\u8054\u529f\u80fd\u7684\u4ee3\u7801\u6bb5 \u51fd\u6570\u80fd\u63d0\u9ad8\u5e94\u7528\u7684\u6a21\u5757\u6027\uff0c\u548c\u4ee3\u7801\u7684\u91cd\u590d\u5229\u7528\u7387","title":"\u51fd\u6570\u7684\u4f5c\u7528"},{"location":"Python_Basics/#_24","text":"\u4f7f\u7528 def \u5173\u952e\u5b57\u6765\u5b9a\u4e49\u51fd\u6570\uff0c\u5728\u51fd\u6570\u540d\u540e\u9762\u7684\u62ec\u53f7\u4e2d\u53ef\u4ee5\u653e\u7f6e\u4f20\u9012\u7ed9\u51fd\u6570\u7684\u53c2\u6570\uff0c\u548c\u6570\u5b66\u4e0a\u7684\u51fd\u6570\u975e\u5e38\u76f8\u4f3c \u7a0b\u5e8f\u4e2d\u51fd\u6570\u7684\u53c2\u6570\u5c31\u76f8\u5f53\u4e8e\u662f\u6570\u5b66\u4e0a\u51fd\u6570\u7684\u81ea\u53d8\u91cf \u51fd\u6570\u6267\u884c\u5b8c\u6210\u540e\u901a\u8fc7 return \u5173\u952e\u5b57\u6765\u8fd4\u56de\u4e00\u4e2a\u503c\uff0c\u76f8\u5f53\u4e8e\u6570\u5b66\u4e0a\u51fd\u6570\u7684\u56e0\u53d8\u91cf \u5bf9\u4e0a\u9762\u7684\u4ee3\u7801\u8fdb\u884c\u91cd\u6784 \"\"\" \u8f93\u5165M\u548cN\u8ba1\u7b97C(M,N) \"\"\" def fac(num): \"\"\"\u6c42\u9636\u4e58\"\"\" result = 1 for n in range(1, num + 1): result *= n return result m = int(input('m = ')) n = int(input('n = ')) # \u5f53\u9700\u8981\u8ba1\u7b97\u9636\u4e58\u7684\u65f6\u5019\u4e0d\u7528\u518d\u5199\u5faa\u73af\u6c42\u9636\u4e58\u800c\u662f\u76f4\u63a5\u8c03\u7528\u5df2\u7ecf\u5b9a\u4e49\u597d\u7684\u51fd\u6570 print(fac(m) // fac(n) // fac(m - n)) \u8bf4\u660e\uff1a Python\u7684 math \u6a21\u5757\u4e2d\u5176\u5b9e\u5df2\u7ecf\u6709\u4e00\u4e2a\u540d\u4e3a factorial \u51fd\u6570\u5b9e\u73b0\u4e86\u9636\u4e58\u8fd0\u7b97\uff0c\u4e8b\u5b9e\u4e0a\u6c42\u9636\u4e58\u5e76\u4e0d\u7528\u81ea\u5df1\u5b9a\u4e49\u51fd\u6570\u3002 \u5b9e\u9645\u5f00\u53d1\u4e2d\u5e76\u4e0d\u5efa\u8bae\u505a\u8fd9\u79cd\u4f4e\u7ea7\u7684\u91cd\u590d\u52b3\u52a8","title":"\u5b9a\u4e49\u51fd\u6570"},{"location":"Python_Basics/#_25","text":"\u5728Python\u4e2d\uff0c\u51fd\u6570\u7684\u53c2\u6570\u53ef\u4ee5\u6709\u9ed8\u8ba4\u503c\uff0c\u4e5f\u652f\u6301\u4f7f\u7528\u53ef\u53d8\u53c2\u6570 from random import randint def roll_dice(n=2): \"\"\"\u6447\u8272\u5b50\"\"\" total = 0 for _ in range(n): total += randint(1, 6) return total def add(a=0, b=0, c=0): \"\"\"\u4e09\u4e2a\u6570\u76f8\u52a0\"\"\" return a + b + c # \u5982\u679c\u6ca1\u6709\u6307\u5b9a\u53c2\u6570\u90a3\u4e48\u4f7f\u7528\u9ed8\u8ba4\u503c\u6447\u4e24\u9897\u8272\u5b50 print(roll_dice()) # \u6447\u4e09\u9897\u8272\u5b50 print(roll_dice(3)) print(add()) print(add(1)) print(add(1, 2)) print(add(1, 2, 3)) # \u4f20\u9012\u53c2\u6570\u65f6\u53ef\u4ee5\u4e0d\u6309\u7167\u8bbe\u5b9a\u7684\u987a\u5e8f\u8fdb\u884c\u4f20\u9012 print(add(c=50, a=100, b=200)) \u6211\u4eec\u7ed9\u4e0a\u9762\u4e24\u4e2a\u51fd\u6570\u7684\u53c2\u6570\u90fd\u8bbe\u5b9a\u4e86\u9ed8\u8ba4\u503c\uff0c\u8fd9\u4e5f\u5c31\u610f\u5473\u7740\u5982\u679c\u5728\u8c03\u7528\u51fd\u6570\u7684\u65f6\u5019\u5982\u679c\u6ca1\u6709\u4f20\u5165\u5bf9\u5e94\u53c2\u6570\u7684\u503c\u65f6\u5c06\u4f7f\u7528\u8be5\u53c2\u6570\u7684\u9ed8\u8ba4\u503c\uff0c\u6240\u4ee5\u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\u6211\u4eec\u53ef\u4ee5\u7528\u5404\u79cd\u4e0d\u540c\u7684\u65b9\u5f0f\u53bb\u8c03\u7528 add \u51fd\u6570\uff0c\u8fd9\u8ddf\u5176\u4ed6\u5f88\u591a\u8bed\u8a00\u4e2d\u51fd\u6570\u91cd\u8f7d\u7684\u6548\u679c\u662f\u4e00\u81f4\u7684\u3002 \u5176\u5b9e\u4e0a\u9762\u7684 add \u51fd\u6570\u8fd8\u6709\u66f4\u597d\u7684\u5b9e\u73b0\u65b9\u6848\uff0c\u56e0\u4e3a\u6211\u4eec\u53ef\u80fd\u4f1a\u5bf90\u4e2a\u6216\u591a\u4e2a\u53c2\u6570\u8fdb\u884c\u52a0\u6cd5\u8fd0\u7b97\uff0c\u800c\u5177\u4f53\u6709\u591a\u5c11\u4e2a\u53c2\u6570\u662f\u7531\u8c03\u7528\u8005\u6765\u51b3\u5b9a\uff0c\u6211\u4eec\u4f5c\u4e3a\u51fd\u6570\u7684\u8bbe\u8ba1\u8005\u5bf9\u8fd9\u4e00\u70b9\u662f\u4e00\u65e0\u6240\u77e5\u7684\uff0c\u56e0\u6b64\u5728\u4e0d\u786e\u5b9a\u53c2\u6570\u4e2a\u6570\u7684\u65f6\u5019\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u53ef\u53d8\u53c2\u6570\uff0c\u4ee3\u7801\u5982\u4e0b\u6240\u793a\u3002 # \u5728\u53c2\u6570\u540d\u524d\u9762\u7684*\u8868\u793aargs\u662f\u4e00\u4e2a\u53ef\u53d8\u53c2\u6570 def add(*args): total = 0 for val in args: total += val return total # \u5728\u8c03\u7528add\u51fd\u6570\u65f6\u53ef\u4ee5\u4f20\u51650\u4e2a\u6216\u591a\u4e2a\u53c2\u6570 print(add()) print(add(1)) print(add(1, 2)) print(add(1, 2, 3)) print(add(1, 3, 5, 7, 9))","title":"\u51fd\u6570\u53c2\u6570"},{"location":"Python_Basics/#_26","text":"\u4ece Python \u89e3\u91ca\u5668\u9000\u51fa\u518d\u8fdb\u5165\uff0c\u5b9a\u4e49\u7684\u6240\u6709\u7684\u65b9\u6cd5\u548c\u53d8\u91cf\u5c31\u90fd\u6d88\u5931\u4e86 \u4e3a\u6b64 Python \u63d0\u4f9b\u4e86\u4e00\u4e2a\u529e\u6cd5\uff0c\u628a\u8fd9\u4e9b\u5b9a\u4e49\u5b58\u653e\u5728\u6587\u4ef6\u4e2d\uff0c\u4e3a\u4e00\u4e9b\u811a\u672c\u6216\u8005\u4ea4\u4e92\u5f0f\u7684\u89e3\u91ca\u5668\u5b9e\u4f8b\u4f7f\u7528\uff0c\u8fd9\u4e2a\u6587\u4ef6\u88ab\u79f0\u4e3a\u6a21\u5757 \u6a21\u5757\u662f\u4e00\u4e2a\u5305\u542b\u6240\u6709\u4f60\u5b9a\u4e49\u7684\u51fd\u6570\u548c\u53d8\u91cf\u7684\u6587\u4ef6\uff0c\u5176\u540e\u7f00\u540d\u662f.py \u6a21\u5757\u53ef\u4ee5\u88ab\u522b\u7684\u7a0b\u5e8f\u5f15\u5165\uff0c\u4ee5\u4f7f\u7528\u8be5\u6a21\u5757\u4e2d\u7684\u51fd\u6570\u7b49\u529f\u80fd\uff0c\u8fd9\u4e5f\u662f\u4f7f\u7528 python \u6807\u51c6\u5e93\u7684\u65b9\u6cd5","title":"\u7528\u6a21\u5757\u7ba1\u7406\u51fd\u6570"},{"location":"Python_Basics/#_27","text":"python\u4f7f\u7528lambda\u6765\u521b\u5efa\u533f\u540d\u51fd\u6570 lambda\u53ea\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u51fd\u6570\u4f53\u6bd4def\u7b80\u5355\u5f88\u591a lambda\u7684\u4e3b\u4f53\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u4ee3\u7801\u5757 lambda\u51fd\u6570\u62e5\u6709\u81ea\u5df1\u7684\u547d\u540d\u7a7a\u95f4\uff0c\u4e14\u4e0d\u80fd\u8bbf\u95ee\u81ea\u5df1\u53c2\u6570\u5217\u8868\u4e4b\u5916\u6216\u5168\u5c40\u547d\u540d\u7a7a\u95f4\u91cc\u7684\u53c2\u6570 \u867d\u7136lambda\u51fd\u6570\u770b\u8d77\u6765\u53ea\u80fd\u5199\u4e00\u884c\uff0c\u5374\u4e0d\u7b49\u540c\u4e8eC\u6216C++\u7684\u5185\u8054\u51fd\u6570\uff0c\u540e\u8005\u7684\u76ee\u7684\u662f\u8c03\u7528\u5c0f\u51fd\u6570\u65f6\u4e0d\u5360\u7528\u6808\u5185\u5b58\u4ece\u800c\u589e\u52a0\u8fd0\u884c\u6548\u7387","title":"\u533f\u540d\u51fd\u6570"},{"location":"Python_Basics/#_28","text":"","title":"\u9519\u8bef\u548c\u5f02\u5e38"},{"location":"Python_Basics/#_29","text":"\u7c7b(Class): \u7528\u6765\u63cf\u8ff0\u5177\u6709\u76f8\u540c\u7684\u5c5e\u6027\u548c\u65b9\u6cd5\u7684\u5bf9\u8c61\u7684\u96c6\u5408\u3002\u5b83\u5b9a\u4e49\u4e86\u8be5\u96c6\u5408\u4e2d\u6bcf\u4e2a\u5bf9\u8c61\u6240\u5171\u6709\u7684\u5c5e\u6027\u548c\u65b9\u6cd5\u3002\u5bf9\u8c61\u662f\u7c7b\u7684\u5b9e\u4f8b\u3002 \u65b9\u6cd5\uff1a \u7c7b\u4e2d\u5b9a\u4e49\u7684\u51fd\u6570\u3002 \u7c7b\u53d8\u91cf\uff1a \u7c7b\u53d8\u91cf\u5728\u6574\u4e2a\u5b9e\u4f8b\u5316\u7684\u5bf9\u8c61\u4e2d\u662f\u516c\u7528\u7684\u3002\u7c7b\u53d8\u91cf\u5b9a\u4e49\u5728\u7c7b\u4e2d\u4e14\u5728\u51fd\u6570\u4f53\u4e4b\u5916\u3002\u7c7b\u53d8\u91cf\u901a\u5e38\u4e0d\u4f5c\u4e3a\u5b9e\u4f8b\u53d8\u91cf\u4f7f\u7528\u3002 \u6570\u636e\u6210\u5458\uff1a \u7c7b\u53d8\u91cf\u6216\u8005\u5b9e\u4f8b\u53d8\u91cf\u7528\u4e8e\u5904\u7406\u7c7b\u53ca\u5176\u5b9e\u4f8b\u5bf9\u8c61\u7684\u76f8\u5173\u7684\u6570\u636e\u3002 \u65b9\u6cd5\u91cd\u5199\uff1a \u5982\u679c\u4ece\u7236\u7c7b\u7ee7\u627f\u7684\u65b9\u6cd5\u4e0d\u80fd\u6ee1\u8db3\u5b50\u7c7b\u7684\u9700\u6c42\uff0c\u53ef\u4ee5\u5bf9\u5176\u8fdb\u884c\u6539\u5199\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u53eb\u65b9\u6cd5\u7684\u8986\u76d6\uff08override\uff09\uff0c\u4e5f\u79f0\u4e3a\u65b9\u6cd5\u7684\u91cd\u5199\u3002 \u5c40\u90e8\u53d8\u91cf\uff1a \u5b9a\u4e49\u5728\u65b9\u6cd5\u4e2d\u7684\u53d8\u91cf\uff0c\u53ea\u4f5c\u7528\u4e8e\u5f53\u524d\u5b9e\u4f8b\u7684\u7c7b\u3002 \u5b9e\u4f8b\u53d8\u91cf\uff1a \u5728\u7c7b\u7684\u58f0\u660e\u4e2d\uff0c\u5c5e\u6027\u662f\u7528\u53d8\u91cf\u6765\u8868\u793a\u7684\uff0c\u8fd9\u79cd\u53d8\u91cf\u5c31\u79f0\u4e3a\u5b9e\u4f8b\u53d8\u91cf\uff0c\u5b9e\u4f8b\u53d8\u91cf\u5c31\u662f\u4e00\u4e2a\u7528 self \u4fee\u9970\u7684\u53d8\u91cf\u3002 \u7ee7\u627f\uff1a \u5373\u4e00\u4e2a\u6d3e\u751f\u7c7b\uff08derived class\uff09\u7ee7\u627f\u57fa\u7c7b\uff08base class\uff09\u7684\u5b57\u6bb5\u548c\u65b9\u6cd5\u3002\u7ee7\u627f\u4e5f\u5141\u8bb8\u628a\u4e00\u4e2a\u6d3e\u751f\u7c7b\u7684\u5bf9\u8c61\u4f5c\u4e3a\u4e00\u4e2a\u57fa\u7c7b\u5bf9\u8c61\u5bf9\u5f85\u3002\u4f8b\u5982\uff0c\u6709\u8fd9\u6837\u4e00\u4e2a\u8bbe\u8ba1\uff1a\u4e00\u4e2aDog\u7c7b\u578b\u7684\u5bf9\u8c61\u6d3e\u751f\u81eaAnimal\u7c7b\uff0c\u8fd9\u662f\u6a21\u62df\"\u662f\u4e00\u4e2a\uff08is-a\uff09\"\u5173\u7cfb\uff08\u4f8b\u56fe\uff0cDog\u662f\u4e00\u4e2aAnimal\uff09\u3002 \u5b9e\u4f8b\u5316\uff1a \u521b\u5efa\u4e00\u4e2a\u7c7b\u7684\u5b9e\u4f8b\uff0c\u7c7b\u7684\u5177\u4f53\u5bf9\u8c61\u3002 \u5bf9\u8c61\uff1a \u901a\u8fc7\u7c7b\u5b9a\u4e49\u7684\u6570\u636e\u7ed3\u6784\u5b9e\u4f8b\u3002\u5bf9\u8c61\u5305\u62ec\u4e24\u4e2a\u6570\u636e\u6210\u5458\uff08\u7c7b\u53d8\u91cf\u548c\u5b9e\u4f8b\u53d8\u91cf\uff09\u548c\u65b9\u6cd5\u3002","title":"\u9762\u5411\u5bf9\u8c61"},{"location":"Python_Basics/#_30","text":"\u4e00\u822c\u6709\u4e09\u79cd\u547d\u540d\u7a7a\u95f4\uff1a \u5185\u7f6e\u540d\u79f0\uff08built-in names \uff09\uff0c Python \u8bed\u8a00\u5185\u7f6e\u7684\u540d\u79f0\uff0c\u6bd4\u5982\u51fd\u6570\u540d abs\u3001char \u548c\u5f02\u5e38\u540d\u79f0 BaseException\u3001Exception \u7b49\u7b49\u3002 \u5168\u5c40\u540d\u79f0\uff08global names\uff09 \uff0c\u6a21\u5757\u4e2d\u5b9a\u4e49\u7684\u540d\u79f0\uff0c\u8bb0\u5f55\u4e86\u6a21\u5757\u7684\u53d8\u91cf\uff0c\u5305\u62ec\u51fd\u6570\u3001\u7c7b\u3001\u5176\u5b83\u5bfc\u5165\u7684\u6a21\u5757\u3001\u6a21\u5757\u7ea7\u7684\u53d8\u91cf\u548c\u5e38\u91cf\u3002 \u5c40\u90e8\u540d\u79f0\uff08local names\uff09 \uff0c\u51fd\u6570\u4e2d\u5b9a\u4e49\u7684\u540d\u79f0\uff0c\u8bb0\u5f55\u4e86\u51fd\u6570\u7684\u53d8\u91cf\uff0c\u5305\u62ec\u51fd\u6570\u7684\u53c2\u6570\u548c\u5c40\u90e8\u5b9a\u4e49\u7684\u53d8\u91cf\u3002\uff08\u7c7b\u4e2d\u5b9a\u4e49\u7684\u4e5f\u662f\uff09 \u547d\u540d\u7a7a\u95f4\u67e5\u627e\u987a\u5e8f: \u5c40\u90e8\u7684\u547d\u540d\u7a7a\u95f4 -> \u5168\u5c40\u547d\u540d\u7a7a\u95f4 -> \u5185\u7f6e\u547d\u540d\u7a7a\u95f4","title":"\u547d\u540d\u7a7a\u95f4"},{"location":"Python%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/","text":"\u63a8\u8350\u56fe\u4e66 \u5165\u95e8\u56fe\u4e66 Python\u7f16\u7a0b\uff1a\u4ece\u5165\u95e8\u5230\u5b9e\u8df5\uff08\u7b2c2\u7248\uff09- Eric Matthes \u8fdb\u9636\u56fe\u4e66 \u5229\u7528Python\u8fdb\u884c\u6570\u636e\u5206\u6790 \uff08\u7b2c2\u7248\uff09- Wes McKinney Python\u6570\u636e\u79d1\u5b66\u624b\u518c - Jake VanderPlas \u63a8\u8350\u89c6\u9891 B\u7ad9 Data analysis in Python with pandas B\u7ad9 Pandas vs Excel \u63a8\u8350\u7f51\u7ad9 Python \u6559\u7a0b \u83dc\u9e1f\u6559\u7a0b Python 3 \u6559\u7a0b Python \u5b98\u65b9\u6587\u6863 NumPy \u6559\u7a0b NumPy \u5b98\u65b9\u6587\u6863 Pandas \u6559\u7a0b Pandas \u5b98\u65b9\u6587\u6863 Matplotlib \u6559\u7a0b Matplotlib \u5b98\u65b9\u6587\u6863","title":"3.1 Python\u5b66\u4e60\u8def\u7ebf"},{"location":"Python%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/#_1","text":"","title":"\u63a8\u8350\u56fe\u4e66"},{"location":"Python%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/#_2","text":"Python\u7f16\u7a0b\uff1a\u4ece\u5165\u95e8\u5230\u5b9e\u8df5\uff08\u7b2c2\u7248\uff09- Eric Matthes","title":"\u5165\u95e8\u56fe\u4e66"},{"location":"Python%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/#_3","text":"\u5229\u7528Python\u8fdb\u884c\u6570\u636e\u5206\u6790 \uff08\u7b2c2\u7248\uff09- Wes McKinney Python\u6570\u636e\u79d1\u5b66\u624b\u518c - Jake VanderPlas","title":"\u8fdb\u9636\u56fe\u4e66"},{"location":"Python%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/#_4","text":"B\u7ad9 Data analysis in Python with pandas B\u7ad9 Pandas vs Excel","title":"\u63a8\u8350\u89c6\u9891"},{"location":"Python%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/#_5","text":"","title":"\u63a8\u8350\u7f51\u7ad9"},{"location":"Python%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/#python","text":"\u83dc\u9e1f\u6559\u7a0b Python 3 \u6559\u7a0b Python \u5b98\u65b9\u6587\u6863","title":"Python \u6559\u7a0b"},{"location":"Python%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/#numpy","text":"NumPy \u5b98\u65b9\u6587\u6863","title":"NumPy \u6559\u7a0b"},{"location":"Python%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/#pandas","text":"Pandas \u5b98\u65b9\u6587\u6863","title":"Pandas \u6559\u7a0b"},{"location":"Python%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/#matplotlib","text":"Matplotlib \u5b98\u65b9\u6587\u6863","title":"Matplotlib \u6559\u7a0b"},{"location":"SQL_Basics/","text":"\u601d\u7ef4\u5bfc\u56fe","title":"2.3 SQL Basics"},{"location":"SQL_Basics/#_1","text":"","title":"\u601d\u7ef4\u5bfc\u56fe"},{"location":"SQL%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/","text":"\u63a8\u8350\u56fe\u4e66 SQL\u5fc5\u77e5\u5fc5\u4f1a \u63a8\u8350\u89c6\u9891 B\u7ad9 'CodeWithMosh' SQL\u8fdb\u9636\u6559\u7a0b\u7cfb\u5217 \u63a8\u8350\u7f51\u7ad9 SQL \u5165\u95e8 \u83dc\u9e1f\u6559\u7a0b SQL \u6559\u7a0b \u83dc\u9e1f\u6559\u7a0b MySQL \u6559\u7a0b SQL \u5b9e\u6218 \u725b\u5ba2\u7f51 SQL\u9898\u5e93 \u529b\u6263 (LeetCode) SQL\u9898\u5e93","title":"2.1 SQL\u5b66\u4e60\u8def\u7ebf"},{"location":"SQL%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/#_1","text":"SQL\u5fc5\u77e5\u5fc5\u4f1a","title":"\u63a8\u8350\u56fe\u4e66"},{"location":"SQL%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/#_2","text":"B\u7ad9 'CodeWithMosh' SQL\u8fdb\u9636\u6559\u7a0b\u7cfb\u5217","title":"\u63a8\u8350\u89c6\u9891"},{"location":"SQL%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/#_3","text":"","title":"\u63a8\u8350\u7f51\u7ad9"},{"location":"SQL%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/#sql","text":"\u83dc\u9e1f\u6559\u7a0b SQL \u6559\u7a0b \u83dc\u9e1f\u6559\u7a0b MySQL \u6559\u7a0b","title":"SQL \u5165\u95e8"},{"location":"SQL%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/#sql_1","text":"\u725b\u5ba2\u7f51 SQL\u9898\u5e93 \u529b\u6263 (LeetCode) SQL\u9898\u5e93","title":"SQL \u5b9e\u6218"},{"location":"SQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/","text":"\u601d\u7ef4\u5bfc\u56fe","title":"2.2 SQL\u5fc5\u77e5\u5fc5\u4f1a"},{"location":"SQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/#_1","text":"","title":"\u601d\u7ef4\u5bfc\u56fe"},{"location":"%E5%88%A9%E7%94%A8Python%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/","text":"\u601d\u7ef4\u5bfc\u56fe \u8bfb\u4e66\u7b14\u8bb0","title":"3.2 \u5229\u7528Python\u8fdb\u884c\u6570\u636e\u5206\u6790"},{"location":"%E5%88%A9%E7%94%A8Python%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/#_1","text":"","title":"\u601d\u7ef4\u5bfc\u56fe"},{"location":"%E5%88%A9%E7%94%A8Python%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/#_2","text":"","title":"\u8bfb\u4e66\u7b14\u8bb0"},{"location":"%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%AE%9E%E6%88%98/","text":"\u5b9e\u6218","title":"4.3 \u673a\u5668\u5b66\u4e60\u5b9e\u6218"},{"location":"%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%AE%9E%E6%88%98/#_1","text":"","title":"\u5b9e\u6218"},{"location":"%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%90%86%E8%AE%BA/","text":"\u897f\u74dc\u4e66","title":"4.2 \u673a\u5668\u5b66\u4e60\u7406\u8bba"},{"location":"%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%90%86%E8%AE%BA/#_1","text":"","title":"\u897f\u74dc\u4e66"}]}